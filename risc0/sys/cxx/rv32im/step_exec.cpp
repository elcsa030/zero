// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/page_fault.cpp":106:16)
  Fp x0(56361024);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":104:19)
  Fp x1(54525952);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":81:32)
  Fp x2(219862);
  // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
  Fp x3(56361023);
  // loc("cirgen/circuit/rv32im/sha.cpp":342:18)
  Fp x4(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
  Fp x5(56360975);
  // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
  Fp x6(56360967);
  // loc("cirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x7(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x8(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x9(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x10(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x11(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x12(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x13(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x14(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x15(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x16(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x17(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x18(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x19(512);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":48:22)
  Fp x20(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x21(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x22(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":115:25)
  Fp x23(50331662);
  // loc("cirgen/circuit/rv32im/ecall.cpp":38:45)
  Fp x24(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":36:43)
  Fp x25(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":135:49)
  Fp x26(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":130:21)
  Fp x27(115);
  // loc("cirgen/components/u32.cpp":238:19)
  Fp x28(131070);
  // loc("cirgen/components/u32.cpp":234:19)
  Fp x29(131072);
  // loc("cirgen/components/u32.cpp":189:21)
  Fp x30(15);
  // loc("cirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x31(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x32(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
  Fp x33(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:79)
  Fp x34(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:56)
  Fp x35(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
  Fp x36(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x37(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x38(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x39(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
  Fp x40(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x41(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
  Fp x42(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
  Fp x43(51);
  // loc("cirgen/components/u32.cpp":65:36)
  Fp x44(1996488705);
  // loc("cirgen/components/u32.cpp":65:28)
  Fp x45(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x46(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x47(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x48(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x49(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x50(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x51(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x52(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x53(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x54(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x55(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x56(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:32)
  Fp x57(16);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x58(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x59(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x60(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x61(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x62(128);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x63(13);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x64(12);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x65(11);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x66(10);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x67(9);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x68(8);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x69(7);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x70(6);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x71(5);
  // loc("cirgen/circuit/rv32im/body.cpp":31:21)
  Fp x72(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":18:43)
  Fp x73(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":17:32)
  Fp x74(3);
  // loc("cirgen/circuit/rv32im/body.cpp":14:29)
  Fp x75(4);
  // loc("./cirgen/components/u32.h":27:12)
  Fp x76(16777216);
  // loc("./cirgen/components/u32.h":26:12)
  Fp x77(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":56:18)
  Fp x78(14);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x79(56284855);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x80(56284854);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x81(56284853);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x82(56284852);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x83(56284851);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x84(56284850);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x85(56284849);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x86(56284848);
  // loc("cirgen/components/bytes.cpp":90:30)
  Fp x87(2005401601);
  // loc("cirgen/components/bytes.cpp":90:30)
  Fp x88(256);
  // loc("cirgen/components/bytes.cpp":89:26)
  Fp x89(255);
  // loc("cirgen/components/bytes.cpp":37:25)
  Fp x90(2);
  // loc("cirgen/components/bytes.cpp":34:29)
  Fp x91(254);
  // loc("cirgen/components/bytes.cpp":21:13)
  Fp x92(0);
  // loc("cirgen/circuit/rv32im/top.cpp":18:17)
  Fp x93(1);
  // loc("Top/Code/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":39:25))
  auto x94 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x94 != Fp::invalid());
  if (x94 != 0) {
    // loc("Top/Code/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/top.cpp":18:69))
    auto x95 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x95 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":18:17)
    auto x96 = x93 - x95;
    // loc("Top/Code/Mux/1/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x97 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x97 != Fp::invalid());
    if (x96 != 0) {
      // loc("cirgen/components/bytes.cpp":21:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":22:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
    // loc("cirgen/components/bytes.cpp":110:17)
    auto x98 = x93 - x96;
    if (x98 != 0) {
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x99 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x99 != Fp::invalid());
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x100 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x100 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x101 = x100 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x102 = (x101 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x103 = x93 - x102;
        if (x103 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x104 = x100 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x104);
            reg = x104;
          }
        }
        if (x102 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x105 = x99 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x105);
            reg = x105;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x106 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x106 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x107 = x106 - x99;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x108 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x108 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x109 = x108 - x100;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x110 = x107 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x111 = x107 * x110;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x111 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x112 = x109 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x113 = x107 * x112;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x113 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x114 = x109 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x115 = x110 * x114;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x115 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x116 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x116 != Fp::invalid());
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x117 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x117 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x118 = x117 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x119 = (x118 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x120 = x93 - x119;
      if (x120 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x116);
          reg = x116;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x121 = x117 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x121);
          reg = x121;
        }
      }
      if (x119 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x122 = x116 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x122);
          reg = x122;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x123 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x123 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x124 = x123 - x116;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x125 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x125 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x126 = x125 - x117;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x127 = x124 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x128 = x124 * x127;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x128 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x129 = x126 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x130 = x124 * x129;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x130 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x131 = x126 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x132 = x127 * x131;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x132 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x133 = x125 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x134 = (x133 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x135 = x93 - x134;
      if (x135 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x123);
          reg = x123;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x136 = x125 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x136);
          reg = x136;
        }
      }
      if (x134 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x137 = x123 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x137);
          reg = x137;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x138 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x138 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x139 = x138 - x123;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x140 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x140 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x141 = x140 - x125;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x142 = x139 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x143 = x139 * x142;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x143 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x144 = x141 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x145 = x139 * x144;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x145 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x146 = x141 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x147 = x142 * x146;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x147 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x148 = x140 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x149 = (x148 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x150 = x93 - x149;
      if (x150 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x138);
          reg = x138;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x151 = x140 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x151);
          reg = x151;
        }
      }
      if (x149 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x152 = x138 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x152);
          reg = x152;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x153 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x153 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x154 = x153 - x138;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x155 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x155 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x156 = x155 - x140;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x157 = x154 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x158 = x154 * x157;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x158 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x159 = x156 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x160 = x154 * x159;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x160 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x161 = x156 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x162 = x157 * x161;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x162 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x163 = x155 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x164 = (x163 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x165 = x93 - x164;
      if (x165 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x153);
          reg = x153;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x166 = x155 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x166);
          reg = x166;
        }
      }
      if (x164 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x167 = x153 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x167);
          reg = x167;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x168 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x168 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x169 = x168 - x153;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x170 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x170 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x171 = x170 - x155;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x172 = x169 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x173 = x169 * x172;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x173 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x174 = x171 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x175 = x169 * x174;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x175 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x176 = x171 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x177 = x172 * x176;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x177 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x178 = x170 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x179 = (x178 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x180 = x93 - x179;
      if (x180 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x168);
          reg = x168;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x181 = x170 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x181);
          reg = x181;
        }
      }
      if (x179 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x182 = x168 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x182);
          reg = x182;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x183 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x183 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x184 = x183 - x168;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x185 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x185 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x186 = x185 - x170;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x187 = x184 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x188 = x184 * x187;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x188 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x189 = x186 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x190 = x184 * x189;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x190 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x191 = x186 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x192 = x187 * x191;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x192 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x193 = x185 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x194 = (x193 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x195 = x93 - x194;
      if (x195 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x183);
          reg = x183;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x196 = x185 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x196);
          reg = x196;
        }
      }
      if (x194 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x197 = x183 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x197);
          reg = x197;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x198 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x198 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x199 = x198 - x183;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x200 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x200 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x201 = x200 - x185;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x202 = x199 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x203 = x199 * x202;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x203 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x204 = x201 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x205 = x199 * x204;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x205 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x206 = x201 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x207 = x202 * x206;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x207 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x208 = x200 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x209 = (x208 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x210 = x93 - x209;
      if (x210 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x198);
          reg = x198;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x211 = x200 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x211);
          reg = x211;
        }
      }
      if (x209 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x212 = x198 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x212);
          reg = x212;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x213 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x213 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x214 = x213 - x198;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x215 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x215 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x216 = x215 - x200;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x217 = x214 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x218 = x214 * x217;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x218 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x219 = x216 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x220 = x214 * x219;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x220 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x221 = x216 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x222 = x217 * x221;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x222 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    if (x97 != 0) {
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][50 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][51 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
    // loc("cirgen/components/bytes.cpp":123:16)
    auto x223 = x93 - x97;
    if (x223 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x224 = x215 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x225 = (x224 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x226 = x93 - x225;
        if (x226 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x213);
            reg = x213;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x227 = x215 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x227);
            reg = x227;
          }
        }
        if (x225 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x228 = x213 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x228);
            reg = x228;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x229 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x229 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x230 = x229 - x213;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x231 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x231 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x232 = x231 - x215;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x233 = x230 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x234 = x230 * x233;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x234 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x235 = x232 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x236 = x230 * x235;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x236 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x237 = x232 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x238 = x233 * x237;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x238 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x239 = x231 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x240 = (x239 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x241 = x93 - x240;
        if (x241 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x229);
            reg = x229;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x242 = x231 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x242);
            reg = x242;
          }
        }
        if (x240 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x243 = x229 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x243);
            reg = x243;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x244 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x244 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x245 = x244 - x229;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x246 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x246 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x247 = x246 - x231;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x248 = x245 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x249 = x245 * x248;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x249 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x250 = x247 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x251 = x245 * x250;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x251 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x252 = x247 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x253 = x248 * x252;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x253 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x254 = x246 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x255 = (x254 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x256 = x93 - x255;
        if (x256 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x244);
            reg = x244;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x257 = x246 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x257);
            reg = x257;
          }
        }
        if (x255 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x258 = x244 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x258);
            reg = x258;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x259 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x259 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x260 = x259 - x244;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x261 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x261 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x262 = x261 - x246;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x263 = x260 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x264 = x260 * x263;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x264 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x265 = x262 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x266 = x260 * x265;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x266 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x267 = x262 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x268 = x263 * x267;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x268 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x269 = x261 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x270 = (x269 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x271 = x93 - x270;
        if (x271 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x259);
            reg = x259;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x272 = x261 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x272);
            reg = x272;
          }
        }
        if (x270 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x273 = x259 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x273);
            reg = x273;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x274 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x274 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x275 = x274 - x259;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x276 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x276 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x277 = x276 - x261;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x278 = x275 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x279 = x275 * x278;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x279 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x280 = x277 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x281 = x275 * x280;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x281 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x282 = x277 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x283 = x278 * x282;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x283 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x284 = x276 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x285 = (x284 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x286 = x93 - x285;
        if (x286 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x274);
            reg = x274;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x287 = x276 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x287);
            reg = x287;
          }
        }
        if (x285 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x288 = x274 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x288);
            reg = x288;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x289 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x289 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x290 = x289 - x274;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x291 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x291 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x292 = x291 - x276;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x293 = x290 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x294 = x290 * x293;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x294 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x295 = x292 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x296 = x290 * x295;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x296 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x297 = x292 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x298 = x293 * x297;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x298 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x299 = x291 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x300 = (x299 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x301 = x93 - x300;
        if (x301 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x289);
            reg = x289;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x302 = x291 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x302);
            reg = x302;
          }
        }
        if (x300 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x303 = x289 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x303);
            reg = x303;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x304 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x304 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x305 = x304 - x289;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x306 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x306 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x307 = x306 - x291;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x308 = x305 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x309 = x305 * x308;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x309 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x310 = x307 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x311 = x305 * x310;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x311 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x312 = x307 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x313 = x308 * x312;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x313 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x314 = x306 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x315 = (x314 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x316 = x93 - x315;
        if (x316 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x304);
            reg = x304;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x317 = x306 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x317);
            reg = x317;
          }
        }
        if (x315 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x318 = x304 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x318);
            reg = x318;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x319 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x319 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x320 = x319 - x304;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x321 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x321 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x322 = x321 - x306;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x323 = x320 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x324 = x320 * x323;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x324 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x325 = x322 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x326 = x320 * x325;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x326 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x327 = x322 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x328 = x323 * x327;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x328 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x329 = x321 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x330 = (x329 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x331 = x93 - x330;
        if (x331 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x319);
            reg = x319;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x332 = x321 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x332);
            reg = x332;
          }
        }
        if (x330 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x333 = x319 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x333);
            reg = x333;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x334 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x334 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x335 = x334 - x319;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x336 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x336 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x337 = x336 - x321;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x338 = x335 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x339 = x335 * x338;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x339 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x340 = x337 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x341 = x335 * x340;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x341 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x342 = x337 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x343 = x338 * x342;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x343 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x344 = x336 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x345 = (x344 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x346 = x93 - x345;
        if (x346 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x334);
            reg = x334;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x347 = x336 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x347);
            reg = x347;
          }
        }
        if (x345 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x348 = x334 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x348);
            reg = x348;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x349 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x349 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x350 = x349 - x334;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x351 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x351 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x352 = x351 - x336;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x353 = x350 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x354 = x350 * x353;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x354 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x355 = x352 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x356 = x350 * x355;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x356 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x357 = x352 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x358 = x353 * x357;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x358 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x359 = x351 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x360 = (x359 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x361 = x93 - x360;
        if (x361 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x349);
            reg = x349;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x362 = x351 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x362);
            reg = x362;
          }
        }
        if (x360 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x363 = x349 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x363);
            reg = x363;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x364 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x364 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x365 = x364 - x349;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x366 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x366 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x367 = x366 - x351;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x368 = x365 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x369 = x365 * x368;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x369 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x370 = x367 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x371 = x365 * x370;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x371 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x372 = x367 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x373 = x368 * x372;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x373 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x374 = x366 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x375 = (x374 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x376 = x93 - x375;
        if (x376 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x364);
            reg = x364;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x377 = x366 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x377);
            reg = x377;
          }
        }
        if (x375 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x378 = x364 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x378);
            reg = x378;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x379 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x379 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x380 = x379 - x364;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x381 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x381 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x382 = x381 - x366;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x383 = x380 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x384 = x380 * x383;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x384 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x385 = x382 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x386 = x380 * x385;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x386 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x387 = x382 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x388 = x383 * x387;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x388 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x389 = x381 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x390 = (x389 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x391 = x93 - x390;
        if (x391 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x379);
            reg = x379;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x392 = x381 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x392);
            reg = x392;
          }
        }
        if (x390 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x393 = x379 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x393);
            reg = x393;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x394 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x394 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x395 = x394 - x379;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x396 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x396 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x397 = x396 - x381;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x398 = x395 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x399 = x395 * x398;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x399 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x400 = x397 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x401 = x395 * x400;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x401 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x402 = x397 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x403 = x398 * x402;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x403 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x404 = x396 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x405 = (x404 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x406 = x93 - x405;
        if (x406 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x394);
            reg = x394;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x407 = x396 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x407);
            reg = x407;
          }
        }
        if (x405 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x408 = x394 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x408);
            reg = x408;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x409 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x409 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x410 = x409 - x394;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x411 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x411 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x412 = x411 - x396;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x413 = x410 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x414 = x410 * x413;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x414 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x415 = x412 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x416 = x410 * x415;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x416 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x417 = x412 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x418 = x413 * x417;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x418 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
  }
  // loc("Top/Code/OneHot/hot[2](Reg)"("./cirgen/components/mux.h":39:25))
  auto x419 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x419 != Fp::invalid());
  if (x419 != 0) {
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x420 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x420 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x421 = Fp(x420.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x421);
        reg = x421;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x422 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x422 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x423 = x420 - x422;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x424 = x423 * x87;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][23 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x424);
      reg = x424;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x425 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x425 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x426 = Fp(x425.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x426);
        reg = x426;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x427 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x427 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x428 = x425 - x427;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x429 = x428 * x87;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x429);
      reg = x429;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x430 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x430 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x431 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x431 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x432 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x432 != Fp::invalid());
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x433 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x422);
      reg = x422;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x430);
      reg = x430;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x427);
      reg = x427;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x431);
      reg = x431;
    }
    {
      host_args.at(0) = x433;
      host_args.at(1) = x422;
      host_args.at(2) = x430;
      host_args.at(3) = x427;
      host_args.at(4) = x431;
      host_args.at(5) = x92;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x434 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x435 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x435 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x436 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x437 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x437 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    // loc("cirgen/components/ram.cpp":131:3)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("cirgen/components/ram.cpp":132:3)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x437);
      reg = x437;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x438 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x438 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x439 = Fp(x438.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x439);
        reg = x439;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x440 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x441 = x438 - x440;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x442 = x441 * x87;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][27 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x442);
      reg = x442;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x443 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x443 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x444 = Fp(x443.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x444);
        reg = x444;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x445 = args[2][28 * steps + ((cycle - 0) & mask)];
    assert(x445 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x446 = x443 - x445;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x447 = x446 * x87;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][29 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x447);
      reg = x447;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x448 = args[2][27 * steps + ((cycle - 0) & mask)];
    assert(x448 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x449 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x449 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":37:44)
    auto x450 = x433 + x93;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x448);
      reg = x448;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x445);
      reg = x445;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x449);
      reg = x449;
    }
    {
      host_args.at(0) = x450;
      host_args.at(1) = x440;
      host_args.at(2) = x448;
      host_args.at(3) = x445;
      host_args.at(4) = x449;
      host_args.at(5) = x92;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x451 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x451 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x452 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x452 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x453 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x453 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x454 = args[2][121 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    {
      auto& reg = args[2][115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x450);
      reg = x450;
    }
    // loc("cirgen/components/ram.cpp":131:3)
    {
      auto& reg = args[2][116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("cirgen/components/ram.cpp":132:3)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x451);
      reg = x451;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x452);
      reg = x452;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x453);
      reg = x453;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x455 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x455 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x456 = Fp(x455.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x456);
        reg = x456;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x457 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x458 = x455 - x457;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x459 = x458 * x87;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][31 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x459);
      reg = x459;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x460 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x460 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x461 = Fp(x460.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x461);
        reg = x461;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x462 = args[2][32 * steps + ((cycle - 0) & mask)];
    assert(x462 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x463 = x460 - x462;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x464 = x463 * x87;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][33 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x464);
      reg = x464;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x465 = args[2][31 * steps + ((cycle - 0) & mask)];
    assert(x465 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x466 = args[2][33 * steps + ((cycle - 0) & mask)];
    assert(x466 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":37:44)
    auto x467 = x433 + x90;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x457);
      reg = x457;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x465);
      reg = x465;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x462);
      reg = x462;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x466);
      reg = x466;
    }
    {
      host_args.at(0) = x467;
      host_args.at(1) = x457;
      host_args.at(2) = x465;
      host_args.at(3) = x462;
      host_args.at(4) = x466;
      host_args.at(5) = x92;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x468 = args[2][125 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x469 = args[2][126 * steps + ((cycle - 0) & mask)];
    assert(x469 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x470 = args[2][127 * steps + ((cycle - 0) & mask)];
    assert(x470 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x471 = args[2][128 * steps + ((cycle - 0) & mask)];
    assert(x471 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    {
      auto& reg = args[2][122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x467);
      reg = x467;
    }
    // loc("cirgen/components/ram.cpp":131:3)
    {
      auto& reg = args[2][123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("cirgen/components/ram.cpp":132:3)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x469);
      reg = x469;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x470);
      reg = x470;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x471);
      reg = x471;
    }
  }
  // loc("Top/Code/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":39:25))
  auto x472 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x472 != Fp::invalid());
  if (x472 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x473 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x473 != Fp::invalid());
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x474 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x474 != Fp::invalid());
    if (x474 != 0) {
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x475 = args[1][4];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x476 = args[1][5];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x477 = args[1][6];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x478 = args[1][7];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x475);
        reg = x475;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x476);
        reg = x476;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x477);
        reg = x477;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x478);
        reg = x478;
      }
      {
        host_args.at(0) = x86;
        host_args.at(1) = x475;
        host_args.at(2) = x476;
        host_args.at(3) = x477;
        host_args.at(4) = x478;
        host_args.at(5) = x92;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x479 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x479 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x480 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x480 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x481 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x481 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x482 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x482 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x473);
        reg = x473;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x479);
        reg = x479;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x480);
        reg = x480;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x481);
        reg = x481;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x483 = args[1][8];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x484 = args[1][9];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x485 = args[1][10];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x486 = args[1][11];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x483);
        reg = x483;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x484);
        reg = x484;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x485);
        reg = x485;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x486);
        reg = x486;
      }
      {
        host_args.at(0) = x85;
        host_args.at(1) = x483;
        host_args.at(2) = x484;
        host_args.at(3) = x485;
        host_args.at(4) = x486;
        host_args.at(5) = x92;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x487 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x487 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x488 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x488 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x489 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x489 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x490 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x490 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x85);
        reg = x85;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x473);
        reg = x473;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x487);
        reg = x487;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x488);
        reg = x488;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x489);
        reg = x489;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x490);
        reg = x490;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x491 = args[1][12];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x492 = args[1][13];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x493 = args[1][14];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x494 = args[1][15];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x491);
        reg = x491;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x492);
        reg = x492;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x493);
        reg = x493;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x494);
        reg = x494;
      }
      {
        host_args.at(0) = x84;
        host_args.at(1) = x491;
        host_args.at(2) = x492;
        host_args.at(3) = x493;
        host_args.at(4) = x494;
        host_args.at(5) = x92;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x495 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x495 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x496 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x496 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x497 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x497 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x498 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x498 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x84);
        reg = x84;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x473);
        reg = x473;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x495);
        reg = x495;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x496);
        reg = x496;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x497);
        reg = x497;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x498);
        reg = x498;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x499 = args[1][16];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x500 = args[1][17];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x501 = args[1][18];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x502 = args[1][19];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x499);
        reg = x499;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x500);
        reg = x500;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x501);
        reg = x501;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x502);
        reg = x502;
      }
      {
        host_args.at(0) = x83;
        host_args.at(1) = x499;
        host_args.at(2) = x500;
        host_args.at(3) = x501;
        host_args.at(4) = x502;
        host_args.at(5) = x92;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x503 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x503 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x504 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x504 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x505 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x505 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x506 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x506 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x83);
        reg = x83;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x473);
        reg = x473;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x503);
        reg = x503;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x504);
        reg = x504;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x505);
        reg = x505;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x506);
        reg = x506;
      }
    }
    // loc("cirgen/circuit/rv32im/body.cpp":50:15)
    auto x507 = x93 - x474;
    if (x507 != 0) {
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x508 = args[1][20];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x509 = args[1][21];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x510 = args[1][22];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x511 = args[1][23];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x508);
        reg = x508;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x509);
        reg = x509;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x510);
        reg = x510;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x511);
        reg = x511;
      }
      {
        host_args.at(0) = x82;
        host_args.at(1) = x508;
        host_args.at(2) = x509;
        host_args.at(3) = x510;
        host_args.at(4) = x511;
        host_args.at(5) = x92;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x512 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x512 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x513 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x513 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x514 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x514 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x515 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x515 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x82);
        reg = x82;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x473);
        reg = x473;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x512);
        reg = x512;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x513);
        reg = x513;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x514);
        reg = x514;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x515);
        reg = x515;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x516 = args[1][24];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x517 = args[1][25];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x518 = args[1][26];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x519 = args[1][27];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x516);
        reg = x516;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x517);
        reg = x517;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x518);
        reg = x518;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x519);
        reg = x519;
      }
      {
        host_args.at(0) = x81;
        host_args.at(1) = x516;
        host_args.at(2) = x517;
        host_args.at(3) = x518;
        host_args.at(4) = x519;
        host_args.at(5) = x92;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x520 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x520 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x521 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x521 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x522 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x522 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x523 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x523 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x81);
        reg = x81;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x473);
        reg = x473;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x520);
        reg = x520;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x521);
        reg = x521;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x522);
        reg = x522;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x523);
        reg = x523;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x524 = args[1][28];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x525 = args[1][29];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x526 = args[1][30];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x527 = args[1][31];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x524);
        reg = x524;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x525);
        reg = x525;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x526);
        reg = x526;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x527);
        reg = x527;
      }
      {
        host_args.at(0) = x80;
        host_args.at(1) = x524;
        host_args.at(2) = x525;
        host_args.at(3) = x526;
        host_args.at(4) = x527;
        host_args.at(5) = x92;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x528 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x528 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x529 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x529 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x530 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x530 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x531 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x531 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x80);
        reg = x80;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x473);
        reg = x473;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x528);
        reg = x528;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x529);
        reg = x529;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x530);
        reg = x530;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x531);
        reg = x531;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x532 = args[1][32];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x533 = args[1][33];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x534 = args[1][34];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x535 = args[1][35];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x532);
        reg = x532;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x533);
        reg = x533;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x534);
        reg = x534;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x535);
        reg = x535;
      }
      {
        host_args.at(0) = x79;
        host_args.at(1) = x532;
        host_args.at(2) = x533;
        host_args.at(3) = x534;
        host_args.at(4) = x535;
        host_args.at(5) = x92;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x536 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x536 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x537 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x537 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x538 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x538 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x539 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x539 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x79);
        reg = x79;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x473);
        reg = x473;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x536);
        reg = x536;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x537);
        reg = x537;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x538);
        reg = x538;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x539);
        reg = x539;
      }
    }
    // loc("cirgen/circuit/rv32im/body.cpp":56:3)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x78);
      reg = x78;
    }
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x540 = args[1][0];
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x541 = args[1][1];
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x542 = args[1][2];
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x543 = args[1][3];
    // loc("./cirgen/components/u32.h":25:12)
    auto x544 = x541 * x88;
    // loc("./cirgen/components/u32.h":24:12)
    auto x545 = x540 + x544;
    // loc("./cirgen/components/u32.h":26:12)
    auto x546 = x542 * x77;
    // loc("./cirgen/components/u32.h":24:12)
    auto x547 = x545 + x546;
    // loc("./cirgen/components/u32.h":27:12)
    auto x548 = x543 * x76;
    // loc("./cirgen/components/u32.h":24:12)
    auto x549 = x547 + x548;
    // loc("cirgen/circuit/rv32im/body.cpp":14:23)
    auto x550 = x549 + x75;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x551 = Fp(x550.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x551);
        reg = x551;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x552 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x552 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x553 = x550 - x552;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x554 = x553 * x87;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x555 = Fp(x554.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x555);
        reg = x555;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x556 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x556 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x557 = x554 - x556;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x558 = x557 * x87;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x559 = Fp(x558.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x559);
        reg = x559;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x560 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x560 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x561 = x558 - x560;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x562 = x561 * x87;
    {
      // loc("cirgen/circuit/rv32im/body.cpp":17:26)
      auto x563 = Fp(x562.asUInt32() & x74.asUInt32());
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x563);
        reg = x563;
      }
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x564 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x564 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":18:18)
    auto x565 = x562 - x564;
    // loc("cirgen/circuit/rv32im/body.cpp":18:17)
    auto x566 = x565 * x73;
    // loc("./cirgen/components/bits.h":61:23)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x566);
      reg = x566;
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x567 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x567 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":22:23)
    auto x568 = x93 - x567;
    // loc("cirgen/circuit/rv32im/body.cpp":22:15)
    auto x569 = x567 * x568;
    // loc("cirgen/circuit/rv32im/body.cpp":22:3)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x569);
      reg = x569;
    }
    // loc("Top/Mux/3/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x570 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x570 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":23:17)
    auto x571 = x90 - x567;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    auto x572 = x570 * x571;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    if (x572 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x573 = x556 * x88;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x574 = x552 + x573;
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x575 = x560 * x77;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x576 = x574 + x575;
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x577 = x564 * x76;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x578 = x576 + x577;
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x579 = x567 * x72;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x580 = x578 + x579;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x581 = x580 - x75;
    host_args.at(0) = x473;
    host_args.at(1) = x581;
    host(ctx, "log", "%u: Reset: PC = 0x%x", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":39:25))
  auto x582 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x582 != Fp::invalid());
  if (x582 != 0) {
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x583 = args[2][10 * steps + ((cycle - 1) & mask)];
    assert(x583 != Fp::invalid());
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x584 = args[2][11 * steps + ((cycle - 1) & mask)];
    assert(x584 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x585 = x584 * x88;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x586 = x583 + x585;
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x587 = args[2][12 * steps + ((cycle - 1) & mask)];
    assert(x587 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x588 = x587 * x77;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x589 = x586 + x588;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x590 = args[2][72 * steps + ((cycle - 1) & mask)];
    assert(x590 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x591 = x590 * x76;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x592 = x589 + x591;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x593 = args[2][73 * steps + ((cycle - 1) & mask)];
    assert(x593 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x594 = x593 * x72;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x595 = x592 + x594;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x596 = x595 - x75;
    {
      // loc("Top/Mux/4/Reg"("cirgen/circuit/rv32im/body.cpp":68:45))
      auto x597 = args[2][93 * steps + ((cycle - 1) & mask)];
      assert(x597 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":69:24)
      auto x598 = x597 - x78;
      // loc("cirgen/circuit/rv32im/body.cpp":69:24)
      auto x599 = (x598 == 0) ? Fp(1) : Fp(0);
      if (x599 != 0) {
        // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x600 = args[0][0 * steps + ((cycle - 0) & mask)];
        assert(x600 != Fp::invalid());
        host_args.at(0) = x600;
        host_args.at(1) = x596;
        host(ctx, "log", "%u: BODY pc: 0x%x", host_args.data(), 2, host_outs.data(), 0);
        host_args.at(0) = x596;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x596;
        host(ctx, "getMajor", "", host_args.data(), 1, host_outs.data(), 1);
        auto x601 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x602 = (x601 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x602);
            reg = x602;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x603 = x601 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x604 = (x603 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x604);
            reg = x604;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x605 = x601 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x606 = (x605 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x606);
            reg = x606;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x607 = x601 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x608 = (x607 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x608);
            reg = x608;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x609 = x601 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x610 = (x609 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x610);
            reg = x610;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x611 = x601 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x612 = (x611 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x612);
            reg = x612;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x613 = x601 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x614 = (x613 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x614);
            reg = x614;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x615 = x601 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x616 = (x615 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x616);
            reg = x616;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x617 = x601 - x68;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x618 = (x617 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x618);
            reg = x618;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x619 = x601 - x67;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x620 = (x619 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x620);
            reg = x620;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x621 = x601 - x66;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x622 = (x621 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x622);
            reg = x622;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x623 = x601 - x65;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x624 = (x623 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x624);
            reg = x624;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x625 = x601 - x64;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x626 = (x625 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x626);
            reg = x626;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x627 = x601 - x63;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x628 = (x627 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x628);
            reg = x628;
          }
        }
        // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x629 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x629 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x630 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x630 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x631 = x630 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x632 = x629 + x631;
        // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x633 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x633 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x634 = x633 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x635 = x632 + x634;
        // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x636 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x636 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x637 = x636 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x638 = x635 + x637;
        // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x639 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x639 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x640 = x639 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x641 = x638 + x640;
        // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x642 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x642 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x643 = x642 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x644 = x641 + x643;
        // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x645 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x645 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x646 = x645 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x647 = x644 + x646;
        // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x648 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x648 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x649 = x648 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x650 = x647 + x649;
        // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x651 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x651 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x652 = x651 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x653 = x650 + x652;
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x654 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x654 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x655 = x654 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x656 = x653 + x655;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x657 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x657 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x658 = x657 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x659 = x656 + x658;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x660 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x660 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x661 = x660 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x662 = x659 + x661;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x663 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x663 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x664 = x663 * x63;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x665 = x662 + x664;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x666 = x665 - x601;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x666 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":76:20)
      auto x667 = x93 - x599;
      if (x667 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":77:48)
        auto x668 = x597 - x68;
        // loc("cirgen/circuit/rv32im/body.cpp":77:48)
        auto x669 = (x668 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":77:48)
        auto x670 = x93 - x669;
        if (x670 != 0) {
          // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x671 = args[0][0 * steps + ((cycle - 0) & mask)];
          assert(x671 != Fp::invalid());
          host_args.at(0) = x671;
          host_args.at(1) = x596;
          host_args.at(2) = x597;
          host(ctx, "log", "%u: BODY pc: 0x%x, major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x672 = (x597 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x672);
            reg = x672;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x673 = x597 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x674 = (x673 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x674);
            reg = x674;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x675 = x597 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x676 = (x675 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x676);
            reg = x676;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x677 = x597 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x678 = (x677 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x678);
            reg = x678;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x679 = x597 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x680 = (x679 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x680);
            reg = x680;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x681 = x597 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x682 = (x681 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x682);
            reg = x682;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x683 = x597 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x684 = (x683 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x684);
            reg = x684;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x685 = x597 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x686 = (x685 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x686);
            reg = x686;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x669);
            reg = x669;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x687 = x597 - x67;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x688 = (x687 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x688);
            reg = x688;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x689 = x597 - x66;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x690 = (x689 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x690);
            reg = x690;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x691 = x597 - x65;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x692 = (x691 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x692);
            reg = x692;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x693 = x597 - x64;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x694 = (x693 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x694);
            reg = x694;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x695 = x597 - x63;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x696 = (x695 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x696);
            reg = x696;
          }
        }
        // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x697 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x697 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x698 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x698 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x699 = x698 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x700 = x697 + x699;
        // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x701 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x701 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x702 = x701 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x703 = x700 + x702;
        // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x704 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x704 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x705 = x704 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x706 = x703 + x705;
        // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x707 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x707 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x708 = x707 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x709 = x706 + x708;
        // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x710 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x710 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x711 = x710 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x712 = x709 + x711;
        // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x713 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x713 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x714 = x713 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x715 = x712 + x714;
        // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x716 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x716 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x717 = x716 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x718 = x715 + x717;
        // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x719 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x719 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x720 = x719 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x721 = x718 + x720;
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x722 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x722 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x723 = x722 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x724 = x721 + x723;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x725 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x725 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x726 = x725 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x727 = x724 + x726;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x728 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x728 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x729 = x728 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x730 = x727 + x729;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x731 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x731 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x732 = x731 * x63;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x733 = x730 + x732;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x734 = x733 - x597;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x734 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":39:25))
    auto x735 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x735 != Fp::invalid());
    if (x735 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x736 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x736 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x737 = x596 * x73;
      {
        host_args.at(0) = x737;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x738 = host_outs.at(0);
        auto x739 = host_outs.at(1);
        auto x740 = host_outs.at(2);
        auto x741 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x738);
          reg = x738;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x739);
          reg = x739;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x741);
          reg = x741;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x742 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x743 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x744 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x745 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x745 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x737);
        reg = x737;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x736);
        reg = x736;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x742);
        reg = x742;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x743);
        reg = x743;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x744);
        reg = x744;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x745);
        reg = x745;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x746 = Fp(x745.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x747 = x746 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x747);
          reg = x747;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x748 = Fp(x745.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x749 = x748 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x749);
          reg = x749;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x750 = Fp(x745.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x751 = x750 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x751);
          reg = x751;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x752 = Fp(x745.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x753 = x752 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x753);
          reg = x753;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x754 = Fp(x745.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x755 = x754 * x54;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x755);
          reg = x755;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x756 = Fp(x745.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x756);
          reg = x756;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x757 = Fp(x744.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x758 = x757 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x758);
          reg = x758;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x759 = Fp(x744.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x760 = x759 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x760);
          reg = x760;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x761 = Fp(x744.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x762 = x761 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x762);
          reg = x762;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x763 = Fp(x744.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x764 = x763 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x764);
          reg = x764;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x765 = Fp(x744.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x765);
          reg = x765;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x766 = Fp(x743.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x767 = x766 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x767);
          reg = x767;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x768 = Fp(x743.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x769 = x768 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x769);
          reg = x769;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x770 = Fp(x743.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x771 = x770 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x771);
          reg = x771;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x772 = Fp(x743.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x773 = x772 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x773);
          reg = x773;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x774 = Fp(x743.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x774);
          reg = x774;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x775 = Fp(x742.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x776 = x775 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x776);
          reg = x776;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x777 = Fp(x742.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x777);
          reg = x777;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x778 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x778 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x779 = x778 * x53;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x780 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x780 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x781 = x780 * x57;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x782 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x782 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x783 = x782 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x784 = x781 + x783;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x785 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x785 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x786 = x785 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x787 = x784 + x786;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x788 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x788 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x789 = x787 + x788;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x790 = x779 + x789;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x791 = x790 * x90;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x792 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x792 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x793 = x791 + x792;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x794 = x745 - x793;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x794 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x795 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x795 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x796 = x795 * x68;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x797 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x797 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x798 = x797 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x799 = x796 + x798;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x800 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x800 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x801 = x799 + x800;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x802 = x801 * x57;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x803 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x803 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x804 = x803 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x805 = x802 + x804;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x806 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x806 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x807 = x805 + x806;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x808 = x744 - x807;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x808 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x809 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x809 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x810 = x809 * x62;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x811 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x811 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x812 = x811 * x75;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x813 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x813 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x814 = x812 + x813;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x815 = x814 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x816 = x810 + x815;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x817 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x817 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x818 = x817 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x819 = x816 + x818;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x820 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x820 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x821 = x819 + x820;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x822 = x743 - x821;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x822 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x823 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x823 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x824 = x823 * x62;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x825 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x825 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x826 = x824 + x825;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x827 = x742 - x826;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x827 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x742;
        host_args.at(1) = x743;
        host_args.at(2) = x744;
        host_args.at(3) = x745;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x828 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x829 = (x828 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x829);
            reg = x829;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x830 = x828 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x831 = (x830 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x831);
            reg = x831;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x832 = x828 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x833 = (x832 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x833);
            reg = x833;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x834 = x828 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x835 = (x834 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x835);
            reg = x835;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x836 = x828 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x837 = (x836 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x837);
            reg = x837;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x838 = x828 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x839 = (x838 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x839);
            reg = x839;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x840 = x828 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x841 = (x840 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x841);
            reg = x841;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x842 = x828 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x843 = (x842 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x843);
            reg = x843;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x844 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x844 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x845 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x845 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x846 = x845 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x847 = x844 + x846;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x848 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x848 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x849 = x848 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x850 = x847 + x849;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x851 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x851 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x852 = x851 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x853 = x850 + x852;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x854 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x854 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x855 = x854 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x856 = x853 + x855;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x857 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x857 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x858 = x857 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x859 = x856 + x858;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x860 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x860 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x861 = x860 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x862 = x859 + x861;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x863 = x862 - x828;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x863 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x864 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x864 != Fp::invalid());
        if (x864 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
        auto x865 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x865 != Fp::invalid());
        if (x865 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x866 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x866 != Fp::invalid());
        if (x866 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x867 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x867 != Fp::invalid());
        if (x867 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
        auto x868 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x868 != Fp::invalid());
        if (x868 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x869 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x869 != Fp::invalid());
        if (x869 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x870 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x870 != Fp::invalid());
        if (x870 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
        auto x871 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x871 != Fp::invalid());
        if (x871 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x872 = x785 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x873 = x788 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x874 = x872 + x873;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x875 = x792 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x876 = x875 + x801;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x877 = x874 + x876;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x878 = x778 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x879 = x780 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x880 = x878 + x879;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x881 = x880 + x782;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x882 = x778 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x877);
            reg = x877;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x881);
            reg = x881;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x882);
            reg = x882;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x882);
            reg = x882;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x883 = x803 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x884 = x806 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x885 = x883 + x884;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x886 = x885 + x809;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x887 = x886 + x46;
      {
        host_args.at(0) = x887;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x888 = host_outs.at(0);
        auto x889 = host_outs.at(1);
        auto x890 = host_outs.at(2);
        auto x891 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x888);
          reg = x888;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x889);
          reg = x889;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x890);
          reg = x890;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x891);
          reg = x891;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x892 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x893 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x893 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x894 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x895 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x895 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x887);
        reg = x887;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x736);
        reg = x736;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x892);
        reg = x892;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x893);
        reg = x893;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x894);
        reg = x894;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x895);
        reg = x895;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x896 = x792 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x897 = x896 + x801;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x898 = x897 + x46;
      {
        host_args.at(0) = x898;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x899 = host_outs.at(0);
        auto x900 = host_outs.at(1);
        auto x901 = host_outs.at(2);
        auto x902 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x899);
          reg = x899;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x900);
          reg = x900;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x901);
          reg = x901;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x902);
          reg = x902;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x903 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x903 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x904 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x905 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x906 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x906 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x898);
        reg = x898;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x736);
        reg = x736;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x903);
        reg = x903;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x904);
        reg = x904;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x905);
        reg = x905;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x906);
        reg = x906;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x907 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x908 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x909 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x910 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x910 != Fp::invalid());
      host_args.at(0) = x907;
      host_args.at(1) = x908;
      host_args.at(2) = x909;
      host_args.at(3) = x910;
      host_args.at(4) = x886;
      host_args.at(5) = x892;
      host_args.at(6) = x893;
      host_args.at(7) = x894;
      host_args.at(8) = x895;
      host_args.at(9) = x897;
      host_args.at(10) = x903;
      host_args.at(11) = x904;
      host_args.at(12) = x905;
      host_args.at(13) = x906;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x911 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x911 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x912 = x93 - x911;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x913 = x912 * x892;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x914 = x912 * x893;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x915 = x912 * x894;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x916 = x912 * x895;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x917 = x593 * x75;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x918 = x590 + x917;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x919 = x583 - x75;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x920 = x911 * x919;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x921 = x911 * x584;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x922 = x911 * x587;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x923 = x911 * x918;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x924 = x913 + x920;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x925 = x914 + x921;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x926 = x915 + x922;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x927 = x916 + x923;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x928 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x928 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x929 = x93 - x928;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x930 = x929 * x903;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x931 = x929 * x904;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x932 = x929 * x905;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x933 = x929 * x906;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x934 = x928 * x907;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x935 = x928 * x908;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x936 = x928 * x909;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x937 = x928 * x910;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x938 = x930 + x934;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x939 = x931 + x935;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x940 = x932 + x936;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x941 = x933 + x937;
      host_args.at(0) = x924;
      host_args.at(1) = x925;
      host_args.at(2) = x926;
      host_args.at(3) = x927;
      host_args.at(4) = x938;
      host_args.at(5) = x939;
      host_args.at(6) = x940;
      host_args.at(7) = x941;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x942 = Fp(x927.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x943 = x942 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x943);
          reg = x943;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x944 = Fp(x927.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x945 = x944 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x946 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x946 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x947 = x946 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x948 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x948 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x949 = x948 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x950 = x947 + x949;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x951 = x927 - x950;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x951 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x952 = Fp(x941.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x953 = x952 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x953);
          reg = x953;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x954 = Fp(x941.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x955 = x954 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x955);
          reg = x955;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x956 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x956 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x957 = x956 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x958 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x958 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x959 = x958 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x960 = x957 + x959;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x961 = x941 - x960;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x961 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x938);
        reg = x938;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x939);
        reg = x939;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x940);
        reg = x940;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x941);
        reg = x941;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x962 = Fp(x924.asUInt32() & x938.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x963 = Fp(x925.asUInt32() & x939.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x964 = Fp(x926.asUInt32() & x940.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x965 = Fp(x927.asUInt32() & x941.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x962);
          reg = x962;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x963);
          reg = x963;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x964);
          reg = x964;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x965);
          reg = x965;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x966 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x966 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x967 = x966 * x924;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x968 = x966 * x925;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x969 = x966 * x926;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x970 = x966 * x927;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x971 = x967 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x972 = x968 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x973 = x969 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x974 = x970 + x89;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x975 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x975 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x976 = x975 * x938;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x977 = x975 * x939;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x978 = x975 * x940;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x979 = x975 * x941;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x980 = x971 + x976;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x981 = x972 + x977;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x982 = x973 + x978;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x983 = x974 + x979;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x984 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x984 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x985 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x985 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x986 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x987 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x988 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x988 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x989 = x984 * x985;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x990 = x984 * x986;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x991 = x984 * x987;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x992 = x984 * x988;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x993 = x980 + x989;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x994 = x981 + x990;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x995 = x982 + x991;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x996 = x983 + x992;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x997 = x994 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x998 = x993 + x997;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x999 = Fp(x998.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x999);
          reg = x999;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1000 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1000 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1001 = x998 - x1000;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1002 = x1001 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1003 = Fp(x1002.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1003);
          reg = x1003;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1004 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1004 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1005 = x1002 - x1004;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1006 = x1005 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1006);
        reg = x1006;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1007 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1007 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1008 = x1007 + x995;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1009 = x996 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1010 = x1008 + x1009;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1011 = Fp(x1010.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1011);
          reg = x1011;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1012 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1012 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1013 = x1010 - x1012;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1014 = x1013 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1015 = Fp(x1014.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1015);
          reg = x1015;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1016 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1016 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1017 = x1014 - x1016;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1018 = x1017 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1018);
        reg = x1018;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1019 = Fp(x1016.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1020 = x1019 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1020);
          reg = x1020;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1021 = Fp(x1016.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1022 = x1021 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1022);
          reg = x1022;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1023 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1023 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1024 = x1023 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1025 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1025 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1026 = x1025 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1027 = x1024 + x1026;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1028 = x1016 - x1027;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1028 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1029 = x93 - x956;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1030 = x946 * x1029;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1031 = x93 - x1023;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1032 = x1030 * x1031;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1033 = x93 - x946;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1034 = x1033 * x956;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1035 = x1034 * x1023;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1036 = x1032 + x1035;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1036);
        reg = x1036;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1037 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1037 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1038 = x1037 + x1023;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1039 = x1037 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1040 = x1039 * x1023;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1041 = x1038 - x1040;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1042 = x1004 * x88;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1043 = x1000 + x1042;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1044 = (x1043 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1044);
          reg = x1044;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1045 = inv(x1043);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1045);
          reg = x1045;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1046 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1046 != Fp::invalid());
      if (x1046 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1043 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1047 = x93 - x1046;
      if (x1047 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1048 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x1048 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1049 = x1043 * x1048;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1050 = x1049 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1050 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1051 = x1016 * x88;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1052 = x1012 + x1051;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1053 = x1047 * x77;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1054 = x1052 + x1053;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1055 = (x1054 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1055);
          reg = x1055;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1056 = inv(x1054);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1056);
          reg = x1056;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1057 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1057 != Fp::invalid());
      if (x1057 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1054 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1058 = x93 - x1057;
      if (x1058 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1059 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x1059 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1060 = x1054 * x1059;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1061 = x1060 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1061 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1062 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1062 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1063 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1063 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1064 = x93 - x1063;
      host_args.at(0) = x1000;
      host_args.at(1) = x1004;
      host_args.at(2) = x1012;
      host_args.at(3) = x1016;
      host_args.at(4) = x1057;
      host_args.at(5) = x1062;
      host_args.at(6) = x1064;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1065 = x817 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1066 = x820 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1067 = x1065 + x1066;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1068 = x1067 + x823;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1069 = (x1068 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1069);
          reg = x1069;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1070 = inv(x1068);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1070);
          reg = x1070;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1071 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1071 != Fp::invalid());
      if (x1071 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1068 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1072 = x93 - x1071;
      if (x1072 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1073 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x1073 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1074 = x1068 * x1073;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1075 = x1074 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1075 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1076 = x596 + x75;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1077 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1077 != Fp::invalid());
      if (x1077 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1078 = x825 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1078 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x814 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1079 = x1076 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1080 = Fp(x1079.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1080);
            reg = x1080;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1081 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1081 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1082 = x1079 - x1081;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1083 = x1082 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1084 = Fp(x1083.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1084);
            reg = x1084;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1085 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1085 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1086 = x1083 - x1085;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1087 = x1086 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1088 = Fp(x1087.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1088);
            reg = x1088;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1089 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1089 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1090 = x1087 - x1089;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1091 = x1090 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1092 = Fp(x1091.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1092);
            reg = x1092;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1093 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1093 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1094 = x1091 - x1093;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1095 = x1094 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1095);
          reg = x1095;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1096 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1096 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1097 = x93 - x1096;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1098 = x1096 * x1097;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1098);
          reg = x1098;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1099 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1099 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1100 = x90 - x1096;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1101 = x1099 * x1100;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1101 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1102 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1102 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1102);
          reg = x1102;
        }
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1103 = x1068 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1000);
            reg = x1000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1004);
            reg = x1004;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1012);
            reg = x1012;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1016);
            reg = x1016;
          }
          {
            host_args.at(0) = x1103;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1104 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1104 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1105 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1105 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1106 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1106 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1107 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1107 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1103);
            reg = x1103;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1104);
            reg = x1104;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1105);
            reg = x1105;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1106);
            reg = x1106;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1107);
            reg = x1107;
          }
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
      auto x1108 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1108 != Fp::invalid());
      if (x1108 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1109 = x825 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1109 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x814 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1110 = x790 - x59;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1110 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1111 = x1076 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1112 = Fp(x1111.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1112);
            reg = x1112;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1113 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1113 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1114 = x1111 - x1113;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1115 = x1114 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1116 = Fp(x1115.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1116);
            reg = x1116;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1117 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1117 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1118 = x1115 - x1117;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1119 = x1118 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1120 = Fp(x1119.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1120);
            reg = x1120;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1121 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1121 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1122 = x1119 - x1121;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1123 = x1122 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1124 = Fp(x1123.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1124);
            reg = x1124;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1125 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1125 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1126 = x1123 - x1125;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1127 = x1126 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1127);
          reg = x1127;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1128 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1128 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1129 = x93 - x1128;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1130 = x1128 * x1129;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1130);
          reg = x1130;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1131 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1131 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1132 = x90 - x1128;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1133 = x1131 * x1132;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1133 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1134 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1134 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1134);
          reg = x1134;
        }
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
          auto x1135 = x1068 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1000);
            reg = x1000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1004);
            reg = x1004;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1012);
            reg = x1012;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1016);
            reg = x1016;
          }
          {
            host_args.at(0) = x1135;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1136 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1136 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1137 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1137 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1138 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1138 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1139 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1139 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1135);
            reg = x1135;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1136);
            reg = x1136;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1137);
            reg = x1137;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1138);
            reg = x1138;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1139);
            reg = x1139;
          }
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1140 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1140 != Fp::invalid());
      if (x1140 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1141 = x825 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1141 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1142 = x814 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1142 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1143 = x1076 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1144 = Fp(x1143.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1144);
            reg = x1144;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1145 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1145 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1146 = x1143 - x1145;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1147 = x1146 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1148 = Fp(x1147.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1148);
            reg = x1148;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1149 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1149 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1150 = x1147 - x1149;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1151 = x1150 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1152 = Fp(x1151.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1152);
            reg = x1152;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1153 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1153 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1154 = x1151 - x1153;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1155 = x1154 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1156 = Fp(x1155.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1156);
            reg = x1156;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1157 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1157 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1158 = x1155 - x1157;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1159 = x1158 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1159);
          reg = x1159;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1160 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1160 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1161 = x93 - x1160;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1162 = x1160 * x1161;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1162);
          reg = x1162;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1163 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1163 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1164 = x90 - x1160;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1165 = x1163 * x1164;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1165 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1166 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1166 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1166);
          reg = x1166;
        }
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1167 = x1068 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1000);
            reg = x1000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1004);
            reg = x1004;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1012);
            reg = x1012;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1016);
            reg = x1016;
          }
          {
            host_args.at(0) = x1167;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1168 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1168 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1169 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1169 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1170 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1170 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1171 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1171 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1167);
            reg = x1167;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1168);
            reg = x1168;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1169);
            reg = x1169;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1170);
            reg = x1170;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1171);
            reg = x1171;
          }
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1172 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1172 != Fp::invalid());
      if (x1172 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1173 = x825 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1173 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1174 = x814 - x70;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1174 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1175 = x1076 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1176 = Fp(x1175.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1176);
            reg = x1176;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1177 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1177 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1178 = x1175 - x1177;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1179 = x1178 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1180 = Fp(x1179.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1180);
            reg = x1180;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1181 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1181 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1182 = x1179 - x1181;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1183 = x1182 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1184 = Fp(x1183.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1184);
            reg = x1184;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1185 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1185 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1186 = x1183 - x1185;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1187 = x1186 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1188 = Fp(x1187.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1188);
            reg = x1188;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1189 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1189 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1190 = x1187 - x1189;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1191 = x1190 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1191);
          reg = x1191;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1192 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1192 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1193 = x93 - x1192;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1194 = x1192 * x1193;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1194);
          reg = x1194;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1195 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1195 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1196 = x90 - x1192;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1197 = x1195 * x1196;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1197 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1198 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1198 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1198);
          reg = x1198;
        }
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1199 = x1068 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1000);
            reg = x1000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1004);
            reg = x1004;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1012);
            reg = x1012;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1016);
            reg = x1016;
          }
          {
            host_args.at(0) = x1199;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1200 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1200 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1201 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1201 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1202 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1202 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1203 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1203 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1199);
            reg = x1199;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1200);
            reg = x1200;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1201);
            reg = x1201;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1202);
            reg = x1202;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1203);
            reg = x1203;
          }
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
      auto x1204 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1204 != Fp::invalid());
      if (x1204 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1205 = x825 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1205 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1206 = x814 - x69;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1206 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1207 = x1076 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1208 = Fp(x1207.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1208);
            reg = x1208;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1209 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1209 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1210 = x1207 - x1209;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1211 = x1210 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1212 = Fp(x1211.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1212);
            reg = x1212;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1213 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1213 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1214 = x1211 - x1213;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1215 = x1214 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1216 = Fp(x1215.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1216);
            reg = x1216;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1217 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1217 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1218 = x1215 - x1217;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1219 = x1218 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1220 = Fp(x1219.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1220);
            reg = x1220;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1221 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1221 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1222 = x1219 - x1221;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1223 = x1222 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1223);
          reg = x1223;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1224 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1224 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1225 = x93 - x1224;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1226 = x1224 * x1225;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1226);
          reg = x1226;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1227 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1227 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1228 = x90 - x1224;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1229 = x1227 * x1228;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1229 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1230 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1230 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1230);
          reg = x1230;
        }
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
          auto x1231 = x1068 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1000);
            reg = x1000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1004);
            reg = x1004;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1012);
            reg = x1012;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1016);
            reg = x1016;
          }
          {
            host_args.at(0) = x1231;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1232 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1232 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1233 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1233 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1234 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1234 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1235 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1235 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1231);
            reg = x1231;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1232);
            reg = x1232;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1233);
            reg = x1233;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1234);
            reg = x1234;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1235);
            reg = x1235;
          }
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1236 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1236 != Fp::invalid());
      if (x1236 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1237 = x825 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1237 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1238 = x814 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1238 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1239 = x1076 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1240 = Fp(x1239.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1240);
            reg = x1240;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1241 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1241 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1242 = x1239 - x1241;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1243 = x1242 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1244 = Fp(x1243.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1244);
            reg = x1244;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1245 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1245 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1246 = x1243 - x1245;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1247 = x1246 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1248 = Fp(x1247.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1248);
            reg = x1248;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1249 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1249 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1250 = x1247 - x1249;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1251 = x1250 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1252 = Fp(x1251.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1252);
            reg = x1252;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1253 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1253 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1254 = x1251 - x1253;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1255 = x1254 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1255);
          reg = x1255;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1256 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1256 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1257 = x93 - x1256;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1258 = x1256 * x1257;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1258);
          reg = x1258;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1259 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1259 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1260 = x90 - x1256;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1261 = x1259 * x1260;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1261 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1262 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1262 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1262);
          reg = x1262;
        }
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1062;
          host_args.at(2) = x92;
          host_args.at(3) = x92;
          host_args.at(4) = x92;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1263 = x1068 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1062);
            reg = x1062;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          {
            host_args.at(0) = x1263;
            host_args.at(1) = x1062;
            host_args.at(2) = x92;
            host_args.at(3) = x92;
            host_args.at(4) = x92;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1264 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1264 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1265 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1265 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1266 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1266 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1267 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1267 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1263);
            reg = x1263;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1264);
            reg = x1264;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1265);
            reg = x1265;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1266);
            reg = x1266;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1267);
            reg = x1267;
          }
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1268 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1268 != Fp::invalid());
      if (x1268 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1269 = x825 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1269 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1270 = x814 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1270 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1271 = x1076 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1272 = Fp(x1271.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1272);
            reg = x1272;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1273 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1273 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1274 = x1271 - x1273;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1275 = x1274 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1276 = Fp(x1275.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1276);
            reg = x1276;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1277 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1277 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1278 = x1275 - x1277;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1279 = x1278 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1280 = Fp(x1279.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1280);
            reg = x1280;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1281 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1281 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1282 = x1279 - x1281;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1283 = x1282 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1284 = Fp(x1283.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1284);
            reg = x1284;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1285 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1286 = x1283 - x1285;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1287 = x1286 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1287);
          reg = x1287;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1288 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1289 = x93 - x1288;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1290 = x1288 * x1289;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1290);
          reg = x1290;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1291 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1292 = x90 - x1288;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1293 = x1291 * x1292;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1293 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1294 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1294 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1294);
          reg = x1294;
        }
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1064;
          host_args.at(2) = x92;
          host_args.at(3) = x92;
          host_args.at(4) = x92;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1295 = x1068 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1064);
            reg = x1064;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          {
            host_args.at(0) = x1295;
            host_args.at(1) = x1064;
            host_args.at(2) = x92;
            host_args.at(3) = x92;
            host_args.at(4) = x92;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1296 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1296 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1297 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1297 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1298 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1298 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1299 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1299 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1295);
            reg = x1295;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1296);
            reg = x1296;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1297);
            reg = x1297;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
      auto x1300 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1300 != Fp::invalid());
      if (x1300 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        auto x1301 = x825 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1301 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x814 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1302 = x785 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1303 = x788 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1304 = x1302 + x1303;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1305 = x1304 + x897;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1306 = x778 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1307 = x780 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1308 = x1306 + x1307;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1309 = x1308 + x782;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1310 = x778 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1305);
          reg = x1305;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1309);
          reg = x1309;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1310);
          reg = x1310;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1310);
          reg = x1310;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1311 = x1076 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1312 = Fp(x1311.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1312);
            reg = x1312;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1313 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1313 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1314 = x1311 - x1313;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1315 = x1314 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1316 = Fp(x1315.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1316);
            reg = x1316;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1317 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1317 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1318 = x1315 - x1317;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1319 = x1318 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1320 = Fp(x1319.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1320);
            reg = x1320;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1321 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1321 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1322 = x1319 - x1321;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1323 = x1322 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1324 = Fp(x1323.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1324);
            reg = x1324;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1325 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1325 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1326 = x1323 - x1325;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1327 = x1326 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1327);
          reg = x1327;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1328 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1328 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1329 = x93 - x1328;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1330 = x1328 * x1329;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1330);
          reg = x1330;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1331 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1331 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1332 = x90 - x1328;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1333 = x1331 * x1332;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1333 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1334 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1334 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1334);
          reg = x1334;
        }
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
          auto x1335 = x1068 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1000);
            reg = x1000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1004);
            reg = x1004;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1012);
            reg = x1012;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1016);
            reg = x1016;
          }
          {
            host_args.at(0) = x1335;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1336 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1336 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1337 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1337 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1338 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1338 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1339 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1339 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1335);
            reg = x1335;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1336);
            reg = x1336;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1337);
            reg = x1337;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1338);
            reg = x1338;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1339);
            reg = x1339;
          }
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":39:25))
    auto x1340 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x1340 != Fp::invalid());
    if (x1340 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1341 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x1341 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1342 = x596 * x73;
      {
        host_args.at(0) = x1342;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1343 = host_outs.at(0);
        auto x1344 = host_outs.at(1);
        auto x1345 = host_outs.at(2);
        auto x1346 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1343);
          reg = x1343;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1344);
          reg = x1344;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1345);
          reg = x1345;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1346);
          reg = x1346;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1347 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x1347 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1348 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x1348 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1349 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x1349 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1350 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x1350 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1342);
        reg = x1342;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1341);
        reg = x1341;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1347);
        reg = x1347;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1348);
        reg = x1348;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1349);
        reg = x1349;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1350);
        reg = x1350;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1351 = Fp(x1350.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1352 = x1351 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1352);
          reg = x1352;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1353 = Fp(x1350.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1354 = x1353 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1354);
          reg = x1354;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1355 = Fp(x1350.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1356 = x1355 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1356);
          reg = x1356;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1357 = Fp(x1350.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1358 = x1357 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1358);
          reg = x1358;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1359 = Fp(x1350.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1360 = x1359 * x54;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1360);
          reg = x1360;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1361 = Fp(x1350.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1361);
          reg = x1361;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1362 = Fp(x1349.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1363 = x1362 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1363);
          reg = x1363;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1364 = Fp(x1349.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1365 = x1364 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1365);
          reg = x1365;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1366 = Fp(x1349.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1367 = x1366 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1367);
          reg = x1367;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1368 = Fp(x1349.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1369 = x1368 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1369);
          reg = x1369;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1370 = Fp(x1349.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1370);
          reg = x1370;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1371 = Fp(x1348.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1372 = x1371 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1372);
          reg = x1372;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1373 = Fp(x1348.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1374 = x1373 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1374);
          reg = x1374;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1375 = Fp(x1348.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1376 = x1375 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1376);
          reg = x1376;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1377 = Fp(x1348.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1378 = x1377 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1378);
          reg = x1378;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1379 = Fp(x1348.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1379);
          reg = x1379;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1380 = Fp(x1347.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1381 = x1380 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1381);
          reg = x1381;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1382 = Fp(x1347.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1382);
          reg = x1382;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1383 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x1383 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1384 = x1383 * x53;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1385 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1385 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1386 = x1385 * x57;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1387 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x1387 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1388 = x1387 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1389 = x1386 + x1388;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1390 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x1390 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1391 = x1390 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1392 = x1389 + x1391;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1393 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1393 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1394 = x1392 + x1393;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1395 = x1384 + x1394;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1396 = x1395 * x90;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1397 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x1397 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1398 = x1396 + x1397;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1399 = x1350 - x1398;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1399 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1400 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x1400 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1401 = x1400 * x68;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1402 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1402 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1403 = x1402 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1404 = x1401 + x1403;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1405 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x1405 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1406 = x1404 + x1405;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1407 = x1406 * x57;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1408 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1408 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1409 = x1408 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1410 = x1407 + x1409;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1411 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1411 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1412 = x1410 + x1411;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1413 = x1349 - x1412;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1413 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1414 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x1414 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1415 = x1414 * x62;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1416 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x1416 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1417 = x1416 * x75;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1418 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1418 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1419 = x1417 + x1418;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1420 = x1419 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1421 = x1415 + x1420;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1422 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1422 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1423 = x1422 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1424 = x1421 + x1423;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1425 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1425 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1426 = x1424 + x1425;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1427 = x1348 - x1426;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1427 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1428 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x1428 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1429 = x1428 * x62;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1430 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1430 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1431 = x1429 + x1430;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1432 = x1347 - x1431;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1432 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1347;
        host_args.at(1) = x1348;
        host_args.at(2) = x1349;
        host_args.at(3) = x1350;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1433 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1434 = (x1433 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1434);
            reg = x1434;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1435 = x1433 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1436 = (x1435 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1436);
            reg = x1436;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1437 = x1433 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1438 = (x1437 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1438);
            reg = x1438;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1439 = x1433 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1440 = (x1439 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1440);
            reg = x1440;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1441 = x1433 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1442 = (x1441 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1442);
            reg = x1442;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1443 = x1433 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1444 = (x1443 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1444);
            reg = x1444;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1445 = x1433 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1446 = (x1445 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1446);
            reg = x1446;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1447 = x1433 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1448 = (x1447 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1448);
            reg = x1448;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1449 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1449 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1450 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1450 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1451 = x1450 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1452 = x1449 + x1451;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1453 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1453 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1454 = x1453 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1455 = x1452 + x1454;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1456 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1456 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1457 = x1456 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1458 = x1455 + x1457;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1459 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1459 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1460 = x1459 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1461 = x1458 + x1460;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1462 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1462 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1463 = x1462 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1464 = x1461 + x1463;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1465 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1465 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1466 = x1465 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1467 = x1464 + x1466;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x1468 = x1467 - x1433;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x1468 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1469 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x1469 != Fp::invalid());
        if (x1469 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1470 = x1390 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1471 = x1393 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1472 = x1470 + x1471;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1473 = x1397 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1474 = x1473 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1475 = x1472 + x1474;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1476 = x1383 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1477 = x1385 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1478 = x1476 + x1477;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1479 = x1478 + x1387;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1480 = x1383 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1475);
            reg = x1475;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1479);
            reg = x1479;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1480);
            reg = x1480;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1480);
            reg = x1480;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1481 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1481 != Fp::invalid());
        if (x1481 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1482 = x1390 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1483 = x1393 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1484 = x1482 + x1483;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1485 = x1397 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1486 = x1485 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1487 = x1484 + x1486;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1488 = x1383 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1489 = x1385 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1490 = x1488 + x1489;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1491 = x1490 + x1387;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1492 = x1383 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1487);
            reg = x1487;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1491);
            reg = x1491;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1492);
            reg = x1492;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1492);
            reg = x1492;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
        auto x1493 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1493 != Fp::invalid());
        if (x1493 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1494 = x1390 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1495 = x1393 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1496 = x1494 + x1495;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1497 = x1397 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1498 = x1497 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1499 = x1496 + x1498;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1500 = x1383 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1501 = x1385 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1502 = x1500 + x1501;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1503 = x1502 + x1387;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1504 = x1383 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1499);
            reg = x1499;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1503);
            reg = x1503;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1504);
            reg = x1504;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1504);
            reg = x1504;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1505 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1505 != Fp::invalid());
        if (x1505 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1506 = x1390 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1507 = x1393 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1508 = x1506 + x1507;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1509 = x1397 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1510 = x1509 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1511 = x1508 + x1510;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1512 = x1383 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1513 = x1385 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1514 = x1512 + x1513;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1515 = x1514 + x1387;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1516 = x1383 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1511);
            reg = x1511;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1515);
            reg = x1515;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1516);
            reg = x1516;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1516);
            reg = x1516;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1517 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1517 != Fp::invalid());
        if (x1517 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1518 = x1390 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1519 = x1393 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1520 = x1518 + x1519;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1521 = x1397 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1522 = x1521 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1523 = x1520 + x1522;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1524 = x1383 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1525 = x1385 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1526 = x1524 + x1525;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1527 = x1526 + x1387;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1528 = x1383 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1523);
            reg = x1523;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1527);
            reg = x1527;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1528);
            reg = x1528;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1528);
            reg = x1528;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1529 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1529 != Fp::invalid());
        if (x1529 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1530 = x1390 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1531 = x1393 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1532 = x1530 + x1531;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1533 = x1422 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1534 = x1532 + x1533;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1535 = x1425 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1536 = x1534 + x1535;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1537 = x1383 * x41;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1538 = x1428 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1539 = x1537 + x1538;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1540 = x1385 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1541 = x1539 + x1540;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1542 = x1541 + x1387;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1543 = x1383 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1536);
            reg = x1536;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1542);
            reg = x1542;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1543);
            reg = x1543;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1543);
            reg = x1543;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1544 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1544 != Fp::invalid());
        if (x1544 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1545 = x1390 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1546 = x1393 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1547 = x1545 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1548 = x1422 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1549 = x1547 + x1548;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1550 = x1425 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1551 = x1549 + x1550;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1552 = x1383 * x41;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1553 = x1428 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1554 = x1552 + x1553;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1555 = x1385 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1556 = x1554 + x1555;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1557 = x1556 + x1387;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1558 = x1383 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1551);
            reg = x1551;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1557);
            reg = x1557;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1558);
            reg = x1558;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1558);
            reg = x1558;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x1559 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1559 != Fp::invalid());
        if (x1559 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1560 = x1390 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1561 = x1393 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1562 = x1560 + x1561;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1563 = x1422 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1564 = x1562 + x1563;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1565 = x1425 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1566 = x1564 + x1565;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1567 = x1383 * x41;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1568 = x1428 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1569 = x1567 + x1568;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1570 = x1385 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1571 = x1569 + x1570;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1572 = x1571 + x1387;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1573 = x1383 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1566);
            reg = x1566;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1572);
            reg = x1572;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1573);
            reg = x1573;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1573);
            reg = x1573;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1574 = x1408 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1575 = x1411 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1576 = x1574 + x1575;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1577 = x1576 + x1414;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1578 = x1577 + x46;
      {
        host_args.at(0) = x1578;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1579 = host_outs.at(0);
        auto x1580 = host_outs.at(1);
        auto x1581 = host_outs.at(2);
        auto x1582 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1579);
          reg = x1579;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1580);
          reg = x1580;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1581);
          reg = x1581;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1582);
          reg = x1582;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1583 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x1583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1584 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1585 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1586 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1586 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1578);
        reg = x1578;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1341);
        reg = x1341;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1583);
        reg = x1583;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1584);
        reg = x1584;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1585);
        reg = x1585;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1586);
        reg = x1586;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1587 = x1397 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1588 = x1587 + x1406;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1589 = x1588 + x46;
      {
        host_args.at(0) = x1589;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1590 = host_outs.at(0);
        auto x1591 = host_outs.at(1);
        auto x1592 = host_outs.at(2);
        auto x1593 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1590);
          reg = x1590;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1591);
          reg = x1591;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1592);
          reg = x1592;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1593);
          reg = x1593;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1594 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x1594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1595 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1596 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1597 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1597 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1589);
        reg = x1589;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1341);
        reg = x1341;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1594);
        reg = x1594;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1595);
        reg = x1595;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1596);
        reg = x1596;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1597);
        reg = x1597;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1598 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1599 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1600 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1601 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1601 != Fp::invalid());
      host_args.at(0) = x1598;
      host_args.at(1) = x1599;
      host_args.at(2) = x1600;
      host_args.at(3) = x1601;
      host_args.at(4) = x1577;
      host_args.at(5) = x1583;
      host_args.at(6) = x1584;
      host_args.at(7) = x1585;
      host_args.at(8) = x1586;
      host_args.at(9) = x1588;
      host_args.at(10) = x1594;
      host_args.at(11) = x1595;
      host_args.at(12) = x1596;
      host_args.at(13) = x1597;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1602 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1602 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x1603 = x93 - x1602;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1604 = x1603 * x1583;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1605 = x1603 * x1584;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1606 = x1603 * x1585;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1607 = x1603 * x1586;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1608 = x593 * x75;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1609 = x590 + x1608;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1610 = x583 - x75;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1611 = x1602 * x1610;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1612 = x1602 * x584;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1613 = x1602 * x587;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1614 = x1602 * x1609;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1615 = x1604 + x1611;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1616 = x1605 + x1612;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1617 = x1606 + x1613;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1618 = x1607 + x1614;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1619 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1619 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x1620 = x93 - x1619;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1621 = x1620 * x1594;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1622 = x1620 * x1595;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1623 = x1620 * x1596;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1624 = x1620 * x1597;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1625 = x1619 * x1598;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1626 = x1619 * x1599;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1627 = x1619 * x1600;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1628 = x1619 * x1601;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1629 = x1621 + x1625;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1630 = x1622 + x1626;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1631 = x1623 + x1627;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1632 = x1624 + x1628;
      host_args.at(0) = x1615;
      host_args.at(1) = x1616;
      host_args.at(2) = x1617;
      host_args.at(3) = x1618;
      host_args.at(4) = x1629;
      host_args.at(5) = x1630;
      host_args.at(6) = x1631;
      host_args.at(7) = x1632;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1633 = Fp(x1618.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1634 = x1633 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1634);
          reg = x1634;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1635 = Fp(x1618.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1636 = x1635 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1636);
          reg = x1636;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1637 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1637 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1638 = x1637 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1639 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x1639 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1640 = x1639 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1641 = x1638 + x1640;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1642 = x1618 - x1641;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1642 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1643 = Fp(x1632.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1644 = x1643 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1644);
          reg = x1644;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1645 = Fp(x1632.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1646 = x1645 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1646);
          reg = x1646;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1647 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1647 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1648 = x1647 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1649 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x1649 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1650 = x1649 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1651 = x1648 + x1650;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1652 = x1632 - x1651;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1652 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1629);
        reg = x1629;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1630);
        reg = x1630;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1631);
        reg = x1631;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1632);
        reg = x1632;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1653 = Fp(x1615.asUInt32() & x1629.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1654 = Fp(x1616.asUInt32() & x1630.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1655 = Fp(x1617.asUInt32() & x1631.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1656 = Fp(x1618.asUInt32() & x1632.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1653);
          reg = x1653;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1654);
          reg = x1654;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1655);
          reg = x1655;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1656);
          reg = x1656;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1657 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1657 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1658 = x1657 * x1615;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1659 = x1657 * x1616;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1660 = x1657 * x1617;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1661 = x1657 * x1618;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1662 = x1658 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1663 = x1659 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1664 = x1660 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1665 = x1661 + x89;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1666 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1666 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1667 = x1666 * x1629;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1668 = x1666 * x1630;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1669 = x1666 * x1631;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1670 = x1666 * x1632;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1671 = x1662 + x1667;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1672 = x1663 + x1668;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1673 = x1664 + x1669;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1674 = x1665 + x1670;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1675 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x1675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1676 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1677 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1678 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1679 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1679 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1680 = x1675 * x1676;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1681 = x1675 * x1677;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1682 = x1675 * x1678;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1683 = x1675 * x1679;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1684 = x1671 + x1680;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1685 = x1672 + x1681;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1686 = x1673 + x1682;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1687 = x1674 + x1683;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1688 = x1685 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1689 = x1684 + x1688;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1690 = Fp(x1689.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1690);
          reg = x1690;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1691 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1691 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1692 = x1689 - x1691;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1693 = x1692 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1694 = Fp(x1693.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1694);
          reg = x1694;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1695 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1695 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1696 = x1693 - x1695;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1697 = x1696 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1697);
        reg = x1697;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1698 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1698 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1699 = x1698 + x1686;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1700 = x1687 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1701 = x1699 + x1700;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1702 = Fp(x1701.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1702);
          reg = x1702;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1703 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1703 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1704 = x1701 - x1703;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1705 = x1704 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1706 = Fp(x1705.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1706);
          reg = x1706;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1707 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1707 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1708 = x1705 - x1707;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1709 = x1708 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1709);
        reg = x1709;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1710 = Fp(x1707.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1711 = x1710 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1711);
          reg = x1711;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1712 = Fp(x1707.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1713 = x1712 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1713);
          reg = x1713;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1714 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1714 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1715 = x1714 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1716 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1716 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1717 = x1716 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1718 = x1715 + x1717;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1719 = x1707 - x1718;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1719 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1720 = x93 - x1647;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1721 = x1637 * x1720;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1722 = x93 - x1714;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1723 = x1721 * x1722;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1724 = x93 - x1637;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1725 = x1724 * x1647;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1726 = x1725 * x1714;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1727 = x1723 + x1726;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1727);
        reg = x1727;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1728 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1728 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1729 = x1728 + x1714;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1730 = x1728 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1731 = x1730 * x1714;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1732 = x1729 - x1731;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1732);
        reg = x1732;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1733 = x1695 * x88;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1734 = x1691 + x1733;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1735 = (x1734 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1735);
          reg = x1735;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1736 = inv(x1734);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1736);
          reg = x1736;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1737 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1737 != Fp::invalid());
      if (x1737 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1734 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1738 = x93 - x1737;
      if (x1738 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1739 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x1739 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1740 = x1734 * x1739;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1741 = x1740 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1741 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1742 = x1707 * x88;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1743 = x1703 + x1742;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1744 = x1738 * x77;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1745 = x1743 + x1744;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1746 = (x1745 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1746);
          reg = x1746;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1747 = inv(x1745);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1747);
          reg = x1747;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1748 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1748 != Fp::invalid());
      if (x1748 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1745 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1749 = x93 - x1748;
      if (x1749 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1750 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x1750 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1751 = x1745 * x1750;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1752 = x1751 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1752 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1753 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1754 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1754 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1755 = x93 - x1754;
      host_args.at(0) = x1691;
      host_args.at(1) = x1695;
      host_args.at(2) = x1703;
      host_args.at(3) = x1707;
      host_args.at(4) = x1748;
      host_args.at(5) = x1753;
      host_args.at(6) = x1755;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1756 = x1422 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1757 = x1425 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1758 = x1756 + x1757;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1759 = x1758 + x1428;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1760 = (x1759 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1760);
          reg = x1760;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1761 = inv(x1759);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1761);
          reg = x1761;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1762 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1762 != Fp::invalid());
      if (x1762 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1759 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1763 = x93 - x1762;
      if (x1763 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1764 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x1764 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1765 = x1759 * x1764;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1766 = x1765 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1766 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1767 = x596 + x75;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x1768 = x1599 * x88;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1769 = x1598 + x1768;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x1770 = x1600 * x77;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1771 = x1769 + x1770;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x1772 = x1601 * x45;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x1773 = x1772 * x44;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x1774 = x1771 + x1773;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x1775 = x596 + x1774;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1776 = x1748 * x1775;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:35)
      auto x1777 = x1749 * x1767;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1778 = x1776 + x1777;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1779 = x1748 * x1767;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:34)
      auto x1780 = x1749 * x1775;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1781 = x1779 + x1780;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1782 = x1753 * x1775;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:36)
      auto x1783 = x93 - x1753;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:35)
      auto x1784 = x1783 * x1767;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1785 = x1782 + x1784;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x1786 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1786 != Fp::invalid());
      if (x1786 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1787 = x1430 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1787 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1788 = x1419 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1788 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1789 = x1390 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1790 = x1393 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1791 = x1789 + x1790;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1792 = x1791 + x1588;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1793 = x1383 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1794 = x1385 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1795 = x1793 + x1794;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1796 = x1795 + x1387;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1797 = x1383 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1792);
          reg = x1792;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1796);
          reg = x1796;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1797);
          reg = x1797;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1797);
          reg = x1797;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1798 = x1767 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1799 = Fp(x1798.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1799);
            reg = x1799;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1800 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1800 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1801 = x1798 - x1800;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1802 = x1801 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1803 = Fp(x1802.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1803);
            reg = x1803;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1804 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1804 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1805 = x1802 - x1804;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1806 = x1805 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1807 = Fp(x1806.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1807);
            reg = x1807;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1808 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1808 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1809 = x1806 - x1808;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1810 = x1809 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1811 = Fp(x1810.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1811);
            reg = x1811;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1812 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1812 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1813 = x1810 - x1812;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1814 = x1813 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1814);
          reg = x1814;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1815 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1815 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1816 = x93 - x1815;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1817 = x1815 * x1816;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1817);
          reg = x1817;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1818 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1818 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1819 = x90 - x1815;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1820 = x1818 * x1819;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1820 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1821 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1821 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1821);
          reg = x1821;
        }
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x1822 = x1759 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1691);
            reg = x1691;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1695);
            reg = x1695;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1703);
            reg = x1703;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1707);
            reg = x1707;
          }
          {
            host_args.at(0) = x1822;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1823 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1823 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1824 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1824 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1825 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1825 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1826 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1826 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1822);
            reg = x1822;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1823);
            reg = x1823;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1824);
            reg = x1824;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1825);
            reg = x1825;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1826);
            reg = x1826;
          }
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x1827 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1827 != Fp::invalid());
      if (x1827 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1828 = x1430 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1828 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1829 = x1419 - x70;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1829 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1830 = x1390 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1831 = x1393 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1832 = x1830 + x1831;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1833 = x1832 + x1588;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1834 = x1383 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1835 = x1385 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1836 = x1834 + x1835;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1837 = x1836 + x1387;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1838 = x1383 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1833);
          reg = x1833;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1837);
          reg = x1837;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1838);
          reg = x1838;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1838);
          reg = x1838;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1839 = x1767 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1840 = Fp(x1839.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1840);
            reg = x1840;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1841 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1841 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1842 = x1839 - x1841;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1843 = x1842 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1844 = Fp(x1843.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1844);
            reg = x1844;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1845 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1845 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1846 = x1843 - x1845;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1847 = x1846 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1848 = Fp(x1847.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1848);
            reg = x1848;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1849 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1849 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1850 = x1847 - x1849;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1851 = x1850 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1852 = Fp(x1851.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1852);
            reg = x1852;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1853 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1853 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1854 = x1851 - x1853;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1855 = x1854 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1855);
          reg = x1855;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1856 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1856 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1857 = x93 - x1856;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1858 = x1856 * x1857;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1858);
          reg = x1858;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1859 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1859 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1860 = x90 - x1856;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1861 = x1859 * x1860;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1861 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1862 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1862 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1862);
          reg = x1862;
        }
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x1863 = x1759 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1691);
            reg = x1691;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1695);
            reg = x1695;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1703);
            reg = x1703;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1707);
            reg = x1707;
          }
          {
            host_args.at(0) = x1863;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1864 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1864 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1865 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1865 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1866 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1866 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1867 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1867 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1863);
            reg = x1863;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1864);
            reg = x1864;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1865);
            reg = x1865;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1866);
            reg = x1866;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1867);
            reg = x1867;
          }
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
      auto x1868 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1868 != Fp::invalid());
      if (x1868 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1869 = x1430 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1869 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1870 = x1419 - x69;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1870 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1871 = x1390 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1872 = x1393 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1873 = x1871 + x1872;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1874 = x1873 + x1588;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1875 = x1383 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1876 = x1385 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1877 = x1875 + x1876;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1878 = x1877 + x1387;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1879 = x1383 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1874);
          reg = x1874;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1878);
          reg = x1878;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1879);
          reg = x1879;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1879);
          reg = x1879;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1880 = x1767 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1881 = Fp(x1880.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1881);
            reg = x1881;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1882 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1882 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1883 = x1880 - x1882;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1884 = x1883 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1885 = Fp(x1884.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1885);
            reg = x1885;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1886 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1886 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1887 = x1884 - x1886;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1888 = x1887 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1889 = Fp(x1888.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1889);
            reg = x1889;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1890 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1890 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1891 = x1888 - x1890;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1892 = x1891 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1893 = Fp(x1892.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1893);
            reg = x1893;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1894 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1894 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1895 = x1892 - x1894;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1896 = x1895 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1896);
          reg = x1896;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1897 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1897 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1898 = x93 - x1897;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1899 = x1897 * x1898;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1899);
          reg = x1899;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1900 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1900 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1901 = x90 - x1897;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1902 = x1900 * x1901;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1902 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1903 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1903 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1903);
          reg = x1903;
        }
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
          auto x1904 = x1759 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1691);
            reg = x1691;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1695);
            reg = x1695;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1703);
            reg = x1703;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1707);
            reg = x1707;
          }
          {
            host_args.at(0) = x1904;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1905 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1905 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1906 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1906 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1907 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1907 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1908 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1908 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1904);
            reg = x1904;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1905);
            reg = x1905;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1906);
            reg = x1906;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1907);
            reg = x1907;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1908);
            reg = x1908;
          }
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x1909 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1909 != Fp::invalid());
      if (x1909 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1910 = x1430 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1910 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1911 = x1419 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1911 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1912 = x1390 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1913 = x1393 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1914 = x1912 + x1913;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1915 = x1914 + x1588;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1916 = x1383 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1917 = x1385 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1918 = x1916 + x1917;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1919 = x1918 + x1387;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1920 = x1383 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1915);
          reg = x1915;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1919);
          reg = x1919;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1920);
          reg = x1920;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1920);
          reg = x1920;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1921 = x1767 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1922 = Fp(x1921.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1922);
            reg = x1922;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1923 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1923 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1924 = x1921 - x1923;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1925 = x1924 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1926 = Fp(x1925.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1926);
            reg = x1926;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1927 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1927 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1928 = x1925 - x1927;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1929 = x1928 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1930 = Fp(x1929.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1930);
            reg = x1930;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1931 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1931 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1932 = x1929 - x1931;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1933 = x1932 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1934 = Fp(x1933.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1934);
            reg = x1934;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1935 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1935 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1936 = x1933 - x1935;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1937 = x1936 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1937);
          reg = x1937;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1938 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1938 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1939 = x93 - x1938;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1940 = x1938 * x1939;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1940);
          reg = x1940;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1941 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1942 = x90 - x1938;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1943 = x1941 * x1942;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1943 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1944 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1944 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1944);
          reg = x1944;
        }
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1753;
          host_args.at(2) = x92;
          host_args.at(3) = x92;
          host_args.at(4) = x92;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x1945 = x1759 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1753);
            reg = x1753;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          {
            host_args.at(0) = x1945;
            host_args.at(1) = x1753;
            host_args.at(2) = x92;
            host_args.at(3) = x92;
            host_args.at(4) = x92;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1946 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1946 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1947 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1947 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1948 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1948 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1949 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1949 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1945);
            reg = x1945;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1946);
            reg = x1946;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1947);
            reg = x1947;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1948);
            reg = x1948;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1949);
            reg = x1949;
          }
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x1950 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1950 != Fp::invalid());
      if (x1950 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1951 = x1430 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1951 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1952 = x1419 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1952 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1953 = x1390 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1954 = x1393 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1955 = x1953 + x1954;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1956 = x1955 + x1588;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1957 = x1383 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1958 = x1385 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1959 = x1957 + x1958;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1960 = x1959 + x1387;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1961 = x1383 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1956);
          reg = x1956;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1960);
          reg = x1960;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1961);
          reg = x1961;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1961);
          reg = x1961;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1962 = x1767 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1963 = Fp(x1962.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1963);
            reg = x1963;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1964 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1964 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1965 = x1962 - x1964;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1966 = x1965 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1967 = Fp(x1966.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1967);
            reg = x1967;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1968 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1968 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1969 = x1966 - x1968;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1970 = x1969 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1971 = Fp(x1970.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1971);
            reg = x1971;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1972 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1972 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1973 = x1970 - x1972;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1974 = x1973 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1975 = Fp(x1974.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1975);
            reg = x1975;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1976 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1976 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1977 = x1974 - x1976;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1978 = x1977 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1978);
          reg = x1978;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1979 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1979 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1980 = x93 - x1979;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1981 = x1979 * x1980;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1981);
          reg = x1981;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1982 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1982 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1983 = x90 - x1979;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1984 = x1982 * x1983;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1984 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1985 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1985 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1985);
          reg = x1985;
        }
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1755;
          host_args.at(2) = x92;
          host_args.at(3) = x92;
          host_args.at(4) = x92;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x1986 = x1759 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1755);
            reg = x1755;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          {
            host_args.at(0) = x1986;
            host_args.at(1) = x1755;
            host_args.at(2) = x92;
            host_args.at(3) = x92;
            host_args.at(4) = x92;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1987 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1987 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1988 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1988 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1989 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1989 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1990 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1990 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1986);
            reg = x1986;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1987);
            reg = x1987;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1988);
            reg = x1988;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1989);
            reg = x1989;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1990);
            reg = x1990;
          }
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x1991 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1991 != Fp::invalid());
      if (x1991 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x1992 = x1430 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1992 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1419 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1993 = x1390 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x1994 = x1393 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1995 = x1993 + x1994;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1996 = x1995 + x1756;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1997 = x1996 + x1757;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x1998 = x1383 * x41;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x1999 = x1428 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2000 = x1998 + x1999;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2001 = x1385 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2002 = x2000 + x2001;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2003 = x2002 + x1387;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2004 = x1383 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1997);
          reg = x1997;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2003);
          reg = x2003;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2004);
          reg = x2004;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2004);
          reg = x2004;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2005 = x1778 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2006 = Fp(x2005.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2006);
            reg = x2006;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2007 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2007 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2008 = x2005 - x2007;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2009 = x2008 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2010 = Fp(x2009.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2010);
            reg = x2010;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2011 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2011 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2012 = x2009 - x2011;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2013 = x2012 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2014 = Fp(x2013.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2014);
            reg = x2014;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2015 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2015 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2016 = x2013 - x2015;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2017 = x2016 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2018 = Fp(x2017.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2018);
            reg = x2018;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2019 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2019 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2020 = x2017 - x2019;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2021 = x2020 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2021);
          reg = x2021;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2022 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2022 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2023 = x93 - x2022;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2024 = x2022 * x2023;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2024);
          reg = x2024;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2025 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2025 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2026 = x90 - x2022;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2027 = x2025 * x2026;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2027 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2028 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2028 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2028);
          reg = x2028;
        }
        if (x92 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2029 = x1759 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1691);
            reg = x1691;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1695);
            reg = x1695;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1703);
            reg = x1703;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1707);
            reg = x1707;
          }
          {
            host_args.at(0) = x2029;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2030 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2030 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2031 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2031 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2032 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2032 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2033 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2033 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2029);
            reg = x2029;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2030);
            reg = x2030;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2031);
            reg = x2031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2032);
            reg = x2032;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2033);
            reg = x2033;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2034 = x1762 + x93;
        if (x2034 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2035 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2035 != Fp::invalid());
      if (x2035 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2036 = x1430 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2036 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2037 = x1419 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2037 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2038 = x1390 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2039 = x1393 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2040 = x2038 + x2039;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2041 = x2040 + x1756;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2042 = x2041 + x1757;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2043 = x1383 * x41;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2044 = x1428 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2045 = x2043 + x2044;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2046 = x1385 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2047 = x2045 + x2046;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2048 = x2047 + x1387;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2049 = x1383 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2042);
          reg = x2042;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2048);
          reg = x2048;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2049);
          reg = x2049;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2049);
          reg = x2049;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2050 = x1781 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2051 = Fp(x2050.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2051);
            reg = x2051;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2052 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2052 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2053 = x2050 - x2052;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2054 = x2053 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2055 = Fp(x2054.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2055);
            reg = x2055;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2056 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2056 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2057 = x2054 - x2056;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2058 = x2057 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2059 = Fp(x2058.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2059);
            reg = x2059;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2060 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2060 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2061 = x2058 - x2060;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2062 = x2061 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2063 = Fp(x2062.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2063);
            reg = x2063;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2064 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2064 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2065 = x2062 - x2064;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2066 = x2065 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2066);
          reg = x2066;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2067 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2067 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2068 = x93 - x2067;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2069 = x2067 * x2068;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2069);
          reg = x2069;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2070 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2070 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2071 = x90 - x2067;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2072 = x2070 * x2071;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2072 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2073 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2073 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2073);
          reg = x2073;
        }
        if (x92 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2074 = x1759 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1691);
            reg = x1691;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1695);
            reg = x1695;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1703);
            reg = x1703;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1707);
            reg = x1707;
          }
          {
            host_args.at(0) = x2074;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2075 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2075 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2076 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2076 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2077 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2077 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2078 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2078 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2074);
            reg = x2074;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2075);
            reg = x2075;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2076);
            reg = x2076;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2077);
            reg = x2077;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2078);
            reg = x2078;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2079 = x1762 + x93;
        if (x2079 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2080 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2080 != Fp::invalid());
      if (x2080 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2081 = x1430 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2081 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2082 = x1419 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2082 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2083 = x1390 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2084 = x1393 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2085 = x2083 + x2084;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2086 = x2085 + x1756;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2087 = x2086 + x1757;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2088 = x1383 * x41;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2089 = x1428 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2090 = x2088 + x2089;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2091 = x1385 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2092 = x2090 + x2091;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2093 = x2092 + x1387;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2094 = x1383 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2087);
          reg = x2087;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2093);
          reg = x2093;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2094);
          reg = x2094;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2094);
          reg = x2094;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2095 = x1785 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2096 = Fp(x2095.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2096);
            reg = x2096;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2097 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2097 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2098 = x2095 - x2097;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2099 = x2098 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2100 = Fp(x2099.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2100);
            reg = x2100;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2101 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2101 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2102 = x2099 - x2101;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2103 = x2102 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2104 = Fp(x2103.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2104);
            reg = x2104;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2105 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2105 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2106 = x2103 - x2105;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2107 = x2106 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2108 = Fp(x2107.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2108);
            reg = x2108;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2109 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2109 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2110 = x2107 - x2109;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2111 = x2110 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2111);
          reg = x2111;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2112 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2112 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2113 = x93 - x2112;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2114 = x2112 * x2113;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2114);
          reg = x2114;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2115 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2115 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2116 = x90 - x2112;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2117 = x2115 * x2116;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2117 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2118 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2118 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2118);
          reg = x2118;
        }
        if (x92 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2119 = x1759 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1691);
            reg = x1691;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1695);
            reg = x1695;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1703);
            reg = x1703;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1707);
            reg = x1707;
          }
          {
            host_args.at(0) = x2119;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2120 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2120 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2121 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2121 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2122 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2122 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2123 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2123 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2119);
            reg = x2119;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2120);
            reg = x2120;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2121);
            reg = x2121;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2122);
            reg = x2122;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2123);
            reg = x2123;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2124 = x1762 + x93;
        if (x2124 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/components/mux.h":39:25))
    auto x2125 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x2125 != Fp::invalid());
    if (x2125 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2126 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2126 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x2127 = x596 * x73;
      {
        host_args.at(0) = x2127;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2128 = host_outs.at(0);
        auto x2129 = host_outs.at(1);
        auto x2130 = host_outs.at(2);
        auto x2131 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2128);
          reg = x2128;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2129);
          reg = x2129;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2130);
          reg = x2130;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2131);
          reg = x2131;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2132 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2132 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2133 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2133 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2134 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2134 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2135 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2135 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2127);
        reg = x2127;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2126);
        reg = x2126;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2132);
        reg = x2132;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2133);
        reg = x2133;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2134);
        reg = x2134;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2135);
        reg = x2135;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2136 = Fp(x2135.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2137 = x2136 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2137);
          reg = x2137;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2138 = Fp(x2135.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2139 = x2138 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2139);
          reg = x2139;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2140 = Fp(x2135.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2141 = x2140 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2141);
          reg = x2141;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2142 = Fp(x2135.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2143 = x2142 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2143);
          reg = x2143;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2144 = Fp(x2135.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2145 = x2144 * x54;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2145);
          reg = x2145;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2146 = Fp(x2135.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2146);
          reg = x2146;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2147 = Fp(x2134.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2148 = x2147 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2148);
          reg = x2148;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2149 = Fp(x2134.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2150 = x2149 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2150);
          reg = x2150;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2151 = Fp(x2134.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2152 = x2151 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2152);
          reg = x2152;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2153 = Fp(x2134.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2154 = x2153 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2154);
          reg = x2154;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2155 = Fp(x2134.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2155);
          reg = x2155;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2156 = Fp(x2133.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2157 = x2156 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2157);
          reg = x2157;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2158 = Fp(x2133.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2159 = x2158 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2159);
          reg = x2159;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2160 = Fp(x2133.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2161 = x2160 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2161);
          reg = x2161;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2162 = Fp(x2133.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2163 = x2162 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2163);
          reg = x2163;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2164 = Fp(x2133.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2164);
          reg = x2164;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2165 = Fp(x2132.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2166 = x2165 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2166);
          reg = x2166;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2167 = Fp(x2132.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2167);
          reg = x2167;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2168 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x2168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2169 = x2168 * x53;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2170 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2171 = x2170 * x57;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2172 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x2172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2173 = x2172 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2174 = x2171 + x2173;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2175 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x2175 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2176 = x2175 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2177 = x2174 + x2176;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2178 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2178 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2179 = x2177 + x2178;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2180 = x2169 + x2179;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2181 = x2180 * x90;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2182 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x2182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2183 = x2181 + x2182;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2184 = x2135 - x2183;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2184 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2185 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x2185 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2186 = x2185 * x68;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2187 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2187 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2188 = x2187 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2189 = x2186 + x2188;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2190 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x2190 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2191 = x2189 + x2190;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2192 = x2191 * x57;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2193 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2193 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2194 = x2193 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2195 = x2192 + x2194;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2196 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2196 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2197 = x2195 + x2196;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2198 = x2134 - x2197;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2198 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2199 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x2199 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2200 = x2199 * x62;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2201 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x2201 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2202 = x2201 * x75;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2203 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2203 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2204 = x2202 + x2203;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2205 = x2204 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2206 = x2200 + x2205;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2207 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2207 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2208 = x2207 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2209 = x2206 + x2208;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2210 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2210 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2211 = x2209 + x2210;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2212 = x2133 - x2211;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2212 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2213 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x2213 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2214 = x2213 * x62;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2215 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x2215 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2216 = x2214 + x2215;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2217 = x2132 - x2216;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2217 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2132;
        host_args.at(1) = x2133;
        host_args.at(2) = x2134;
        host_args.at(3) = x2135;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2218 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2219 = (x2218 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2219);
            reg = x2219;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2220 = x2218 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2221 = (x2220 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2221);
            reg = x2221;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2222 = x2218 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2223 = (x2222 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2223);
            reg = x2223;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2224 = x2218 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2225 = (x2224 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2225);
            reg = x2225;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2226 = x2218 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2227 = (x2226 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2227);
            reg = x2227;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2228 = x2218 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2229 = (x2228 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2229);
            reg = x2229;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2230 = x2218 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2231 = (x2230 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2231);
            reg = x2231;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2232 = x2218 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2233 = (x2232 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2233);
            reg = x2233;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2234 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2234 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2235 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2235 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2236 = x2235 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2237 = x2234 + x2236;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2238 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2238 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2239 = x2238 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2240 = x2237 + x2239;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2241 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2241 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2242 = x2241 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2243 = x2240 + x2242;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2244 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2244 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2245 = x2244 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2246 = x2243 + x2245;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2247 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2247 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2248 = x2247 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2249 = x2246 + x2248;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2250 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x2250 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2251 = x2250 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2252 = x2249 + x2251;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x2253 = x2252 - x2218;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x2253 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2254 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x2254 != Fp::invalid());
        if (x2254 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2255 = x2175 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2256 = x2178 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2257 = x2255 + x2256;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2258 = x2207 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2259 = x2257 + x2258;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2260 = x2210 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2261 = x2259 + x2260;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2262 = x2168 * x41;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2263 = x2213 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2264 = x2262 + x2263;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2265 = x2170 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2266 = x2264 + x2265;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2267 = x2266 + x2172;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2268 = x2168 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2261);
            reg = x2261;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2267);
            reg = x2267;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2268);
            reg = x2268;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2268);
            reg = x2268;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2269 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2269 != Fp::invalid());
        if (x2269 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2270 = x2175 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2271 = x2178 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2272 = x2270 + x2271;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2273 = x2207 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2274 = x2272 + x2273;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2275 = x2210 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2276 = x2274 + x2275;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2277 = x2168 * x41;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2278 = x2213 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2279 = x2277 + x2278;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2280 = x2170 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2281 = x2279 + x2280;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2282 = x2281 + x2172;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2283 = x2168 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2276);
            reg = x2276;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2282);
            reg = x2282;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2283);
            reg = x2283;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2283);
            reg = x2283;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2284 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2284 != Fp::invalid());
        if (x2284 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2285 = x2175 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2286 = x2178 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2287 = x2285 + x2286;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2288 = x2207 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2289 = x2287 + x2288;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2290 = x2210 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2291 = x2289 + x2290;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2292 = x2168 * x41;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2293 = x2213 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2294 = x2292 + x2293;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2295 = x2170 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2296 = x2294 + x2295;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2297 = x2296 + x2172;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2298 = x2168 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2291);
            reg = x2291;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2297);
            reg = x2297;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2298);
            reg = x2298;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2298);
            reg = x2298;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x49);
            reg = x49;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2299 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2299 != Fp::invalid());
        if (x2299 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2300 = x2175 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
          auto x2301 = x2178 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2302 = x2300 + x2301;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2303 = x2182 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2304 = x2303 + x2191;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2305 = x2302 + x2304;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2306 = x2305 - x2190;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
          auto x2307 = x2190 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2308 = x2206 + x2307;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
          auto x2309 = x2170 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2310 = x2308 + x2309;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2311 = x2310 + x2172;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2312 = x2168 * x41;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2313 = x2312 + x2194;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2314 = x2313 + x2196;
          // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
          auto x2315 = x2168 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2306);
            reg = x2306;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2311);
            reg = x2311;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2314);
            reg = x2314;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2315);
            reg = x2315;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2316 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2316 != Fp::invalid());
        if (x2316 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2317 = x2175 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2318 = x2178 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2319 = x2317 + x2318;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2320 = x2182 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2321 = x2320 + x2191;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2322 = x2319 + x2321;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2323 = x2168 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2324 = x2170 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2325 = x2323 + x2324;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2326 = x2325 + x2172;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2327 = x2168 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2322);
            reg = x2322;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2326);
            reg = x2326;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2327);
            reg = x2327;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2327);
            reg = x2327;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2328 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2328 != Fp::invalid());
        if (x2328 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2206);
            reg = x2206;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2197);
            reg = x2197;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2183);
            reg = x2183;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
        auto x2329 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2329 != Fp::invalid());
        if (x2329 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2206);
            reg = x2206;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2197);
            reg = x2197;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2183);
            reg = x2183;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2330 = x2193 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x2331 = x2196 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2332 = x2330 + x2331;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2333 = x2332 + x2199;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x2334 = x2333 + x46;
      {
        host_args.at(0) = x2334;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2335 = host_outs.at(0);
        auto x2336 = host_outs.at(1);
        auto x2337 = host_outs.at(2);
        auto x2338 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2335);
          reg = x2335;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2336);
          reg = x2336;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2337);
          reg = x2337;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2338);
          reg = x2338;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2339 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2339 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2340 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2340 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2341 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2341 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2342 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2342 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2334);
        reg = x2334;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2126);
        reg = x2126;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2339);
        reg = x2339;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2340);
        reg = x2340;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2341);
        reg = x2341;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2342);
        reg = x2342;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2343 = x2182 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2344 = x2343 + x2191;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x2345 = x2344 + x46;
      {
        host_args.at(0) = x2345;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2346 = host_outs.at(0);
        auto x2347 = host_outs.at(1);
        auto x2348 = host_outs.at(2);
        auto x2349 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2346);
          reg = x2346;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2347);
          reg = x2347;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2348);
          reg = x2348;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2349);
          reg = x2349;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2350 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2350 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2351 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2351 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2352 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2352 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2353 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x2353 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2345);
        reg = x2345;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2126);
        reg = x2126;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2350);
        reg = x2350;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2351);
        reg = x2351;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2352);
        reg = x2352;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2353);
        reg = x2353;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2354 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2354 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2355 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2355 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2356 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2356 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2357 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2357 != Fp::invalid());
      host_args.at(0) = x2354;
      host_args.at(1) = x2355;
      host_args.at(2) = x2356;
      host_args.at(3) = x2357;
      host_args.at(4) = x2333;
      host_args.at(5) = x2339;
      host_args.at(6) = x2340;
      host_args.at(7) = x2341;
      host_args.at(8) = x2342;
      host_args.at(9) = x2344;
      host_args.at(10) = x2350;
      host_args.at(11) = x2351;
      host_args.at(12) = x2352;
      host_args.at(13) = x2353;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2358 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2358 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x2359 = x93 - x2358;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2360 = x2359 * x2339;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2361 = x2359 * x2340;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2362 = x2359 * x2341;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2363 = x2359 * x2342;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x2364 = x593 * x75;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x2365 = x590 + x2364;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x2366 = x583 - x75;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2367 = x2358 * x2366;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2368 = x2358 * x584;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2369 = x2358 * x587;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2370 = x2358 * x2365;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2371 = x2360 + x2367;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2372 = x2361 + x2368;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2373 = x2362 + x2369;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2374 = x2363 + x2370;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2375 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2375 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x2376 = x93 - x2375;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2377 = x2376 * x2350;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2378 = x2376 * x2351;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2379 = x2376 * x2352;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2380 = x2376 * x2353;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2381 = x2375 * x2354;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2382 = x2375 * x2355;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2383 = x2375 * x2356;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2384 = x2375 * x2357;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2385 = x2377 + x2381;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2386 = x2378 + x2382;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2387 = x2379 + x2383;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2388 = x2380 + x2384;
      host_args.at(0) = x2371;
      host_args.at(1) = x2372;
      host_args.at(2) = x2373;
      host_args.at(3) = x2374;
      host_args.at(4) = x2385;
      host_args.at(5) = x2386;
      host_args.at(6) = x2387;
      host_args.at(7) = x2388;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2389 = Fp(x2374.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2390 = x2389 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2390);
          reg = x2390;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2391 = Fp(x2374.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2392 = x2391 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2392);
          reg = x2392;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2393 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2393 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2394 = x2393 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x2395 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x2395 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2396 = x2395 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2397 = x2394 + x2396;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2398 = x2374 - x2397;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2398 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2399 = Fp(x2388.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2400 = x2399 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2400);
          reg = x2400;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2401 = Fp(x2388.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2402 = x2401 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2402);
          reg = x2402;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2403 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x2403 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2404 = x2403 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x2405 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2405 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2406 = x2405 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2407 = x2404 + x2406;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2408 = x2388 - x2407;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2408 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2385);
        reg = x2385;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2386);
        reg = x2386;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2387);
        reg = x2387;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2388);
        reg = x2388;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2409 = Fp(x2371.asUInt32() & x2385.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2410 = Fp(x2372.asUInt32() & x2386.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2411 = Fp(x2373.asUInt32() & x2387.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2412 = Fp(x2374.asUInt32() & x2388.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2409);
          reg = x2409;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2410);
          reg = x2410;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2411);
          reg = x2411;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2412);
          reg = x2412;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2413 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2413 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2414 = x2413 * x2371;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2415 = x2413 * x2372;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2416 = x2413 * x2373;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2417 = x2413 * x2374;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2418 = x2414 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2419 = x2415 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2420 = x2416 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2421 = x2417 + x89;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2422 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2422 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2423 = x2422 * x2385;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2424 = x2422 * x2386;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2425 = x2422 * x2387;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2426 = x2422 * x2388;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2427 = x2418 + x2423;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2428 = x2419 + x2424;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2429 = x2420 + x2425;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2430 = x2421 + x2426;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2431 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2431 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2432 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2432 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2433 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2433 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2434 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2434 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2435 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x2435 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2436 = x2431 * x2432;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2437 = x2431 * x2433;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2438 = x2431 * x2434;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2439 = x2431 * x2435;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2440 = x2427 + x2436;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2441 = x2428 + x2437;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2442 = x2429 + x2438;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2443 = x2430 + x2439;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x2444 = x2441 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x2445 = x2440 + x2444;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2446 = Fp(x2445.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2446);
          reg = x2446;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2447 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2447 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2448 = x2445 - x2447;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2449 = x2448 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2450 = Fp(x2449.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2450);
          reg = x2450;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2451 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2451 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2452 = x2449 - x2451;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2453 = x2452 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2453);
        reg = x2453;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2454 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2454 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2455 = x2454 + x2442;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x2456 = x2443 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2457 = x2455 + x2456;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2458 = Fp(x2457.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2458);
          reg = x2458;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2459 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2459 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2460 = x2457 - x2459;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2461 = x2460 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2462 = Fp(x2461.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2462);
          reg = x2462;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2463 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2463 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2464 = x2461 - x2463;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2465 = x2464 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2465);
        reg = x2465;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2466 = Fp(x2463.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2467 = x2466 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2467);
          reg = x2467;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2468 = Fp(x2463.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2469 = x2468 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2469);
          reg = x2469;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2470 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2470 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2471 = x2470 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x2472 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2472 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2473 = x2472 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2474 = x2471 + x2473;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2475 = x2463 - x2474;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2475 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2476 = x93 - x2403;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2477 = x2393 * x2476;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2478 = x93 - x2470;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2479 = x2477 * x2478;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2480 = x93 - x2393;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2481 = x2480 * x2403;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2482 = x2481 * x2470;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2483 = x2479 + x2482;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2483);
        reg = x2483;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2484 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2484 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2485 = x2484 + x2470;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2486 = x2484 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2487 = x2486 * x2470;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2488 = x2485 - x2487;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2488);
        reg = x2488;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x2489 = x2451 * x88;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x2490 = x2447 + x2489;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2491 = (x2490 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2491);
          reg = x2491;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2492 = inv(x2490);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2492);
          reg = x2492;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2493 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x2493 != Fp::invalid());
      if (x2493 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2490 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2494 = x93 - x2493;
      if (x2494 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2495 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x2495 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2496 = x2490 * x2495;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2497 = x2496 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2497 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x2498 = x2463 * x88;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2499 = x2459 + x2498;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x2500 = x2494 * x77;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2501 = x2499 + x2500;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2502 = (x2501 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2502);
          reg = x2502;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2503 = inv(x2501);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2503);
          reg = x2503;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2504 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x2504 != Fp::invalid());
      if (x2504 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2501 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2505 = x93 - x2504;
      if (x2505 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2506 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x2506 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2507 = x2501 * x2506;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2508 = x2507 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2508 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2509 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x2509 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2510 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x2510 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2511 = x93 - x2510;
      host_args.at(0) = x2447;
      host_args.at(1) = x2451;
      host_args.at(2) = x2459;
      host_args.at(3) = x2463;
      host_args.at(4) = x2504;
      host_args.at(5) = x2509;
      host_args.at(6) = x2511;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2512 = x2207 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2513 = x2210 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2514 = x2512 + x2513;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2515 = x2514 + x2213;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2516 = (x2515 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2516);
          reg = x2516;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2517 = inv(x2515);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2517);
          reg = x2517;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2518 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x2518 != Fp::invalid());
      if (x2518 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2515 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2519 = x93 - x2518;
      if (x2519 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2520 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x2520 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2521 = x2515 * x2520;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2522 = x2521 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2522 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x2523 = x596 + x75;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x2524 = x2355 * x88;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2525 = x2354 + x2524;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x2526 = x2356 * x77;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2527 = x2525 + x2526;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x2528 = x2357 * x45;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x2529 = x2528 * x44;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x2530 = x2527 + x2529;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x2531 = x596 + x2530;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:57)
      auto x2532 = x2459 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2533 = x2490 + x2532;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:14)
      auto x2534 = x2463 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2535 = x2533 + x2534;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2536 = x2509 * x2523;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:35)
      auto x2537 = x93 - x2509;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:34)
      auto x2538 = x2537 * x2531;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2539 = x2536 + x2538;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2540 = x2511 * x2531;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:38)
      auto x2541 = x93 - x2511;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:37)
      auto x2542 = x2541 * x2523;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2543 = x2540 + x2542;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2544 = x2511 * x2523;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:36)
      auto x2545 = x2541 * x2531;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2546 = x2544 + x2545;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2547 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2547 != Fp::invalid());
      if (x2547 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2548 = x2215 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2548 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2549 = x2204 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2549 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2550 = x2175 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2551 = x2178 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2552 = x2550 + x2551;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2553 = x2552 + x2512;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2554 = x2553 + x2513;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2555 = x2168 * x41;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2556 = x2213 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2557 = x2555 + x2556;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2558 = x2170 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2559 = x2557 + x2558;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2560 = x2559 + x2172;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2561 = x2168 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2554);
          reg = x2554;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2560);
          reg = x2560;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2561);
          reg = x2561;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2561);
          reg = x2561;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2562 = x2539 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2563 = Fp(x2562.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2563);
            reg = x2563;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2564 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2564 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2565 = x2562 - x2564;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2566 = x2565 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2567 = Fp(x2566.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2567);
            reg = x2567;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2568 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2568 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2569 = x2566 - x2568;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2570 = x2569 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2571 = Fp(x2570.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2571);
            reg = x2571;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2572 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2572 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2573 = x2570 - x2572;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2574 = x2573 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2575 = Fp(x2574.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2575);
            reg = x2575;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2576 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2576 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2577 = x2574 - x2576;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2578 = x2577 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2578);
          reg = x2578;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2579 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2579 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2580 = x93 - x2579;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2581 = x2579 * x2580;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2581);
          reg = x2581;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2582 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2582 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2583 = x90 - x2579;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2584 = x2582 * x2583;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2584 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2585 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2585 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2585);
          reg = x2585;
        }
        if (x92 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2586 = x2515 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2447);
            reg = x2447;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2451);
            reg = x2451;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2459);
            reg = x2459;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2463);
            reg = x2463;
          }
          {
            host_args.at(0) = x2586;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2587 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2587 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2588 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2588 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2589 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2589 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2590 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2590 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2586);
            reg = x2586;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2587);
            reg = x2587;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2588);
            reg = x2588;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2589);
            reg = x2589;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2590);
            reg = x2590;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2591 = x2518 + x93;
        if (x2591 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2592 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2592 != Fp::invalid());
      if (x2592 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2593 = x2215 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2593 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2594 = x2204 - x70;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2594 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2595 = x2175 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2596 = x2178 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2597 = x2595 + x2596;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2598 = x2597 + x2512;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2599 = x2598 + x2513;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2600 = x2168 * x41;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2601 = x2213 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2602 = x2600 + x2601;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2603 = x2170 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2604 = x2602 + x2603;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2605 = x2604 + x2172;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2606 = x2168 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2599);
          reg = x2599;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2605);
          reg = x2605;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2606);
          reg = x2606;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2606);
          reg = x2606;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2607 = x2543 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2608 = Fp(x2607.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2608);
            reg = x2608;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2609 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2609 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2610 = x2607 - x2609;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2611 = x2610 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2612 = Fp(x2611.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2612);
            reg = x2612;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2613 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2613 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2614 = x2611 - x2613;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2615 = x2614 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2616 = Fp(x2615.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2616);
            reg = x2616;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2617 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2617 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2618 = x2615 - x2617;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2619 = x2618 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2620 = Fp(x2619.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2620);
            reg = x2620;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2621 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2621 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2622 = x2619 - x2621;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2623 = x2622 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2623);
          reg = x2623;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2624 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2624 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2625 = x93 - x2624;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2626 = x2624 * x2625;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2626);
          reg = x2626;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2627 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2627 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2628 = x90 - x2624;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2629 = x2627 * x2628;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2629 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2630 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2630 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2630);
          reg = x2630;
        }
        if (x92 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2631 = x2515 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2447);
            reg = x2447;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2451);
            reg = x2451;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2459);
            reg = x2459;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2463);
            reg = x2463;
          }
          {
            host_args.at(0) = x2631;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2632 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2632 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2633 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2633 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2634 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2634 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2635 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2635 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2631);
            reg = x2631;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2632);
            reg = x2632;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2633);
            reg = x2633;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2634);
            reg = x2634;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2635);
            reg = x2635;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2636 = x2518 + x93;
        if (x2636 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2637 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2637 != Fp::invalid());
      if (x2637 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2638 = x2215 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2638 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2639 = x2204 - x69;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2639 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2640 = x2175 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2641 = x2178 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2642 = x2640 + x2641;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2643 = x2642 + x2512;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2644 = x2643 + x2513;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2645 = x2168 * x41;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2646 = x2213 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2647 = x2645 + x2646;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2648 = x2170 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2649 = x2647 + x2648;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2650 = x2649 + x2172;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2651 = x2168 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2644);
          reg = x2644;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2650);
          reg = x2650;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2651);
          reg = x2651;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2651);
          reg = x2651;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x49);
          reg = x49;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2652 = x2546 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2653 = Fp(x2652.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2653);
            reg = x2653;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2654 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2654 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2655 = x2652 - x2654;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2656 = x2655 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2657 = Fp(x2656.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2657);
            reg = x2657;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2658 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2658 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2659 = x2656 - x2658;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2660 = x2659 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2661 = Fp(x2660.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2661);
            reg = x2661;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2662 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2662 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2663 = x2660 - x2662;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2664 = x2663 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2665 = Fp(x2664.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2665);
            reg = x2665;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2666 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2666 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2667 = x2664 - x2666;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2668 = x2667 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2668);
          reg = x2668;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2669 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2669 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2670 = x93 - x2669;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2671 = x2669 * x2670;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2671);
          reg = x2671;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2672 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2672 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2673 = x90 - x2669;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2674 = x2672 * x2673;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2674 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2675 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2675 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2675);
          reg = x2675;
        }
        if (x92 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2676 = x2515 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2447);
            reg = x2447;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2451);
            reg = x2451;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2459);
            reg = x2459;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2463);
            reg = x2463;
          }
          {
            host_args.at(0) = x2676;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2677 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2677 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2678 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2678 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2679 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2679 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2680 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2680 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2676);
            reg = x2676;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2677);
            reg = x2677;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2678);
            reg = x2678;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2679);
            reg = x2679;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2680);
            reg = x2680;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2681 = x2518 + x93;
        if (x2681 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2682 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2682 != Fp::invalid());
      if (x2682 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2683 = x2215 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2683 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2684 = x2175 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
        auto x2685 = x2178 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2686 = x2684 + x2685;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2687 = x2686 + x2344;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2688 = x2687 - x2190;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
        auto x2689 = x2190 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2690 = x2206 + x2689;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
        auto x2691 = x2170 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2692 = x2690 + x2691;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2693 = x2692 + x2172;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2694 = x2168 * x41;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2695 = x2694 + x2194;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2696 = x2695 + x2196;
        // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
        auto x2697 = x2168 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2688);
          reg = x2688;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2693);
          reg = x2693;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2696);
          reg = x2696;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2697);
          reg = x2697;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2698 = x2531 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2699 = Fp(x2698.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2699);
            reg = x2699;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2700 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2700 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2701 = x2698 - x2700;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2702 = x2701 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2703 = Fp(x2702.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2703);
            reg = x2703;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2704 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2704 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2705 = x2702 - x2704;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2706 = x2705 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2707 = Fp(x2706.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2707);
            reg = x2707;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2708 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2708 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2709 = x2706 - x2708;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2710 = x2709 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2711 = Fp(x2710.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2711);
            reg = x2711;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2712 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2712 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2713 = x2710 - x2712;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2714 = x2713 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2714);
          reg = x2714;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2715 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2715 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2716 = x93 - x2715;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2717 = x2715 * x2716;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2717);
          reg = x2717;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2718 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2718 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2719 = x90 - x2715;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2720 = x2718 * x2719;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2720 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2721 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2721 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2721);
          reg = x2721;
        }
        if (x2519 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x583;
          host_args.at(2) = x584;
          host_args.at(3) = x587;
          host_args.at(4) = x2365;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x2722 = x2515 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x583);
            reg = x583;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x584);
            reg = x584;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x587);
            reg = x587;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2365);
            reg = x2365;
          }
          {
            host_args.at(0) = x2722;
            host_args.at(1) = x583;
            host_args.at(2) = x584;
            host_args.at(3) = x587;
            host_args.at(4) = x2365;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2723 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2723 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2724 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2724 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2725 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2725 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2726 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2726 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2722);
            reg = x2722;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2723);
            reg = x2723;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2724);
            reg = x2724;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2725);
            reg = x2725;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2726);
            reg = x2726;
          }
        }
        if (x2518 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x2727 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2727 != Fp::invalid());
      if (x2727 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2728 = x2215 - x38;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2728 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2204 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2729 = x2175 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2730 = x2178 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2731 = x2729 + x2730;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2732 = x2731 + x2344;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2733 = x2168 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2734 = x2170 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2735 = x2733 + x2734;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2736 = x2735 + x2172;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2737 = x2168 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2732);
          reg = x2732;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2736);
          reg = x2736;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2737);
          reg = x2737;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2737);
          reg = x2737;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2738 = x2535 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2739 = Fp(x2738.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2739);
            reg = x2739;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2740 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2740 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2741 = x2738 - x2740;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2742 = x2741 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2743 = Fp(x2742.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2743);
            reg = x2743;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2744 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2744 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2745 = x2742 - x2744;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2746 = x2745 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2747 = Fp(x2746.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2747);
            reg = x2747;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2748 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2748 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2749 = x2746 - x2748;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2750 = x2749 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2751 = Fp(x2750.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2751);
            reg = x2751;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2752 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2752 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2753 = x2750 - x2752;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2754 = x2753 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2754);
          reg = x2754;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2755 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2755 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2756 = x93 - x2755;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2757 = x2755 * x2756;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2757);
          reg = x2757;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2758 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2758 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2759 = x90 - x2755;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2760 = x2758 * x2759;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2760 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2761 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2761 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2761);
          reg = x2761;
        }
        if (x2519 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x583;
          host_args.at(2) = x584;
          host_args.at(3) = x587;
          host_args.at(4) = x2365;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x2762 = x2515 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x583);
            reg = x583;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x584);
            reg = x584;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x587);
            reg = x587;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2365);
            reg = x2365;
          }
          {
            host_args.at(0) = x2762;
            host_args.at(1) = x583;
            host_args.at(2) = x584;
            host_args.at(3) = x587;
            host_args.at(4) = x2365;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2763 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2763 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2764 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2764 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2765 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2765 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2766 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2766 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2762);
            reg = x2762;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2763);
            reg = x2763;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2764);
            reg = x2764;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2765);
            reg = x2765;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2766);
            reg = x2766;
          }
        }
        if (x2518 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x2767 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2767 != Fp::invalid());
      if (x2767 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2768 = x2215 - x37;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2768 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2206);
          reg = x2206;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2197);
          reg = x2197;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2183);
          reg = x2183;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2769 = x2523 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2770 = Fp(x2769.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2770);
            reg = x2770;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2771 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2771 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2772 = x2769 - x2771;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2773 = x2772 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2774 = Fp(x2773.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2774);
            reg = x2774;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2775 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2775 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2776 = x2773 - x2775;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2777 = x2776 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2778 = Fp(x2777.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2778);
            reg = x2778;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2779 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2779 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2780 = x2777 - x2779;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2781 = x2780 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2782 = Fp(x2781.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2782);
            reg = x2782;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2783 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2783 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2784 = x2781 - x2783;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2785 = x2784 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2785);
          reg = x2785;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2786 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2786 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2787 = x93 - x2786;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2788 = x2786 * x2787;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2788);
          reg = x2788;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2789 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2789 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2790 = x90 - x2786;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2791 = x2789 * x2790;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2791 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2792 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2792 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2792);
          reg = x2792;
        }
        if (x2519 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x2793 = x2515 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2447);
            reg = x2447;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2451);
            reg = x2451;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2459);
            reg = x2459;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2463);
            reg = x2463;
          }
          {
            host_args.at(0) = x2793;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2794 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2794 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2795 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2795 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2796 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2796 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2797 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2797 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2793);
            reg = x2793;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2794);
            reg = x2794;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2795);
            reg = x2795;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2796);
            reg = x2796;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2797);
            reg = x2797;
          }
        }
        if (x2518 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
      auto x2798 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2798 != Fp::invalid());
      if (x2798 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        auto x2799 = x2215 - x36;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        if (x2799 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:60");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2206);
          reg = x2206;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2197);
          reg = x2197;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2183);
          reg = x2183;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2800 = x2523 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2801 = Fp(x2800.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2801);
            reg = x2801;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2802 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2802 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2803 = x2800 - x2802;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2804 = x2803 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2805 = Fp(x2804.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2805);
            reg = x2805;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2806 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2806 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2807 = x2804 - x2806;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2808 = x2807 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2809 = Fp(x2808.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2809);
            reg = x2809;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2810 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2810 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2811 = x2808 - x2810;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2812 = x2811 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2813 = Fp(x2812.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2813);
            reg = x2813;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2814 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2814 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2815 = x2812 - x2814;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2816 = x2815 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2816);
          reg = x2816;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2817 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2817 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2818 = x93 - x2817;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2819 = x2817 * x2818;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2819);
          reg = x2819;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2820 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2820 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2821 = x90 - x2817;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2822 = x2820 * x2821;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2822 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2823 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2823 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2823);
          reg = x2823;
        }
        if (x2519 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
          auto x2824 = x2515 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2447);
            reg = x2447;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2451);
            reg = x2451;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2459);
            reg = x2459;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2463);
            reg = x2463;
          }
          {
            host_args.at(0) = x2824;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2825 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2825 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2826 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2826 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2827 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2827 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2828 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2828 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2824);
            reg = x2824;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2825);
            reg = x2825;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2826);
            reg = x2826;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2827);
            reg = x2827;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2828);
            reg = x2828;
          }
        }
        if (x2518 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":39:25))
    auto x2829 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x2829 != Fp::invalid());
    if (x2829 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2830 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2830 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":20:41)
      auto x2831 = x596 * x73;
      {
        host_args.at(0) = x2831;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2832 = host_outs.at(0);
        auto x2833 = host_outs.at(1);
        auto x2834 = host_outs.at(2);
        auto x2835 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2832);
          reg = x2832;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2833);
          reg = x2833;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2834);
          reg = x2834;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2835);
          reg = x2835;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2836 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2837 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2838 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2839 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2839 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2831);
        reg = x2831;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2830);
        reg = x2830;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2836);
        reg = x2836;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2837);
        reg = x2837;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2838);
        reg = x2838;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2839);
        reg = x2839;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2840 = Fp(x2839.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2841 = x2840 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2841);
          reg = x2841;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2842 = Fp(x2839.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2843 = x2842 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2843);
          reg = x2843;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2844 = Fp(x2839.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2845 = x2844 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2845);
          reg = x2845;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2846 = Fp(x2839.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2847 = x2846 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2848 = Fp(x2839.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2849 = x2848 * x54;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2849);
          reg = x2849;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2850 = Fp(x2839.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2850);
          reg = x2850;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2851 = Fp(x2838.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2852 = x2851 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2852);
          reg = x2852;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2853 = Fp(x2838.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2854 = x2853 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2854);
          reg = x2854;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2855 = Fp(x2838.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2856 = x2855 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2856);
          reg = x2856;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2857 = Fp(x2838.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2858 = x2857 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2858);
          reg = x2858;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2859 = Fp(x2838.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2859);
          reg = x2859;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2860 = Fp(x2837.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2861 = x2860 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2861);
          reg = x2861;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2862 = Fp(x2837.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2863 = x2862 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2863);
          reg = x2863;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2864 = Fp(x2837.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2865 = x2864 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2865);
          reg = x2865;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2866 = Fp(x2837.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2867 = x2866 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2867);
          reg = x2867;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2868 = Fp(x2837.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2868);
          reg = x2868;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2869 = Fp(x2836.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2870 = x2869 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2870);
          reg = x2870;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2871 = Fp(x2836.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2871);
          reg = x2871;
        }
      }
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2872 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2872 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2873 = x2872 * x53;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2874 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2874 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2875 = x2874 * x57;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2876 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2876 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2877 = x2876 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2878 = x2875 + x2877;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2879 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2879 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2880 = x2879 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2881 = x2878 + x2880;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2882 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2882 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2883 = x2881 + x2882;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2884 = x2873 + x2883;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2885 = x2884 * x90;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2886 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2886 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2887 = x2885 + x2886;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2888 = x2839 - x2887;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2888 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2889 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2889 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2890 = x2889 * x68;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2891 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2891 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2892 = x2891 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2893 = x2890 + x2892;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2894 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2894 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2895 = x2893 + x2894;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2896 = x2895 * x57;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2897 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2897 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2898 = x2897 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2899 = x2896 + x2898;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2900 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2900 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2901 = x2899 + x2900;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2902 = x2838 - x2901;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2902 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2903 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2903 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2904 = x2903 * x62;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2905 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2905 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2906 = x2905 * x75;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2907 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2907 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2908 = x2906 + x2907;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2909 = x2908 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2910 = x2904 + x2909;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2911 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2911 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2912 = x2911 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2913 = x2910 + x2912;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2914 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2914 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2915 = x2913 + x2914;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2916 = x2837 - x2915;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2916 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2917 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2917 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2918 = x2917 * x62;
      // loc("Top/Mux/4/Mux/3/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2919 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2919 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2920 = x2918 + x2919;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2921 = x2836 - x2920;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2921 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2836;
        host_args.at(1) = x2837;
        host_args.at(2) = x2838;
        host_args.at(3) = x2839;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2922 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2923 = (x2922 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2923);
            reg = x2923;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2924 = x2922 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2925 = (x2924 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2925);
            reg = x2925;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2926 = x2922 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2927 = (x2926 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2927);
            reg = x2927;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2928 = x2922 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2929 = (x2928 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2929);
            reg = x2929;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2930 = x2922 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2931 = (x2930 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2931);
            reg = x2931;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2932 = x2922 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2933 = (x2932 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2933);
            reg = x2933;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2934 = x2922 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2935 = (x2934 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2935);
            reg = x2935;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2936 = x2922 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2937 = (x2936 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2937);
            reg = x2937;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2938 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2938 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2939 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2939 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2940 = x2939 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2941 = x2938 + x2940;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2942 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x2942 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2943 = x2942 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2944 = x2941 + x2943;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2945 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x2945 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2946 = x2945 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2947 = x2944 + x2946;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2948 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x2948 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2949 = x2948 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2950 = x2947 + x2949;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2951 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x2951 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2952 = x2951 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2953 = x2950 + x2952;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2954 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2954 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2955 = x2954 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2956 = x2953 + x2955;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x2957 = x2956 - x2922;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x2957 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x2958 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x2958 != Fp::invalid());
        if (x2958 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2959 = x2879 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2960 = x2882 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2961 = x2959 + x2960;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2962 = x2886 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2963 = x2962 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2964 = x2961 + x2963;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2965 = x2872 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2966 = x2874 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2967 = x2965 + x2966;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2968 = x2967 + x2876;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2969 = x2872 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2964);
            reg = x2964;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2968);
            reg = x2968;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2969);
            reg = x2969;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2969);
            reg = x2969;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x2970 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2970 != Fp::invalid());
        if (x2970 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2971 = x2879 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2972 = x2882 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2973 = x2971 + x2972;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2974 = x2886 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2975 = x2974 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2976 = x2973 + x2975;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2977 = x2872 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2978 = x2874 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2979 = x2977 + x2978;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2980 = x2979 + x2876;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2981 = x2872 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2976);
            reg = x2976;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2980);
            reg = x2980;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2981);
            reg = x2981;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2981);
            reg = x2981;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x2982 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2982 != Fp::invalid());
        if (x2982 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2983 = x2879 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2984 = x2882 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2985 = x2983 + x2984;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2986 = x2886 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2987 = x2986 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2988 = x2985 + x2987;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2989 = x2872 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2990 = x2874 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2991 = x2989 + x2990;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2992 = x2991 + x2876;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2993 = x2872 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2988);
            reg = x2988;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2992);
            reg = x2992;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2993);
            reg = x2993;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2993);
            reg = x2993;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x2994 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x2994 != Fp::invalid());
        if (x2994 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2995 = x2879 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2996 = x2882 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2997 = x2995 + x2996;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2998 = x2886 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2999 = x2998 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3000 = x2997 + x2999;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3001 = x2872 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3002 = x2874 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3003 = x3001 + x3002;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3004 = x3003 + x2876;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3005 = x2872 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3000);
            reg = x3000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3004);
            reg = x3004;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3005);
            reg = x3005;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3005);
            reg = x3005;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3006 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3006 != Fp::invalid());
        if (x3006 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3007 = x2879 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3008 = x2882 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3009 = x3007 + x3008;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3010 = x2886 * x57;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3011 = x3010 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3012 = x3009 + x3011;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3013 = x2872 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3014 = x2874 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3015 = x3013 + x3014;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3016 = x3015 + x2876;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3017 = x2872 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3012);
            reg = x3012;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3016);
            reg = x3016;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3017);
            reg = x3017;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3017);
            reg = x3017;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3018 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3018 != Fp::invalid());
        if (x3018 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3019 = x2879 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3020 = x2882 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3021 = x3019 + x3020;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3022 = x2911 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3023 = x2914 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3024 = x3022 + x3023;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3025 = x3024 + x2917;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3026 = x3021 + x3025;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3027 = x2872 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3028 = x2874 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3029 = x3027 + x3028;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3030 = x3029 + x2876;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3031 = x2872 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3026);
            reg = x3026;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3030);
            reg = x3030;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3031);
            reg = x3031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3031);
            reg = x3031;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3032 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3032 != Fp::invalid());
        if (x3032 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3033 = x2879 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3034 = x2882 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3035 = x3033 + x3034;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3036 = x2911 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3037 = x2914 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3038 = x3036 + x3037;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3039 = x3038 + x2917;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3040 = x3035 + x3039;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3041 = x2872 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3042 = x2874 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3043 = x3041 + x3042;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3044 = x3043 + x2876;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3045 = x2872 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3040);
            reg = x3040;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3044);
            reg = x3044;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3045);
            reg = x3045;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3045);
            reg = x3045;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3046 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x3046 != Fp::invalid());
        if (x3046 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3047 = x2879 * x62;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3048 = x2882 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3049 = x3047 + x3048;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3050 = x2911 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3051 = x2914 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3052 = x3050 + x3051;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3053 = x3052 + x2917;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3054 = x3049 + x3053;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3055 = x2872 * x47;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3056 = x2874 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3057 = x3055 + x3056;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3058 = x3057 + x2876;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3059 = x2872 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3054);
            reg = x3054;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3058);
            reg = x3058;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3059);
            reg = x3059;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3059);
            reg = x3059;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3060 = x2897 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3061 = x2900 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3062 = x3060 + x3061;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3063 = x3062 + x2903;
      // loc("cirgen/circuit/rv32im/memio.cpp":38:39)
      auto x3064 = x3063 + x46;
      {
        host_args.at(0) = x3064;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3065 = host_outs.at(0);
        auto x3066 = host_outs.at(1);
        auto x3067 = host_outs.at(2);
        auto x3068 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3065);
          reg = x3065;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3066);
          reg = x3066;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3067);
          reg = x3067;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3068);
          reg = x3068;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3069 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3069 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3070 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3070 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3071 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3071 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3072 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3072 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3064);
        reg = x3064;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2830);
        reg = x2830;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3069);
        reg = x3069;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3070);
        reg = x3070;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3071);
        reg = x3071;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3072);
        reg = x3072;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3073 = x2886 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3074 = x3073 + x2895;
      // loc("cirgen/circuit/rv32im/memio.cpp":39:39)
      auto x3075 = x3074 + x46;
      {
        host_args.at(0) = x3075;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3076 = host_outs.at(0);
        auto x3077 = host_outs.at(1);
        auto x3078 = host_outs.at(2);
        auto x3079 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3076);
          reg = x3076;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3077);
          reg = x3077;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3078);
          reg = x3078;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3079);
          reg = x3079;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3080 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3080 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3081 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3081 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3082 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3082 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3083 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3083 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3075);
        reg = x3075;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2830);
        reg = x2830;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3080);
        reg = x3080;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3081);
        reg = x3081;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3082);
        reg = x3082;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3083);
        reg = x3083;
      }
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3084 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3084 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3085 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3085 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3086 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3086 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3087 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3087 != Fp::invalid());
      host_args.at(0) = x3084;
      host_args.at(1) = x3085;
      host_args.at(2) = x3086;
      host_args.at(3) = x3087;
      host_args.at(4) = x3063;
      host_args.at(5) = x3069;
      host_args.at(6) = x3070;
      host_args.at(7) = x3071;
      host_args.at(8) = x3072;
      host_args.at(9) = x3074;
      host_args.at(10) = x3080;
      host_args.at(11) = x3081;
      host_args.at(12) = x3082;
      host_args.at(13) = x3083;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3088 = x2911 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3089 = x2914 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3090 = x3088 + x3089;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3091 = x3090 + x2917;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3092 = (x3091 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3092);
          reg = x3092;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3093 = inv(x3091);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3093);
          reg = x3093;
        }
      }
      // loc("Top/Mux/4/Mux/3/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3094 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3094 != Fp::invalid());
      if (x3094 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3091 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x3095 = x93 - x3094;
      if (x3095 != 0) {
        // loc("Top/Mux/4/Mux/3/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3096 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3096 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3097 = x3091 * x3096;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3098 = x3097 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x3098 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":48:17)
        auto x3099 = x3069 + x3084;
        // loc("cirgen/circuit/rv32im/memio.cpp":49:18)
        auto x3100 = Fp(x3099.asUInt32() & x74.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3101 = (x3100 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3101);
            reg = x3101;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3102 = x3100 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3103 = (x3102 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3103);
            reg = x3103;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3104 = x3100 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3105 = (x3104 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3105);
            reg = x3105;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3106 = x3100 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3107 = (x3106 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3107);
            reg = x3107;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3108 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3108 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3109 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3109 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3110 = x3109 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3111 = x3108 + x3110;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3112 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3112 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3113 = x3112 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3114 = x3111 + x3113;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3115 = x3114 - x3100;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3115 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("cirgen/circuit/rv32im/memio.cpp":50:20)
        auto x3116 = Fp(x3099.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":50:19)
        auto x3117 = x3116 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x3118 = Fp(x3117.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3118);
            reg = x3118;
          }
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3119 = x3099 - x3114;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3120 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x3120 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":51:33)
        auto x3121 = x3120 * x88;
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3122 = x3119 - x3121;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3122);
          reg = x3122;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":53:22)
        auto x3123 = x3122 * x73;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3123);
          reg = x3123;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3124 = x3070 + x3085;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3125 = x3124 + x3120;
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3126 = Fp(x3125.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3126);
          reg = x3126;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":56:25)
        auto x3127 = Fp(x3125.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:24)
        auto x3128 = x3127 * x87;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3128);
          reg = x3128;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3129 = x3071 + x3086;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3130 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3130 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3131 = x3129 + x3130;
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3132 = Fp(x3131.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3132);
          reg = x3132;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":59:25)
        auto x3133 = Fp(x3131.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":59:24)
        auto x3134 = x3133 * x87;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3134);
          reg = x3134;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3135 = x3072 + x3087;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3136 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3136 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3137 = x3135 + x3136;
        // loc("cirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3138 = Fp(x3137.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3138);
          reg = x3138;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":62:24)
        auto x3139 = Fp(x3137.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":62:23)
        auto x3140 = x3139 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3140);
          reg = x3140;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":63:20)
        auto x3141 = Fp(x3137.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":63:19)
        auto x3142 = x3141 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x3143 = Fp(x3142.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3143);
            reg = x3143;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3144 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3144 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3145 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":66:16)
      auto x3146 = x3145 * x75;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3147 = x3144 - x3146;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      if (x3147 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:66");
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3148 = x3069 + x3084;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3149 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3149 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3150 = x3149 * x88;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3151 = x3150 + x3144;
      // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3152 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3152 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3153 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3153 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3154 = x3153 * x90;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3155 = x3152 + x3154;
      // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3156 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3156 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3157 = x3156 * x74;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3158 = x3155 + x3157;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3159 = x3151 + x3158;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3160 = x3148 - x3159;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      if (x3160 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:68");
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3161 = x3070 + x3085;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3162 = x3161 + x3149;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3163 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3163 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3164 = x3163 * x88;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3165 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3165 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3166 = x3164 + x3165;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3167 = x3162 - x3166;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      if (x3167 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:70");
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3168 = x3071 + x3086;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3169 = x3168 + x3163;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3170 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3171 = x3170 * x88;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3172 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3173 = x3171 + x3172;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3174 = x3169 - x3173;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      if (x3174 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:72");
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3175 = x3072 + x3087;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3176 = x3175 + x3170;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3177 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3178 = x3177 * x88;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3179 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:63)
      auto x3180 = x3179 * x75;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3181 = x3178 + x3180;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3182 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3183 = x3181 + x3182;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3184 = x3176 - x3183;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      if (x3184 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:74");
      // loc("cirgen/circuit/rv32im/memio.cpp":77:15)
      auto x3185 = x93 - x3179;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3186 = x3179 * x3185;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:28)
      auto x3187 = x90 - x3179;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3188 = x3186 * x3187;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      if (x3188 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:77");
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3189 = x3179 * x76;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:41)
      auto x3190 = x3182 * x35;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3191 = x3189 + x3190;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:68)
      auto x3192 = x3172 * x34;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3193 = x3191 + x3192;
      // loc("cirgen/circuit/rv32im/memio.cpp":81:14)
      auto x3194 = x3165 * x53;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3195 = x3193 + x3194;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3196 = x3195 + x3145;
      {
        host_args.at(0) = x3196;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3197 = host_outs.at(0);
        auto x3198 = host_outs.at(1);
        auto x3199 = host_outs.at(2);
        auto x3200 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3197);
          reg = x3197;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3198);
          reg = x3198;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3199);
          reg = x3199;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3200);
          reg = x3200;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3201 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x3201 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3202 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3202 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3203 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3203 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3204 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3204 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3196);
        reg = x3196;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2830);
        reg = x2830;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3201);
        reg = x3201;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3202);
        reg = x3202;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3203);
        reg = x3203;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3204);
        reg = x3204;
      }
      host_args.at(0) = x3196;
      host_args.at(1) = x3158;
      host_args.at(2) = x3201;
      host_args.at(3) = x3202;
      host_args.at(4) = x3203;
      host_args.at(5) = x3204;
      host(ctx, "log", "  Addr = 0x%x, lowBits = %u, loaded = %w", host_args.data(), 6, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":85:17)
      auto x3205 = x596 + x75;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3206 = x3205 + x75;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3207 = Fp(x3206.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3207);
          reg = x3207;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3208 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3208 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3209 = x3206 - x3208;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3210 = x3209 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3211 = Fp(x3210.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3211);
          reg = x3211;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3212 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3212 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3213 = x3210 - x3212;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3214 = x3213 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3215 = Fp(x3214.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3215);
          reg = x3215;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3216 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3216 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3217 = x3214 - x3216;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3218 = x3217 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3219 = Fp(x3218.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3219);
          reg = x3219;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3220 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3220 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3221 = x3218 - x3220;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3222 = x3221 * x73;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3222);
        reg = x3222;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3223 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3223 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3224 = x93 - x3223;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x3225 = x3223 * x3224;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3225);
        reg = x3225;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3226 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x3226 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3227 = x90 - x3223;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x3228 = x3226 * x3227;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3228 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/memio.cpp":86:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
      auto x3229 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3229 != Fp::invalid());
      if (x3229 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3230 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3230 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3231 = x3230 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3231 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3232 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3232 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3233 = x3232 + x3153;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3234 = x3233 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3234 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3235 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3235 != Fp::invalid());
        if (x3235 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3236 = Fp(x3201.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3236);
              reg = x3236;
            }
          }
        }
        if (x3152 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3237 = Fp(x3202.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3237);
              reg = x3237;
            }
          }
        }
        if (x3153 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3238 = Fp(x3203.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3238);
              reg = x3238;
            }
          }
        }
        if (x3156 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3239 = Fp(x3204.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3239);
              reg = x3239;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3240 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3240 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3241 = Fp(x3240.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3242 = x3241 * x61;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3242);
            reg = x3242;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3243 = Fp(x3240.asUInt32() & x50.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3244 = x3243 * x90;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3244);
            reg = x3244;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3245 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3245 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3246 = x93 - x3245;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3247 = x3245 * x3246;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3247 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3248 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3248 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3249 = x3245 * x62;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3250 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3250 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3251 = x3250 * x54;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3252 = x3249 + x3251;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3253 = x3248 - x3252;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3253 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3254 = x3245 * x89;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3255 = x3235 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3256 = x3152 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3257 = x3255 + x3256;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3258 = x3153 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3259 = x3257 + x3258;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3260 = x3156 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3261 = x3259 + x3260;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3261);
          reg = x3261;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3254);
          reg = x3254;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3254);
          reg = x3254;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3254);
          reg = x3254;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3262 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3262 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3263 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3263 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3264 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3264 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3265 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3265 != Fp::invalid());
        host_args.at(0) = x3254;
        host_args.at(1) = x3262;
        host_args.at(2) = x3263;
        host_args.at(3) = x3264;
        host_args.at(4) = x3265;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3266 = x3091 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3262);
            reg = x3262;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3263);
            reg = x3263;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3264);
            reg = x3264;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3265);
            reg = x3265;
          }
          {
            host_args.at(0) = x3266;
            host_args.at(1) = x3262;
            host_args.at(2) = x3263;
            host_args.at(3) = x3264;
            host_args.at(4) = x3265;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3267 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3267 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3268 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3268 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3269 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3269 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3270 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3270 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3266);
            reg = x3266;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2830);
            reg = x2830;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3267);
            reg = x3267;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3268);
            reg = x3268;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3269);
            reg = x3269;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3270);
            reg = x3270;
          }
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3271 = x2919 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3271 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x2908 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3272 = x2879 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3273 = x2882 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3274 = x3272 + x3273;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3275 = x3274 + x3074;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3276 = x2872 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3277 = x2874 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3278 = x3276 + x3277;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3279 = x3278 + x2876;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3280 = x2872 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3275);
          reg = x3275;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3279);
          reg = x3279;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3280);
          reg = x3280;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3280);
          reg = x3280;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3281 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3281 != Fp::invalid());
      if (x3281 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3282 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3282 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3283 = x3282 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3283 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x93 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3284 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3284 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3285 = x3284 + x3153;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3286 = x3285 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3286 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3287 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3287 != Fp::invalid());
        if (x3287 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3288 = Fp(x3202.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3288);
              reg = x3288;
            }
          }
        }
        if (x3153 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3289 = Fp(x3204.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3289);
              reg = x3289;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3290 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3290 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3291 = Fp(x3290.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3292 = x3291 * x61;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3292);
            reg = x3292;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3293 = Fp(x3290.asUInt32() & x50.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3294 = x3293 * x90;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3294);
            reg = x3294;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3295 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3295 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3296 = x93 - x3295;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3297 = x3295 * x3296;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3297 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3298 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3298 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3299 = x3295 * x62;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3300 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3300 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3301 = x3300 * x54;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3302 = x3299 + x3301;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3303 = x3298 - x3302;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3303 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3304 = x3295 * x89;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3305 = x3287 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3306 = x3153 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3307 = x3305 + x3306;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3308 = x3287 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3309 = x3153 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3310 = x3308 + x3309;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3307);
          reg = x3307;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3310);
          reg = x3310;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3304);
          reg = x3304;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3304);
          reg = x3304;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3311 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3311 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3312 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3313 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3313 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3314 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3314 != Fp::invalid());
        host_args.at(0) = x3304;
        host_args.at(1) = x3311;
        host_args.at(2) = x3312;
        host_args.at(3) = x3313;
        host_args.at(4) = x3314;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3315 = x3091 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3311);
            reg = x3311;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3312);
            reg = x3312;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3313);
            reg = x3313;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3314);
            reg = x3314;
          }
          {
            host_args.at(0) = x3315;
            host_args.at(1) = x3311;
            host_args.at(2) = x3312;
            host_args.at(3) = x3313;
            host_args.at(4) = x3314;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3316 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3316 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3317 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3317 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3318 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3318 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3319 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3319 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3315);
            reg = x3315;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2830);
            reg = x2830;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3316);
            reg = x3316;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3317);
            reg = x3317;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3318);
            reg = x3318;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3319);
            reg = x3319;
          }
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3320 = x2919 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3320 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3321 = x2908 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3321 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3322 = x2879 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3323 = x2882 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3324 = x3322 + x3323;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3325 = x3324 + x3074;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3326 = x2872 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3327 = x2874 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3328 = x3326 + x3327;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3329 = x3328 + x2876;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3330 = x2872 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3325);
          reg = x3325;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3329);
          reg = x3329;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3330);
          reg = x3330;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3330);
          reg = x3330;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3331 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3331 != Fp::invalid());
      if (x3331 != 0) {
        if (x93 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3332 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3332 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3333 = x3332 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3333 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3334 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3334 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3335 = x3334 + x3153;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3336 = x3335 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3336 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3337 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3337 != Fp::invalid());
        if (x3337 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3338 = Fp(x3204.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3338);
              reg = x3338;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3339 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3339 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3340 = Fp(x3339.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3341 = x3340 * x61;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3341);
            reg = x3341;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3342 = Fp(x3339.asUInt32() & x50.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3343 = x3342 * x90;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3343);
            reg = x3343;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3344 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3344 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3345 = x93 - x3344;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3346 = x3344 * x3345;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3346 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3347 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3347 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3348 = x3344 * x62;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3349 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3349 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3350 = x3349 * x54;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3351 = x3348 + x3350;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3352 = x3347 - x3351;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3352 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3353 = x3337 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3354 = x3337 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3355 = x3337 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3356 = x3337 * x3204;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3353);
          reg = x3353;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3354);
          reg = x3354;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3355);
          reg = x3355;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3356);
          reg = x3356;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3357 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3357 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3358 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3358 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3359 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3359 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3360 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3360 != Fp::invalid());
        host_args.at(0) = x92;
        host_args.at(1) = x3357;
        host_args.at(2) = x3358;
        host_args.at(3) = x3359;
        host_args.at(4) = x3360;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3361 = x3091 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3357);
            reg = x3357;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3358);
            reg = x3358;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3359);
            reg = x3359;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3360);
            reg = x3360;
          }
          {
            host_args.at(0) = x3361;
            host_args.at(1) = x3357;
            host_args.at(2) = x3358;
            host_args.at(3) = x3359;
            host_args.at(4) = x3360;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3362 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3362 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3363 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3363 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3364 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3364 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3365 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3365 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3361);
            reg = x3361;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2830);
            reg = x2830;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3362);
            reg = x3362;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3363);
            reg = x3363;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3364);
            reg = x3364;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3365);
            reg = x3365;
          }
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3366 = x2919 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3366 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3367 = x2908 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3367 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3368 = x2879 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3369 = x2882 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3370 = x3368 + x3369;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3371 = x3370 + x3074;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3372 = x2872 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3373 = x2874 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3374 = x3372 + x3373;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3375 = x3374 + x2876;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3376 = x2872 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3371);
          reg = x3371;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3375);
          reg = x3375;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3376);
          reg = x3376;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3376);
          reg = x3376;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3377 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3377 != Fp::invalid());
      if (x3377 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3378 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3378 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3379 = x3378 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3379 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3380 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3380 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3381 = x3380 + x3153;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3382 = x3381 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3382 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3383 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3383 != Fp::invalid());
        if (x3383 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3384 = Fp(x3201.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3384);
              reg = x3384;
            }
          }
        }
        if (x3152 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3385 = Fp(x3202.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3385);
              reg = x3385;
            }
          }
        }
        if (x3153 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3386 = Fp(x3203.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3386);
              reg = x3386;
            }
          }
        }
        if (x3156 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3387 = Fp(x3204.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3387);
              reg = x3387;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3388 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3388 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3389 = Fp(x3388.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3390 = x3389 * x61;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3390);
            reg = x3390;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3391 = Fp(x3388.asUInt32() & x50.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3392 = x3391 * x90;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3392);
            reg = x3392;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3393 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3393 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3394 = x93 - x3393;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3395 = x3393 * x3394;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3395 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3396 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3396 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3397 = x3393 * x62;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3398 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3398 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3399 = x3398 * x54;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3400 = x3397 + x3399;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3401 = x3396 - x3400;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3401 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3402 = x3383 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3403 = x3152 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3404 = x3402 + x3403;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3405 = x3153 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3406 = x3404 + x3405;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3407 = x3156 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3408 = x3406 + x3407;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3408);
          reg = x3408;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3409 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3409 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3410 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3410 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3411 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3411 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3412 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3412 != Fp::invalid());
        host_args.at(0) = x92;
        host_args.at(1) = x3409;
        host_args.at(2) = x3410;
        host_args.at(3) = x3411;
        host_args.at(4) = x3412;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3413 = x3091 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3409);
            reg = x3409;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3410);
            reg = x3410;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3411);
            reg = x3411;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3412);
            reg = x3412;
          }
          {
            host_args.at(0) = x3413;
            host_args.at(1) = x3409;
            host_args.at(2) = x3410;
            host_args.at(3) = x3411;
            host_args.at(4) = x3412;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3414 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3414 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3415 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3415 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3416 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3416 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3417 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3417 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3413);
            reg = x3413;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2830);
            reg = x2830;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3414);
            reg = x3414;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3415);
            reg = x3415;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3416);
            reg = x3416;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3417);
            reg = x3417;
          }
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3418 = x2919 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3418 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3419 = x2908 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3419 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3420 = x2879 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3421 = x2882 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3422 = x3420 + x3421;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3423 = x3422 + x3074;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3424 = x2872 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3425 = x2874 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3426 = x3424 + x3425;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3427 = x3426 + x2876;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3428 = x2872 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3423);
          reg = x3423;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3427);
          reg = x3427;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3428);
          reg = x3428;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3428);
          reg = x3428;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3429 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3429 != Fp::invalid());
      if (x3429 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3430 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3430 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3431 = x3430 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3431 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x93 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3432 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3432 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3433 = x3432 + x3153;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3434 = x3433 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3434 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3435 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3435 != Fp::invalid());
        if (x3435 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3436 = Fp(x3202.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3436);
              reg = x3436;
            }
          }
        }
        if (x3153 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3437 = Fp(x3204.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3437);
              reg = x3437;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3438 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3438 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3439 = Fp(x3438.asUInt32() & x62.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3440 = x3439 * x61;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3440);
            reg = x3440;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3441 = Fp(x3438.asUInt32() & x50.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3442 = x3441 * x90;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3442);
            reg = x3442;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3443 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3443 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3444 = x93 - x3443;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3445 = x3443 * x3444;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3445 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3446 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3446 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3447 = x3443 * x62;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3448 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3448 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3449 = x3448 * x54;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3450 = x3447 + x3449;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3451 = x3446 - x3450;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3451 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3452 = x3435 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3453 = x3153 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3454 = x3452 + x3453;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3455 = x3435 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3456 = x3153 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3457 = x3455 + x3456;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3454);
          reg = x3454;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3457);
          reg = x3457;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3458 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3458 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3459 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3459 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3460 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3460 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3461 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3461 != Fp::invalid());
        host_args.at(0) = x92;
        host_args.at(1) = x3458;
        host_args.at(2) = x3459;
        host_args.at(3) = x3460;
        host_args.at(4) = x3461;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3462 = x3091 + x46;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3458);
            reg = x3458;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3459);
            reg = x3459;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3460);
            reg = x3460;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3461);
            reg = x3461;
          }
          {
            host_args.at(0) = x3462;
            host_args.at(1) = x3458;
            host_args.at(2) = x3459;
            host_args.at(3) = x3460;
            host_args.at(4) = x3461;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3463 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3463 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3464 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3464 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3465 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3465 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3466 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3466 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3462);
            reg = x3462;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2830);
            reg = x2830;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3463);
            reg = x3463;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3464);
            reg = x3464;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3465);
            reg = x3465;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3466);
            reg = x3466;
          }
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3467 = x2919 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3467 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3468 = x2908 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3468 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3469 = x2879 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3470 = x2882 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3471 = x3469 + x3470;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3472 = x3471 + x3074;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3473 = x2872 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3474 = x2874 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3475 = x3473 + x3474;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3476 = x3475 + x2876;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3477 = x2872 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3472);
          reg = x3472;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3476);
          reg = x3476;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3477);
          reg = x3477;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3477);
          reg = x3477;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3478 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3478 != Fp::invalid());
      if (x3478 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3479 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3479 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3480 = x3479 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3480 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3481 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3481 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3482 = x3481 + x3153;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3483 = x3482 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3483 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3484 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3484 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3485 = x3484 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3486 = x93 - x3484;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3487 = x3486 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3488 = x3485 + x3487;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3489 = x3152 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3490 = x93 - x3152;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3491 = x3490 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3492 = x3489 + x3491;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3493 = x3153 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3494 = x93 - x3153;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3495 = x3494 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3496 = x3493 + x3495;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3497 = x3156 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3498 = x93 - x3156;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3499 = x3498 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3500 = x3497 + x3499;
        host_args.at(0) = x3488;
        host_args.at(1) = x3492;
        host_args.at(2) = x3496;
        host_args.at(3) = x3500;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3488);
          reg = x3488;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3492);
          reg = x3492;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3496);
          reg = x3496;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3500);
          reg = x3500;
        }
        {
          host_args.at(0) = x3196;
          host_args.at(1) = x3488;
          host_args.at(2) = x3492;
          host_args.at(3) = x3496;
          host_args.at(4) = x3500;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3501 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3502 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3502 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3503 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3504 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3504 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3196);
          reg = x3196;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2830);
          reg = x2830;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3501);
          reg = x3501;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3502);
          reg = x3502;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3503);
          reg = x3503;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3504);
          reg = x3504;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3505 = x2919 - x33;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3505 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x2908 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3506 = x2879 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3507 = x2882 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3508 = x3506 + x3507;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3509 = x3508 + x3091;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3510 = x2872 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3511 = x2874 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3512 = x3510 + x3511;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3513 = x3512 + x2876;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3514 = x2872 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3509);
          reg = x3509;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3513);
          reg = x3513;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3514);
          reg = x3514;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3514);
          reg = x3514;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3515 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3515 != Fp::invalid());
      if (x3515 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3516 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3516 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3517 = x3516 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3517 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x93 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3518 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3518 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3519 = x3518 + x3153;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3520 = x3519 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3520 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3521 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3521 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3522 = x3521 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3523 = x93 - x3521;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3524 = x3523 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3525 = x3522 + x3524;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3526 = x3153 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3527 = x93 - x3153;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3528 = x3527 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3529 = x3526 + x3528;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3530 = x3521 * x3081;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3531 = x3523 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3532 = x3530 + x3531;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3533 = x3153 * x3081;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3534 = x3527 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3535 = x3533 + x3534;
        host_args.at(0) = x3525;
        host_args.at(1) = x3532;
        host_args.at(2) = x3529;
        host_args.at(3) = x3535;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3525);
          reg = x3525;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3532);
          reg = x3532;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3529);
          reg = x3529;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3535);
          reg = x3535;
        }
        {
          host_args.at(0) = x3196;
          host_args.at(1) = x3525;
          host_args.at(2) = x3532;
          host_args.at(3) = x3529;
          host_args.at(4) = x3535;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3536 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3536 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3537 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3538 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3539 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3539 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3196);
          reg = x3196;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2830);
          reg = x2830;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3536);
          reg = x3536;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3537);
          reg = x3537;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3538);
          reg = x3538;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3539);
          reg = x3539;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3540 = x2919 - x33;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3540 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3541 = x2908 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3541 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3542 = x2879 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3543 = x2882 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3544 = x3542 + x3543;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3545 = x3544 + x3091;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3546 = x2872 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3547 = x2874 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3548 = x3546 + x3547;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3549 = x3548 + x2876;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3550 = x2872 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3545);
          reg = x3545;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3549);
          reg = x3549;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3550);
          reg = x3550;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3550);
          reg = x3550;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3551 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3551 != Fp::invalid());
      if (x3551 != 0) {
        if (x93 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3552 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3552 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3553 = x3552 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3553 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x92 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3554 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3554 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3555 = x3554 + x3153;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3556 = x3555 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3556 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3557 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3557 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3558 = x3557 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3559 = x93 - x3557;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3560 = x3559 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3561 = x3558 + x3560;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3562 = x3557 * x3081;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3563 = x3559 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3564 = x3562 + x3563;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3565 = x3557 * x3082;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3566 = x3559 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3567 = x3565 + x3566;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3568 = x3557 * x3083;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3569 = x3559 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3570 = x3568 + x3569;
        host_args.at(0) = x3561;
        host_args.at(1) = x3564;
        host_args.at(2) = x3567;
        host_args.at(3) = x3570;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3561);
          reg = x3561;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3564);
          reg = x3564;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3567);
          reg = x3567;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3570);
          reg = x3570;
        }
        {
          host_args.at(0) = x3196;
          host_args.at(1) = x3561;
          host_args.at(2) = x3564;
          host_args.at(3) = x3567;
          host_args.at(4) = x3570;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3571 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3571 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3572 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3572 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3573 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3573 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3574 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3574 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3196);
          reg = x3196;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2830);
          reg = x2830;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3571);
          reg = x3571;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3572);
          reg = x3572;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3573);
          reg = x3573;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3574);
          reg = x3574;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3575 = x2919 - x33;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3575 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3576 = x2908 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3576 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3577 = x2879 * x62;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3578 = x2882 * x59;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3579 = x3577 + x3578;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3580 = x3579 + x3091;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3581 = x2872 * x47;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3582 = x2874 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3583 = x3581 + x3582;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3584 = x3583 + x2876;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3585 = x2872 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3580);
          reg = x3580;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3584);
          reg = x3584;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3585);
          reg = x3585;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3585);
          reg = x3585;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":39:25))
    auto x3586 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x3586 != Fp::invalid());
    if (x3586 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3587 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x3587 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":20:41)
      auto x3588 = x596 * x73;
      {
        host_args.at(0) = x3588;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3589 = host_outs.at(0);
        auto x3590 = host_outs.at(1);
        auto x3591 = host_outs.at(2);
        auto x3592 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3590);
          reg = x3590;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3591);
          reg = x3591;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3592);
          reg = x3592;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3593 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x3593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3594 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x3594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3595 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x3595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3596 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x3596 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3588);
        reg = x3588;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3587);
        reg = x3587;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3593);
        reg = x3593;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3594);
        reg = x3594;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3595);
        reg = x3595;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3596);
        reg = x3596;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3597 = Fp(x3596.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3598 = x3597 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3598);
          reg = x3598;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3599 = Fp(x3596.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3600 = x3599 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3600);
          reg = x3600;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3601 = Fp(x3596.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3602 = x3601 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3602);
          reg = x3602;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3603 = Fp(x3596.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3604 = x3603 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3604);
          reg = x3604;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3605 = Fp(x3596.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3606 = x3605 * x54;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3606);
          reg = x3606;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3607 = Fp(x3596.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3607);
          reg = x3607;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3608 = Fp(x3595.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3609 = x3608 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3609);
          reg = x3609;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3610 = Fp(x3595.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3611 = x3610 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3611);
          reg = x3611;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3612 = Fp(x3595.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3613 = x3612 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3613);
          reg = x3613;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3614 = Fp(x3595.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3615 = x3614 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3615);
          reg = x3615;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3616 = Fp(x3595.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3616);
          reg = x3616;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3617 = Fp(x3594.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3618 = x3617 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3618);
          reg = x3618;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3619 = Fp(x3594.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3620 = x3619 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3620);
          reg = x3620;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3621 = Fp(x3594.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3622 = x3621 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3622);
          reg = x3622;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3623 = Fp(x3594.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3624 = x3623 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3624);
          reg = x3624;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3625 = Fp(x3594.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3625);
          reg = x3625;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3626 = Fp(x3593.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3627 = x3626 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3627);
          reg = x3627;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3628 = Fp(x3593.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3628);
          reg = x3628;
        }
      }
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3629 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x3629 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3630 = x3629 * x53;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3631 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3631 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3632 = x3631 * x57;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3633 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x3633 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3634 = x3633 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3635 = x3632 + x3634;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3636 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x3636 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3637 = x3636 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3638 = x3635 + x3637;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3639 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3639 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3640 = x3638 + x3639;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3641 = x3630 + x3640;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3642 = x3641 * x90;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3643 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x3643 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3644 = x3642 + x3643;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3645 = x3596 - x3644;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3645 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3646 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x3646 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3647 = x3646 * x68;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3648 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3648 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3649 = x3648 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3650 = x3647 + x3649;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3651 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x3651 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3652 = x3650 + x3651;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3653 = x3652 * x57;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3654 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3654 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3655 = x3654 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3656 = x3653 + x3655;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3657 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3657 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3658 = x3656 + x3657;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3659 = x3595 - x3658;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3659 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3660 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x3660 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3661 = x3660 * x62;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3662 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x3662 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3663 = x3662 * x75;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3664 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3664 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3665 = x3663 + x3664;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3666 = x3665 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3667 = x3661 + x3666;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3668 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3668 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3669 = x3668 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3670 = x3667 + x3669;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3671 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3671 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3672 = x3670 + x3671;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3673 = x3594 - x3672;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3673 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3674 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x3674 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3675 = x3674 * x62;
      // loc("Top/Mux/4/Mux/4/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3676 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x3676 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3677 = x3675 + x3676;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3678 = x3593 - x3677;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3678 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3593;
        host_args.at(1) = x3594;
        host_args.at(2) = x3595;
        host_args.at(3) = x3596;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3679 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3680 = (x3679 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3680);
            reg = x3680;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3681 = x3679 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3682 = (x3681 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3682);
            reg = x3682;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3683 = x3679 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3684 = (x3683 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3684);
            reg = x3684;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3685 = x3679 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3686 = (x3685 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3686);
            reg = x3686;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3687 = x3679 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3688 = (x3687 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3688);
            reg = x3688;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3689 = x3679 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3690 = (x3689 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3690);
            reg = x3690;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3691 = x3679 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3692 = (x3691 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3692);
            reg = x3692;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3693 = x3679 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3694 = (x3693 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3694);
            reg = x3694;
          }
        }
        // loc("Top/Mux/4/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3695 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x3695 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3696 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x3696 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3697 = x3696 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3698 = x3695 + x3697;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3699 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x3699 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3700 = x3699 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3701 = x3698 + x3700;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3702 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x3702 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3703 = x3702 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3704 = x3701 + x3703;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3705 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x3705 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3706 = x3705 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3707 = x3704 + x3706;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3708 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x3708 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3709 = x3708 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3710 = x3707 + x3709;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3711 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x3711 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3712 = x3711 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3713 = x3710 + x3712;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3714 = x3713 - x3679;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3714 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      host_args.at(0) = x92;
      host_args.at(1) = x92;
      host_args.at(2) = x92;
      host_args.at(3) = x92;
      host_args.at(4) = x92;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/4/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3715 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x3715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x3716 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x3716 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x3717 = x3715 + x3716;
      // loc("Top/Mux/4/Mux/4/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x3718 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x3718 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x3719 = x3717 + x3718;
      // loc("Top/Mux/4/Mux/4/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x3720 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x3720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x3721 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3721 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x3722 = x3720 + x3721;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3723 = x3654 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3724 = x3657 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3725 = x3723 + x3724;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3726 = x3725 + x3660;
      // loc("cirgen/circuit/rv32im/multiply.cpp":54:39)
      auto x3727 = x3726 + x46;
      {
        host_args.at(0) = x3727;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3728 = host_outs.at(0);
        auto x3729 = host_outs.at(1);
        auto x3730 = host_outs.at(2);
        auto x3731 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3728);
          reg = x3728;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3729);
          reg = x3729;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3730);
          reg = x3730;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3731);
          reg = x3731;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3732 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3733 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3734 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3735 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3735 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3727);
        reg = x3727;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3587);
        reg = x3587;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3732);
        reg = x3732;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3733);
        reg = x3733;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3734);
        reg = x3734;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3735);
        reg = x3735;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3736 = x3643 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3737 = x3736 + x3652;
      // loc("cirgen/circuit/rv32im/multiply.cpp":55:39)
      auto x3738 = x3737 + x46;
      {
        host_args.at(0) = x3738;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3739 = host_outs.at(0);
        auto x3740 = host_outs.at(1);
        auto x3741 = host_outs.at(2);
        auto x3742 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3739);
          reg = x3739;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3740);
          reg = x3740;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3741);
          reg = x3741;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3742);
          reg = x3742;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3743 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3744 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3745 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3746 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3746 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3738);
        reg = x3738;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3587);
        reg = x3587;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3743);
        reg = x3743;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3744);
        reg = x3744;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3745);
        reg = x3745;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3746);
        reg = x3746;
      }
      host_args.at(0) = x3726;
      host_args.at(1) = x3732;
      host_args.at(2) = x3733;
      host_args.at(3) = x3734;
      host_args.at(4) = x3735;
      host_args.at(5) = x3737;
      host_args.at(6) = x3743;
      host_args.at(7) = x3744;
      host_args.at(8) = x3745;
      host_args.at(9) = x3746;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3747 = x3636 * x62;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x3748 = x3639 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3749 = x3747 + x3748;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3750 = x3749 + x3737;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3751 = x3721 * x3750;
      // loc("cirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x3752 = x93 - x3721;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3753 = x3752 * x3743;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3754 = x3751 + x3753;
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x3755 = Fp(x3754.asUInt32() & x32.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:15)
        auto x3756 = x3755 * x52;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3756);
          reg = x3756;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x3757 = Fp(x3754.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:15)
        auto x3758 = x3757 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3758);
          reg = x3758;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x3759 = Fp(x3754.asUInt32() & x31.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3760 = Fp(x3759.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3760);
            reg = x3760;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3761 = Fp(x3759.asUInt32() & x90.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3762 = x3761 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3762);
            reg = x3762;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3763 = Fp(x3759.asUInt32() & x75.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3764 = x3763 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3764);
            reg = x3764;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3765 = Fp(x3759.asUInt32() & x68.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3766 = x3765 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3766);
            reg = x3766;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3767 = Fp(x3759.asUInt32() & x57.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3768 = x3767 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3768);
            reg = x3768;
          }
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3769 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x3769 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x3770 = x3769 * x30;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x3771 = x3770 + x93;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3772 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x3772 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x3773 = x3772 * x74;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x3774 = x3773 + x93;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3775 = x3771 * x3774;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3776 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x3776 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x3777 = x3776 + x93;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3778 = x3775 * x3777;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3779 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x3779 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3780 = x3779 * x90;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3781 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x3781 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3782 = x3780 + x3781;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x3783 = (x3782 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x3784 = x3783 * x3778;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3785 = x3782 - x93;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3786 = (x3785 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x3787 = x3786 * x3778;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3788 = x3782 - x90;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3789 = (x3788 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x3790 = x3789 * x3778;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3791 = x3782 - x74;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3792 = (x3791 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x3793 = x3792 * x3778;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3784);
            reg = x3784;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3787);
            reg = x3787;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3790);
            reg = x3790;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3793);
            reg = x3793;
          }
        }
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3794 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x3794 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3795 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x3795 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3796 = x3795 * x90;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3797 = x3794 + x3796;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3798 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x3798 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3799 = x3798 * x75;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3800 = x3797 + x3799;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3801 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x3801 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3802 = x3801 * x68;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3803 = x3800 + x3802;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3804 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x3804 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3805 = x3804 * x57;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3806 = x3803 + x3805;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x3807 = x3806 - x3759;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x3807 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/4/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3808 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x3808 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3809 = x3808 * x53;
      // loc("Top/Mux/4/Mux/4/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3810 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x3810 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:37)
      auto x3811 = x3810 * x59;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3812 = x3809 + x3811;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3813 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x3813 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3814 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x3814 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3815 = x3814 * x90;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3816 = x3813 + x3815;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3817 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3817 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3818 = x3817 * x75;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3819 = x3816 + x3818;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3820 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3820 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3821 = x3820 * x68;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3822 = x3819 + x3821;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3823 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3823 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3824 = x3823 * x57;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3825 = x3822 + x3824;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3826 = x3812 + x3825;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x3827 = x3754 - x3826;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x3827 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3828 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3828 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3829 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3830 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3831 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3831 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3832 = x3722 * x3828;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3833 = x3722 * x3829;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3834 = x3722 * x3830;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3835 = x3722 * x3831;
      // loc("cirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x3836 = x93 - x3722;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3837 = x3836 * x3743;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3838 = x3836 * x3744;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3839 = x3836 * x3745;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3840 = x3836 * x3746;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3841 = x3832 + x3837;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3842 = x3833 + x3838;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3843 = x3834 + x3839;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3844 = x3835 + x3840;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3845 = Fp(x3735.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3846 = x3845 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3846);
          reg = x3846;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3847 = Fp(x3735.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3848 = x3847 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3848);
          reg = x3848;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3849 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3849 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3850 = x3849 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3851 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x3851 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3852 = x3851 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3853 = x3850 + x3852;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3854 = x3735 - x3853;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3854 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3855 = Fp(x3844.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3856 = x3855 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3856);
          reg = x3856;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3857 = Fp(x3844.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3858 = x3857 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3858);
          reg = x3858;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3859 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3859 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3860 = x3859 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3861 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x3861 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3862 = x3861 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3863 = x3860 + x3862;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3864 = x3844 - x3863;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3864 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":213:13)
      auto x3865 = x3715 * x3859;
      // loc("cirgen/components/u32.cpp":213:3)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3865);
        reg = x3865;
      }
      // loc("cirgen/components/u32.cpp":214:13)
      auto x3866 = x3717 * x3849;
      // loc("cirgen/components/u32.cpp":214:3)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3866);
        reg = x3866;
      }
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3867 = x3732 * x3841;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3868 = x3733 * x3841;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3869 = x3732 * x3842;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3870 = x3868 + x3869;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3871 = x3870 * x88;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3872 = x3867 + x3871;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3873 = Fp(x3872.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3873);
          reg = x3873;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3874 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x3874 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3875 = x3872 - x3874;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3876 = x3875 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3877 = Fp(x3876.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3877);
          reg = x3877;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3878 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3878 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3879 = x3876 - x3878;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3880 = x3879 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3881 = Fp(x3880.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3881);
          reg = x3881;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3882 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3882 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3883 = x3880 - x3882;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3884 = x3883 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3884);
        reg = x3884;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3885 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3885 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3886 = x3885 * x88;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3887 = x3882 + x3886;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3888 = x3734 * x3841;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3889 = x3733 * x3842;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3890 = x3888 + x3889;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3891 = x3732 * x3843;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3892 = x3890 + x3891;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3893 = x3887 + x3892;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3894 = x3735 * x3841;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3895 = x3734 * x3842;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3896 = x3894 + x3895;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3897 = x3733 * x3843;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3898 = x3896 + x3897;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3899 = x3732 * x3844;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3900 = x3898 + x3899;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3901 = x3900 * x88;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3902 = x3893 + x3901;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3903 = Fp(x3902.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3903);
          reg = x3903;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3904 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3904 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3905 = x3902 - x3904;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3906 = x3905 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3907 = Fp(x3906.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3907);
          reg = x3907;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3908 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3908 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3909 = x3906 - x3908;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3910 = x3909 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3911 = Fp(x3910.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3911);
          reg = x3911;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3912 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3912 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3913 = x3910 - x3912;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3914 = x3913 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3914);
        reg = x3914;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3915 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3915 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3916 = x3915 * x88;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3917 = x3912 + x3916;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3918 = x3735 * x3842;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3919 = x3734 * x3843;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3920 = x3918 + x3919;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3921 = x3733 * x3844;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3922 = x3920 + x3921;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3923 = x3917 + x3922;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3924 = x3735 * x3843;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3925 = x3734 * x3844;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3926 = x3924 + x3925;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3927 = x3926 * x88;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3928 = x3923 + x3927;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3929 = x3928 + x29;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3930 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3930 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":234:53)
      auto x3931 = x3733 * x88;
      // loc("cirgen/components/u32.cpp":234:38)
      auto x3932 = x3732 + x3931;
      // loc("cirgen/components/u32.cpp":234:30)
      auto x3933 = x3930 * x3932;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3934 = x3929 - x3933;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3935 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3935 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":235:37)
      auto x3936 = x3842 * x88;
      // loc("cirgen/components/u32.cpp":235:22)
      auto x3937 = x3841 + x3936;
      // loc("cirgen/components/u32.cpp":235:14)
      auto x3938 = x3935 * x3937;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3939 = x3934 - x3938;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3940 = Fp(x3939.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3940);
          reg = x3940;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3941 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3941 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3942 = x3939 - x3941;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3943 = x3942 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3944 = Fp(x3943.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3944);
          reg = x3944;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3945 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3945 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3946 = x3943 - x3945;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3947 = x3946 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3948 = Fp(x3947.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3948);
          reg = x3948;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3949 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3949 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3950 = x3947 - x3949;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3951 = x3950 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3951);
        reg = x3951;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3952 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x3952 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3953 = x3952 * x88;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3954 = x3949 + x3953;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3955 = x3735 * x3844;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3956 = x3954 + x3955;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3957 = x3956 + x28;
      // loc("cirgen/components/u32.cpp":238:53)
      auto x3958 = x3735 * x88;
      // loc("cirgen/components/u32.cpp":238:38)
      auto x3959 = x3734 + x3958;
      // loc("cirgen/components/u32.cpp":238:30)
      auto x3960 = x3930 * x3959;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3961 = x3957 - x3960;
      // loc("cirgen/components/u32.cpp":239:37)
      auto x3962 = x3844 * x88;
      // loc("cirgen/components/u32.cpp":239:22)
      auto x3963 = x3843 + x3962;
      // loc("cirgen/components/u32.cpp":239:14)
      auto x3964 = x3935 * x3963;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3965 = x3961 - x3964;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3966 = Fp(x3965.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3966);
          reg = x3966;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3967 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x3967 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3968 = x3965 - x3967;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3969 = x3968 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3970 = Fp(x3969.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3970);
          reg = x3970;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3971 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x3971 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3972 = x3969 - x3971;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3973 = x3972 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3973);
        reg = x3973;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3974 = x3668 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3975 = x3671 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3976 = x3974 + x3975;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3977 = x3976 + x3674;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3978 = (x3977 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3978);
          reg = x3978;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3979 = inv(x3977);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3979);
          reg = x3979;
        }
      }
      // loc("Top/Mux/4/Mux/4/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3980 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3980 != Fp::invalid());
      if (x3980 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3977 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x3981 = x93 - x3980;
      if (x3981 != 0) {
        // loc("Top/Mux/4/Mux/4/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3982 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3982 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3983 = x3977 * x3982;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3984 = x3983 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x3984 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":78:17)
      auto x3985 = x596 + x75;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3986 = x3985 + x75;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3987 = Fp(x3986.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3987);
          reg = x3987;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3988 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3988 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3989 = x3986 - x3988;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3990 = x3989 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3991 = Fp(x3990.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3991);
          reg = x3991;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3992 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3992 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3993 = x3990 - x3992;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3994 = x3993 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3995 = Fp(x3994.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3995);
          reg = x3995;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3996 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3996 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3997 = x3994 - x3996;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3998 = x3997 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3999 = Fp(x3998.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3999);
          reg = x3999;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4000 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4000 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4001 = x3998 - x4000;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4002 = x4001 * x73;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4002);
        reg = x4002;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4003 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4003 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4004 = x93 - x4003;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4005 = x4003 * x4004;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4005);
        reg = x4005;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4006 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4006 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4007 = x90 - x4003;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4008 = x4006 * x4007;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4008 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":80:38)
      auto x4009 = x3719 * x3981;
      if (x4009 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":81:29)
        auto x4010 = x3977 + x46;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3941);
          reg = x3941;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3945);
          reg = x3945;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3967);
          reg = x3967;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3971);
          reg = x3971;
        }
        {
          host_args.at(0) = x4010;
          host_args.at(1) = x3941;
          host_args.at(2) = x3945;
          host_args.at(3) = x3967;
          host_args.at(4) = x3971;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4011 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4011 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4012 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4012 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4013 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4013 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4014 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4014 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4010);
          reg = x4010;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3587);
          reg = x3587;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4011);
          reg = x4011;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4012);
          reg = x4012;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4013);
          reg = x4013;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4014);
          reg = x4014;
        }
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4015 = x93 - x3719;
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4016 = x4015 * x3981;
      if (x4016 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":84:29)
        auto x4017 = x3977 + x46;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3874);
          reg = x3874;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3878);
          reg = x3878;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3904);
          reg = x3904;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3908);
          reg = x3908;
        }
        {
          host_args.at(0) = x4017;
          host_args.at(1) = x3874;
          host_args.at(2) = x3878;
          host_args.at(3) = x3904;
          host_args.at(4) = x3908;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4018 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4018 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4019 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4019 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4020 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4020 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4021 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4021 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4017);
          reg = x4017;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3587);
          reg = x3587;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4018);
          reg = x4018;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4019);
          reg = x4019;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4020);
          reg = x4020;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4021);
          reg = x4021;
        }
      }
      if (x3980 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("Top/Mux/4/Mux/4/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4022 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4022 != Fp::invalid());
      if (x4022 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4023 = x3676 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4023 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3665 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4024 = x3641 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4024 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3715 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4025 = x3676 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4025 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4026 = x3665 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4026 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4027 = x3641 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4027 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3716 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4028 = x3676 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4028 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4029 = x3665 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4029 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4030 = x3641 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4030 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3718 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4031 = x3676 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4031 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4032 = x3665 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4032 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4033 = x3641 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4033 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3720 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4034 = x3676 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4034 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4035 = x3665 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4035 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3641 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3721 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4036 = x3676 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4036 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4037 = x3665 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4037 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3641 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4038 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x4038 != Fp::invalid());
    if (x4038 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4039 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x4039 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":20:41)
      auto x4040 = x596 * x73;
      {
        host_args.at(0) = x4040;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4041 = host_outs.at(0);
        auto x4042 = host_outs.at(1);
        auto x4043 = host_outs.at(2);
        auto x4044 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4041);
          reg = x4041;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4042);
          reg = x4042;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4043);
          reg = x4043;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4044);
          reg = x4044;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4045 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4045 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4046 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4046 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4047 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4047 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4048 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4048 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4040);
        reg = x4040;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4039);
        reg = x4039;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4045);
        reg = x4045;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4046);
        reg = x4046;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4047);
        reg = x4047;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4048);
        reg = x4048;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4049 = Fp(x4048.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x4050 = x4049 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4050);
          reg = x4050;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4051 = Fp(x4048.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x4052 = x4051 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4052);
          reg = x4052;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4053 = Fp(x4048.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x4054 = x4053 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4054);
          reg = x4054;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4055 = Fp(x4048.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x4056 = x4055 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4056);
          reg = x4056;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4057 = Fp(x4048.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4058 = x4057 * x54;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4058);
          reg = x4058;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4059 = Fp(x4048.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4059);
          reg = x4059;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4060 = Fp(x4047.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x4061 = x4060 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4061);
          reg = x4061;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4062 = Fp(x4047.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4063 = x4062 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4063);
          reg = x4063;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4064 = Fp(x4047.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x4065 = x4064 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4065);
          reg = x4065;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4066 = Fp(x4047.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x4067 = x4066 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4067);
          reg = x4067;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4068 = Fp(x4047.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4068);
          reg = x4068;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4069 = Fp(x4046.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x4070 = x4069 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4070);
          reg = x4070;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4071 = Fp(x4046.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x4072 = x4071 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4072);
          reg = x4072;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4073 = Fp(x4046.asUInt32() & x51.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x4074 = x4073 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4074);
          reg = x4074;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4075 = Fp(x4046.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x4076 = x4075 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4076);
          reg = x4076;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4077 = Fp(x4046.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4077);
          reg = x4077;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4078 = Fp(x4045.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x4079 = x4078 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4079);
          reg = x4079;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4080 = Fp(x4045.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4080);
          reg = x4080;
        }
      }
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4081 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4081 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4082 = x4081 * x53;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4083 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4083 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4084 = x4083 * x57;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4085 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4085 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x4086 = x4085 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4087 = x4084 + x4086;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4088 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4088 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x4089 = x4088 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4090 = x4087 + x4089;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4091 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4091 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4092 = x4090 + x4091;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4093 = x4082 + x4092;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4094 = x4093 * x90;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4095 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4095 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4096 = x4094 + x4095;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4097 = x4048 - x4096;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4097 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4098 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4098 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4099 = x4098 * x68;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4100 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4100 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x4101 = x4100 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4102 = x4099 + x4101;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4103 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4103 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4104 = x4102 + x4103;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4105 = x4104 * x57;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4106 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4106 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x4107 = x4106 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4108 = x4105 + x4107;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4109 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4109 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4110 = x4108 + x4109;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4111 = x4047 - x4110;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4111 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4112 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4112 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4113 = x4112 * x62;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4114 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4114 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4115 = x4114 * x75;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4116 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4116 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4117 = x4115 + x4116;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x4118 = x4117 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4119 = x4113 + x4118;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4120 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4120 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x4121 = x4120 * x75;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4122 = x4119 + x4121;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4123 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4123 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4124 = x4122 + x4123;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4125 = x4046 - x4124;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4125 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4126 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4126 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4127 = x4126 * x62;
      // loc("Top/Mux/4/Mux/5/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4128 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4128 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4129 = x4127 + x4128;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4130 = x4045 - x4129;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4130 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4045;
        host_args.at(1) = x4046;
        host_args.at(2) = x4047;
        host_args.at(3) = x4048;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4131 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4132 = (x4131 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4132);
            reg = x4132;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4133 = x4131 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4134 = (x4133 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4134);
            reg = x4134;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4135 = x4131 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4136 = (x4135 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4136);
            reg = x4136;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4137 = x4131 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4138 = (x4137 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4138);
            reg = x4138;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4139 = x4131 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4140 = (x4139 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4140);
            reg = x4140;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4141 = x4131 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4142 = (x4141 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4142);
            reg = x4142;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4143 = x4131 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4144 = (x4143 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4144);
            reg = x4144;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4145 = x4131 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4146 = (x4145 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4146);
            reg = x4146;
          }
        }
        // loc("Top/Mux/4/Mux/5/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4147 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x4147 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4148 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x4148 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4149 = x4148 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4150 = x4147 + x4149;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4151 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x4151 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4152 = x4151 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4153 = x4150 + x4152;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4154 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x4154 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4155 = x4154 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4156 = x4153 + x4155;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4157 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x4157 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4158 = x4157 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4159 = x4156 + x4158;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4160 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x4160 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4161 = x4160 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4162 = x4159 + x4161;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4163 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x4163 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4164 = x4163 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4165 = x4162 + x4164;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x4166 = x4165 - x4131;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x4166 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4167 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4167 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4168 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4168 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4169 = x4167 + x4168;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4170 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4170 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
      auto x4171 = x4168 + x4170;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4172 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4172 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4173 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4173 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4174 = x4172 + x4173;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4175 = x4169 + x4173;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4176 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4176 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4177 = x4174 + x4176;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":131:49))
      auto x4178 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4178 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4179 = x4176 + x4178;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4180 = x4177 + x4178;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4181 = x4175 + x4178;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4182 = x4173 + x4178;
      // loc("cirgen/circuit/rv32im/divide.cpp":46:3)
      {
        auto& reg = args[2][189 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4181);
        reg = x4181;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":47:3)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4182);
        reg = x4182;
      }
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":51:8))
      auto x4183 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4183 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":52:8))
      auto x4184 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4184 != Fp::invalid());
      host_args.at(0) = x4179;
      host_args.at(1) = x4180;
      host_args.at(2) = x4183;
      host_args.at(3) = x4184;
      host_args.at(4) = x4171;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4185 = x4106 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4186 = x4109 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4187 = x4185 + x4186;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4188 = x4187 + x4112;
      // loc("cirgen/circuit/rv32im/divide.cpp":56:39)
      auto x4189 = x4188 + x46;
      {
        host_args.at(0) = x4189;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4190 = host_outs.at(0);
        auto x4191 = host_outs.at(1);
        auto x4192 = host_outs.at(2);
        auto x4193 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4190);
          reg = x4190;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4191);
          reg = x4191;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4192);
          reg = x4192;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4193);
          reg = x4193;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4194 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4194 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4195 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4195 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4196 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4196 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4197 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4197 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4189);
        reg = x4189;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4039);
        reg = x4039;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4194);
        reg = x4194;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4195);
        reg = x4195;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4196);
        reg = x4196;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4197);
        reg = x4197;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4198 = x4095 * x57;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4199 = x4198 + x4104;
      // loc("cirgen/circuit/rv32im/divide.cpp":57:39)
      auto x4200 = x4199 + x46;
      {
        host_args.at(0) = x4200;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4201 = host_outs.at(0);
        auto x4202 = host_outs.at(1);
        auto x4203 = host_outs.at(2);
        auto x4204 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4201);
          reg = x4201;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4202);
          reg = x4202;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4203);
          reg = x4203;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4204);
          reg = x4204;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4205 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4205 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4206 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4206 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4207 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4207 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4208 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4208 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4200);
        reg = x4200;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4039);
        reg = x4039;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4205);
        reg = x4205;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4206);
        reg = x4206;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4207);
        reg = x4207;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4208);
        reg = x4208;
      }
      host_args.at(0) = x4188;
      host_args.at(1) = x4194;
      host_args.at(2) = x4195;
      host_args.at(3) = x4196;
      host_args.at(4) = x4197;
      host_args.at(5) = x4199;
      host_args.at(6) = x4205;
      host_args.at(7) = x4206;
      host_args.at(8) = x4207;
      host_args.at(9) = x4208;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4209 = x4088 * x62;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4210 = x4091 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4211 = x4209 + x4210;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4212 = x4211 + x4199;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4213 = x4179 * x4212;
      // loc("cirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4214 = x93 - x4179;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4215 = x4214 * x4205;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4216 = x4213 + x4215;
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4217 = Fp(x4216.asUInt32() & x32.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":65:15)
        auto x4218 = x4217 * x52;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4218);
          reg = x4218;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4219 = Fp(x4216.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":66:15)
        auto x4220 = x4219 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4220);
          reg = x4220;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4221 = Fp(x4216.asUInt32() & x31.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4222 = Fp(x4221.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4222);
            reg = x4222;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4223 = Fp(x4221.asUInt32() & x90.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4224 = x4223 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4224);
            reg = x4224;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4225 = Fp(x4221.asUInt32() & x75.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4226 = x4225 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4226);
            reg = x4226;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4227 = Fp(x4221.asUInt32() & x68.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4228 = x4227 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4228);
            reg = x4228;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4229 = Fp(x4221.asUInt32() & x57.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4230 = x4229 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4230);
            reg = x4230;
          }
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4231 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x4231 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x4232 = x4231 * x30;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x4233 = x4232 + x93;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4234 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x4234 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x4235 = x4234 * x74;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x4236 = x4235 + x93;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4237 = x4233 * x4236;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4238 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x4238 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x4239 = x4238 + x93;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4240 = x4237 * x4239;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4241 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x4241 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4242 = x4241 * x90;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4243 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x4243 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4244 = x4242 + x4243;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x4245 = (x4244 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x4246 = x4245 * x4240;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4247 = x4244 - x93;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4248 = (x4247 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x4249 = x4248 * x4240;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4250 = x4244 - x90;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4251 = (x4250 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x4252 = x4251 * x4240;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4253 = x4244 - x74;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4254 = (x4253 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x4255 = x4254 * x4240;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4246);
            reg = x4246;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4249);
            reg = x4249;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4252);
            reg = x4252;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4255);
            reg = x4255;
          }
        }
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4256 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x4256 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4257 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x4257 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4258 = x4257 * x90;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4259 = x4256 + x4258;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4260 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4260 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4261 = x4260 * x75;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4262 = x4259 + x4261;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4263 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4263 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4264 = x4263 * x68;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4265 = x4262 + x4264;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4266 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4266 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4267 = x4266 * x57;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4268 = x4265 + x4267;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x4269 = x4268 - x4221;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x4269 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/5/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4270 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4270 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4271 = x4270 * x53;
      // loc("Top/Mux/4/Mux/5/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4272 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4272 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:37)
      auto x4273 = x4272 * x59;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4274 = x4271 + x4273;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4275 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4275 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4276 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4276 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4277 = x4276 * x90;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4278 = x4275 + x4277;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4279 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4279 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4280 = x4279 * x75;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4281 = x4278 + x4280;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4282 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4282 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4283 = x4282 * x68;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4284 = x4281 + x4283;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4285 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4285 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4286 = x4285 * x57;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4287 = x4284 + x4286;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4288 = x4274 + x4287;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4289 = x4216 - x4288;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4289 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4290 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4290 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4291 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4291 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4292 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4292 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4293 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4293 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4294 = x4180 * x4290;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4295 = x4180 * x4291;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4296 = x4180 * x4292;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4297 = x4180 * x4293;
      // loc("cirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4298 = x93 - x4180;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4299 = x4298 * x4205;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4300 = x4298 * x4206;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4301 = x4298 * x4207;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4302 = x4298 * x4208;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4303 = x4294 + x4299;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4304 = x4295 + x4300;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4305 = x4296 + x4301;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4306 = x4297 + x4302;
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4303);
        reg = x4303;
      }
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4304);
        reg = x4304;
      }
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4305);
        reg = x4305;
      }
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4306);
        reg = x4306;
      }
      {
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4307 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x4307 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4308 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x4308 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4309 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x4309 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4310 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x4310 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":83:16)
        auto x4311 = x4183 + x4184;
        host_args.at(0) = x4194;
        host_args.at(1) = x4195;
        host_args.at(2) = x4196;
        host_args.at(3) = x4197;
        host_args.at(4) = x4307;
        host_args.at(5) = x4308;
        host_args.at(6) = x4309;
        host_args.at(7) = x4310;
        host_args.at(8) = x4311;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4312 = host_outs.at(0);
        auto x4313 = host_outs.at(1);
        auto x4314 = host_outs.at(2);
        auto x4315 = host_outs.at(3);
        auto x4316 = host_outs.at(4);
        auto x4317 = host_outs.at(5);
        auto x4318 = host_outs.at(6);
        auto x4319 = host_outs.at(7);
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4312);
          reg = x4312;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4316);
          reg = x4316;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4313);
          reg = x4313;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4317);
          reg = x4317;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4314);
          reg = x4314;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4318);
          reg = x4318;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4315);
          reg = x4315;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4319);
          reg = x4319;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4320 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4320 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4321 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4321 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4322 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4322 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4323 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4323 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4324 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4324 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4325 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4325 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4326 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x4326 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4327 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x4327 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4328 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x4328 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4329 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x4329 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4330 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x4330 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4331 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x4331 != Fp::invalid());
      host_args.at(0) = x4194;
      host_args.at(1) = x4195;
      host_args.at(2) = x4196;
      host_args.at(3) = x4197;
      host_args.at(4) = x4320;
      host_args.at(5) = x4321;
      host_args.at(6) = x4322;
      host_args.at(7) = x4323;
      host_args.at(8) = x4324;
      host_args.at(9) = x4325;
      host_args.at(10) = x4326;
      host_args.at(11) = x4327;
      host_args.at(12) = x4328;
      host_args.at(13) = x4329;
      host_args.at(14) = x4330;
      host_args.at(15) = x4331;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4332 = x4120 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4333 = x4123 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4334 = x4332 + x4333;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4335 = x4334 + x4126;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4336 = (x4335 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4336);
          reg = x4336;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4337 = inv(x4335);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4337);
          reg = x4337;
        }
      }
      // loc("Top/Mux/4/Mux/5/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4338 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4338 != Fp::invalid());
      if (x4338 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4335 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4339 = x93 - x4338;
      if (x4339 != 0) {
        // loc("Top/Mux/4/Mux/5/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4340 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4340 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4341 = x4335 * x4340;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4342 = x4341 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4342 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:37)
      auto x4343 = x4171 * x4339;
      if (x4343 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4344 = x4335 + x46;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4328);
          reg = x4328;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4329);
          reg = x4329;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4330);
          reg = x4330;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4331);
          reg = x4331;
        }
        {
          host_args.at(0) = x4344;
          host_args.at(1) = x4328;
          host_args.at(2) = x4329;
          host_args.at(3) = x4330;
          host_args.at(4) = x4331;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4345 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4345 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4346 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4346 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4347 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4348 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4348 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4344);
          reg = x4344;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4039);
          reg = x4039;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4345);
          reg = x4345;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4346);
          reg = x4346;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4347);
          reg = x4347;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4348);
          reg = x4348;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4349 = x93 - x4171;
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4350 = x4349 * x4339;
      if (x4350 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":100:16)
        auto x4351 = x4335 + x46;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4324);
          reg = x4324;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4325);
          reg = x4325;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4326);
          reg = x4326;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4327);
          reg = x4327;
        }
        {
          host_args.at(0) = x4351;
          host_args.at(1) = x4324;
          host_args.at(2) = x4325;
          host_args.at(3) = x4326;
          host_args.at(4) = x4327;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4352 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4352 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4353 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4353 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4354 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4354 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4355 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4355 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4351);
          reg = x4351;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4039);
          reg = x4039;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4352);
          reg = x4352;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4353);
          reg = x4353;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4354);
          reg = x4354;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4355);
          reg = x4355;
        }
      }
      if (x4338 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":105:17)
      auto x4356 = x596 + x75;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4357 = x4356 + x75;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4358 = Fp(x4357.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4358);
          reg = x4358;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4359 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4359 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4360 = x4357 - x4359;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4361 = x4360 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4362 = Fp(x4361.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4362);
          reg = x4362;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4363 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4363 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4364 = x4361 - x4363;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4365 = x4364 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4366 = Fp(x4365.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4366);
          reg = x4366;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4367 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4367 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4368 = x4365 - x4367;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4369 = x4368 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4370 = Fp(x4369.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4370);
          reg = x4370;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4371 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4371 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4372 = x4369 - x4371;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4373 = x4372 * x73;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4373);
        reg = x4373;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4374 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4374 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4375 = x93 - x4374;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4376 = x4374 * x4375;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4376);
        reg = x4376;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4377 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4377 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4378 = x90 - x4374;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4379 = x4377 * x4378;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4379 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":106:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x69);
        reg = x69;
      }
      if (x4167 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4380 = x4128 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4380 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4381 = x4117 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4381 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4382 = x4093 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4382 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4383 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4383 != Fp::invalid());
      if (x4383 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4384 = x4128 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4384 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4385 = x4117 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4385 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4386 = x4093 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4386 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4168 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4387 = x4128 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4387 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4388 = x4117 - x70;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4388 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4389 = x4093 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4389 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4170 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4390 = x4128 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4390 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4391 = x4117 - x69;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4391 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4392 = x4093 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4392 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4172 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4393 = x4128 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4393 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4394 = x4117 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4394 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4093 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4173 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4395 = x4128 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4395 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4396 = x4117 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4396 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4397 = x4093 - x59;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4397 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4176 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4398 = x4128 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4398 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4399 = x4117 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4399 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4093 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
      if (x4178 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4400 = x4128 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4400 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4401 = x4117 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4401 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4402 = x4093 - x59;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4402 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4403 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x4403 != Fp::invalid());
    if (x4403 != 0) {
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4404 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4404 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4405 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4405 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4406 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4406 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4407 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4407 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4408 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x4408 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4409 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x4409 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4410 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x4410 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4411 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x4411 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4412 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x4412 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4413 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x4413 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4414 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x4414 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4415 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x4415 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4416 = Fp(x4404.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4416);
          reg = x4416;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4417 = Fp(x4408.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4417);
          reg = x4417;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4418 = Fp(x4404.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4419 = x4418 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4419);
          reg = x4419;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4420 = Fp(x4408.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4421 = x4420 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4421);
          reg = x4421;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4422 = Fp(x4404.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4423 = x4422 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4423);
          reg = x4423;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4424 = Fp(x4408.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4425 = x4424 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4425);
          reg = x4425;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4426 = Fp(x4404.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4427 = x4426 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4427);
          reg = x4427;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4428 = Fp(x4408.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4429 = x4428 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4429);
          reg = x4429;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4430 = Fp(x4404.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4431 = x4430 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4431);
          reg = x4431;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4432 = Fp(x4408.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4433 = x4432 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4433);
          reg = x4433;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4434 = Fp(x4404.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4435 = x4434 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4435);
          reg = x4435;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4436 = Fp(x4408.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4437 = x4436 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4437);
          reg = x4437;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4438 = Fp(x4404.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4439 = x4438 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4439);
          reg = x4439;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4440 = Fp(x4408.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4441 = x4440 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4441);
          reg = x4441;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4442 = Fp(x4404.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4443 = x4442 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4443);
          reg = x4443;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4444 = Fp(x4408.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4445 = x4444 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4445);
          reg = x4445;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4446 = Fp(x4405.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4446);
          reg = x4446;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4447 = Fp(x4409.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4447);
          reg = x4447;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4448 = Fp(x4405.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4449 = x4448 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4449);
          reg = x4449;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4450 = Fp(x4409.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4451 = x4450 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4451);
          reg = x4451;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4452 = Fp(x4405.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4453 = x4452 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4453);
          reg = x4453;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4454 = Fp(x4409.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4455 = x4454 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4455);
          reg = x4455;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4456 = Fp(x4405.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4457 = x4456 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4457);
          reg = x4457;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4458 = Fp(x4409.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4459 = x4458 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4459);
          reg = x4459;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4460 = Fp(x4405.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4461 = x4460 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4461);
          reg = x4461;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4462 = Fp(x4409.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4463 = x4462 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4463);
          reg = x4463;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4464 = Fp(x4405.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4465 = x4464 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4465);
          reg = x4465;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4466 = Fp(x4409.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4467 = x4466 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4467);
          reg = x4467;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4468 = Fp(x4405.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4469 = x4468 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4469);
          reg = x4469;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4470 = Fp(x4409.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4471 = x4470 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4471);
          reg = x4471;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4472 = Fp(x4405.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4473 = x4472 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4473);
          reg = x4473;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4474 = Fp(x4409.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4475 = x4474 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4475);
          reg = x4475;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4476 = Fp(x4406.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4476);
          reg = x4476;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4477 = Fp(x4410.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4477);
          reg = x4477;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4478 = Fp(x4406.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4479 = x4478 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4479);
          reg = x4479;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4480 = Fp(x4410.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4481 = x4480 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4481);
          reg = x4481;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4482 = Fp(x4406.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4483 = x4482 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4483);
          reg = x4483;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4484 = Fp(x4410.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4485 = x4484 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4485);
          reg = x4485;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4486 = Fp(x4406.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4487 = x4486 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4487);
          reg = x4487;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4488 = Fp(x4410.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4489 = x4488 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4489);
          reg = x4489;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4490 = Fp(x4406.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4491 = x4490 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4491);
          reg = x4491;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4492 = Fp(x4410.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4493 = x4492 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4493);
          reg = x4493;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4494 = Fp(x4406.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4495 = x4494 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4495);
          reg = x4495;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4496 = Fp(x4410.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4497 = x4496 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4497);
          reg = x4497;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4498 = Fp(x4406.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4499 = x4498 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4499);
          reg = x4499;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4500 = Fp(x4410.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4501 = x4500 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4501);
          reg = x4501;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4502 = Fp(x4406.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4503 = x4502 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4503);
          reg = x4503;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4504 = Fp(x4410.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4505 = x4504 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4505);
          reg = x4505;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4506 = Fp(x4407.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4506);
          reg = x4506;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4507 = Fp(x4411.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4507);
          reg = x4507;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4508 = Fp(x4407.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4509 = x4508 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4509);
          reg = x4509;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4510 = Fp(x4411.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4511 = x4510 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4511);
          reg = x4511;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4512 = Fp(x4407.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4513 = x4512 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4513);
          reg = x4513;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4514 = Fp(x4411.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4515 = x4514 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4515);
          reg = x4515;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4516 = Fp(x4407.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4517 = x4516 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4517);
          reg = x4517;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4518 = Fp(x4411.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4519 = x4518 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4519);
          reg = x4519;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4520 = Fp(x4407.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4521 = x4520 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4521);
          reg = x4521;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4522 = Fp(x4411.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4523 = x4522 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4523);
          reg = x4523;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4524 = Fp(x4407.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4525 = x4524 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4525);
          reg = x4525;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4526 = Fp(x4411.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4527 = x4526 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4527);
          reg = x4527;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4528 = Fp(x4407.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4529 = x4528 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4529);
          reg = x4529;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4530 = Fp(x4411.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4531 = x4530 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4531);
          reg = x4531;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4532 = Fp(x4407.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4533 = x4532 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4533);
          reg = x4533;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4534 = Fp(x4411.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4535 = x4534 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4535);
          reg = x4535;
        }
      }
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4536 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4536 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4537 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x4537 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4538 = x4536 * x4537;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4539 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4539 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4540 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x4540 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4541 = x4539 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4542 = x4536 + x4541;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4543 = x4540 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4544 = x4537 + x4543;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4545 = x4539 * x4540;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4546 = x4545 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4547 = x4538 + x4546;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4548 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4549 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x4549 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4550 = x4548 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4551 = x4542 + x4550;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4552 = x4549 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4553 = x4544 + x4552;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4554 = x4548 * x4549;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4555 = x4554 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4556 = x4547 + x4555;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4557 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4558 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x4558 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4559 = x4557 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4560 = x4551 + x4559;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4561 = x4558 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4562 = x4553 + x4561;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4563 = x4557 * x4558;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4564 = x4563 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4565 = x4556 + x4564;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4566 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4566 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4567 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x4567 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4568 = x4566 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4569 = x4560 + x4568;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4570 = x4567 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4571 = x4562 + x4570;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4572 = x4566 * x4567;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4573 = x4572 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4574 = x4565 + x4573;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4575 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4576 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x4576 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4577 = x4575 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4578 = x4569 + x4577;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4579 = x4576 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4580 = x4571 + x4579;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4581 = x4575 * x4576;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4582 = x4581 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4583 = x4574 + x4582;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4584 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4585 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x4585 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4586 = x4584 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4587 = x4578 + x4586;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4588 = x4585 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4589 = x4580 + x4588;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4590 = x4584 * x4585;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4591 = x4590 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4592 = x4583 + x4591;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4593 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4594 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x4594 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4595 = x4593 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4596 = x4587 + x4595;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4597 = x4594 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4598 = x4589 + x4597;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4599 = x4593 * x4594;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4600 = x4599 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4601 = x4592 + x4600;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4602 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4603 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4603 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4604 = x4602 * x4603;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4605 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4606 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4606 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4607 = x4605 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4608 = x4602 + x4607;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4609 = x4606 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4610 = x4603 + x4609;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4611 = x4605 * x4606;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4612 = x4611 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4613 = x4604 + x4612;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4614 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4615 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4615 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4616 = x4614 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4617 = x4608 + x4616;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4618 = x4615 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4619 = x4610 + x4618;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4620 = x4614 * x4615;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4621 = x4620 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4622 = x4613 + x4621;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4623 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4624 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4624 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4625 = x4623 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4626 = x4617 + x4625;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4627 = x4624 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4628 = x4619 + x4627;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4629 = x4623 * x4624;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4630 = x4629 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4631 = x4622 + x4630;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4632 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4633 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4633 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4634 = x4632 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4635 = x4626 + x4634;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4636 = x4633 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4637 = x4628 + x4636;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4638 = x4632 * x4633;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4639 = x4638 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4640 = x4631 + x4639;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4641 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4642 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4642 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4643 = x4641 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4644 = x4635 + x4643;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4645 = x4642 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4646 = x4637 + x4645;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4647 = x4641 * x4642;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4648 = x4647 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4649 = x4640 + x4648;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4650 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4651 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4651 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4652 = x4650 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4653 = x4644 + x4652;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4654 = x4651 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4655 = x4646 + x4654;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4656 = x4650 * x4651;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4657 = x4656 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4658 = x4649 + x4657;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4659 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4660 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4660 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4661 = x4659 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4662 = x4653 + x4661;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4663 = x4660 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4664 = x4655 + x4663;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4665 = x4659 * x4660;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4666 = x4665 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4667 = x4658 + x4666;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4668 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4669 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4669 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4670 = x4668 * x4669;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4671 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4672 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4672 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4673 = x4671 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4674 = x4668 + x4673;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4675 = x4672 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4676 = x4669 + x4675;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4677 = x4671 * x4672;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4678 = x4677 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4679 = x4670 + x4678;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4680 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4681 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4681 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4682 = x4680 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4683 = x4674 + x4682;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4684 = x4681 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4685 = x4676 + x4684;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4686 = x4680 * x4681;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4687 = x4686 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4688 = x4679 + x4687;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4689 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4690 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4690 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4691 = x4689 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4692 = x4683 + x4691;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4693 = x4690 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4694 = x4685 + x4693;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4695 = x4689 * x4690;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4696 = x4695 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4697 = x4688 + x4696;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4698 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4698 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4699 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4699 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4700 = x4698 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4701 = x4692 + x4700;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4702 = x4699 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4703 = x4694 + x4702;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4704 = x4698 * x4699;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4705 = x4704 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4706 = x4697 + x4705;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4707 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4707 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4708 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4708 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4709 = x4707 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4710 = x4701 + x4709;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4711 = x4708 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4712 = x4703 + x4711;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4713 = x4707 * x4708;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4714 = x4713 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4715 = x4706 + x4714;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4716 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4716 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4717 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4717 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4718 = x4716 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4719 = x4710 + x4718;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4720 = x4717 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4721 = x4712 + x4720;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4722 = x4716 * x4717;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4723 = x4722 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4724 = x4715 + x4723;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4725 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4726 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4726 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4727 = x4725 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4728 = x4719 + x4727;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4729 = x4726 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4730 = x4721 + x4729;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4731 = x4725 * x4726;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4732 = x4731 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4733 = x4724 + x4732;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4734 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4735 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4735 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4736 = x4734 * x4735;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4737 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4738 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4738 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4739 = x4737 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4740 = x4734 + x4739;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4741 = x4738 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4742 = x4735 + x4741;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4743 = x4737 * x4738;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4744 = x4743 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4745 = x4736 + x4744;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4746 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4747 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4747 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4748 = x4746 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4749 = x4740 + x4748;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4750 = x4747 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4751 = x4742 + x4750;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4752 = x4746 * x4747;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4753 = x4752 * x75;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4754 = x4745 + x4753;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4755 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4756 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4756 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4757 = x4755 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4758 = x4749 + x4757;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4759 = x4756 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4760 = x4751 + x4759;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4761 = x4755 * x4756;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4762 = x4761 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4763 = x4754 + x4762;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4764 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4764 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4765 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4765 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4766 = x4764 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4767 = x4758 + x4766;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4768 = x4765 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4769 = x4760 + x4768;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4770 = x4764 * x4765;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4771 = x4770 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4772 = x4763 + x4771;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4773 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4773 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4774 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4774 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4775 = x4773 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4776 = x4767 + x4775;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4777 = x4774 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4778 = x4769 + x4777;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4779 = x4773 * x4774;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4780 = x4779 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4781 = x4772 + x4780;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4782 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4782 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4783 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4783 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4784 = x4782 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4785 = x4776 + x4784;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4786 = x4783 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4787 = x4778 + x4786;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4788 = x4782 * x4783;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4789 = x4788 * x53;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4790 = x4781 + x4789;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4791 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x4791 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4792 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4792 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4793 = x4791 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4794 = x4785 + x4793;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4795 = x4792 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4796 = x4787 + x4795;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4797 = x4791 * x4792;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4798 = x4797 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4799 = x4790 + x4798;
      host_args.at(0) = x4404;
      host_args.at(1) = x4405;
      host_args.at(2) = x4406;
      host_args.at(3) = x4407;
      host_args.at(4) = x4596;
      host_args.at(5) = x4662;
      host_args.at(6) = x4728;
      host_args.at(7) = x4794;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4408;
      host_args.at(1) = x4409;
      host_args.at(2) = x4410;
      host_args.at(3) = x4411;
      host_args.at(4) = x4598;
      host_args.at(5) = x4664;
      host_args.at(6) = x4730;
      host_args.at(7) = x4796;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4412;
      host_args.at(1) = x4413;
      host_args.at(2) = x4414;
      host_args.at(3) = x4415;
      host_args.at(4) = x4601;
      host_args.at(5) = x4667;
      host_args.at(6) = x4733;
      host_args.at(7) = x4799;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4800 = x4404 - x4596;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4800 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4801 = x4405 - x4662;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4801 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4802 = x4406 - x4728;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4802 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4803 = x4407 - x4794;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4803 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4804 = x4408 - x4598;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4804 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4805 = x4409 - x4664;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4805 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4806 = x4410 - x4730;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4806 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4807 = x4411 - x4796;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4807 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4808 = x4412 - x4601;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4808 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4809 = x4413 - x4667;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4809 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4810 = x4414 - x4733;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4810 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4811 = x4415 - x4799;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4811 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4812 = x596 + x75;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4813 = Fp(x4812.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4813);
          reg = x4813;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4814 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4814 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4815 = x4812 - x4814;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4816 = x4815 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4817 = Fp(x4816.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4817);
          reg = x4817;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4818 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4818 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4819 = x4816 - x4818;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4820 = x4819 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4821 = Fp(x4820.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4821);
          reg = x4821;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4822 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4822 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4823 = x4820 - x4822;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4824 = x4823 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4825 = Fp(x4824.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4825);
          reg = x4825;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4826 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4826 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4827 = x4824 - x4826;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4828 = x4827 * x73;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4828);
        reg = x4828;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4829 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4829 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4830 = x93 - x4829;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4831 = x4829 * x4830;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4831);
        reg = x4831;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4832 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4832 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4833 = x90 - x4829;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4834 = x4832 * x4833;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4834 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/compute.cpp":235:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
    }
    // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4835 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x4835 != Fp::invalid());
    if (x4835 != 0) {
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4836 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4837 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4838 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4839 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4839 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4840 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x4840 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4841 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x4841 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4842 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x4842 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4843 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x4843 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4844 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x4844 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4845 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x4845 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4846 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x4846 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4847 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x4847 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4848 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x4848 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4849 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x4849 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4850 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x4850 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4851 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x4851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":135:51))
      auto x4852 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x4852 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":136:51))
      auto x4853 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x4853 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4854 = Fp(x4839.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4855 = x4854 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4855);
          reg = x4855;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4856 = Fp(x4839.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4857 = x4856 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4857);
          reg = x4857;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4858 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4858 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4859 = x4858 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4860 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x4860 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4861 = x4860 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4862 = x4859 + x4861;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4863 = x4839 - x4862;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4863 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4864 = Fp(x4843.asUInt32() & x62.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4865 = x4864 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4865);
          reg = x4865;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4866 = Fp(x4843.asUInt32() & x50.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4867 = x4866 * x90;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4867);
          reg = x4867;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4868 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4868 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4869 = x4868 * x62;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4870 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x4870 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4871 = x4870 * x54;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4872 = x4869 + x4871;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4873 = x4843 - x4872;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4873 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      auto x4874 = x4852 * x4858;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4874);
        reg = x4874;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":140:29)
      auto x4875 = x93 - x4853;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4876 = x4852 * x4875;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4877 = x4876 * x4868;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4877);
        reg = x4877;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4878 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4878 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":142:47)
      auto x4879 = x93 - x4878;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4880 = x4879 * x4836;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4881 = x4879 * x4837;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4882 = x4879 * x4838;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4883 = x4879 * x4839;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4884 = x4880 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4885 = x4881 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4886 = x4882 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4887 = x4883 + x89;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4888 = x4878 * x4836;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4889 = x4878 * x4837;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4890 = x4878 * x4838;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4891 = x4878 * x4839;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4892 = x4884 - x4888;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4893 = x4885 - x4889;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4894 = x4886 - x4890;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4895 = x4887 - x4891;
      // loc("cirgen/circuit/rv32im/divide.cpp":143:17)
      auto x4896 = x4878 * x4853;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4897 = x4892 - x4896;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4898 = x4893 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4899 = x4897 + x4898;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4900 = Fp(x4899.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4900);
          reg = x4900;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4901 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x4901 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4902 = x4899 - x4901;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4903 = x4902 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4904 = Fp(x4903.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4904);
          reg = x4904;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4905 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x4905 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4906 = x4903 - x4905;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4907 = x4906 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4907);
        reg = x4907;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4908 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x4908 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4909 = x4908 + x4894;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4910 = x4895 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4911 = x4909 + x4910;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4912 = Fp(x4911.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4912);
          reg = x4912;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4913 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x4913 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4914 = x4911 - x4913;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4915 = x4914 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4916 = Fp(x4915.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4916);
          reg = x4916;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4917 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4917 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4918 = x4915 - x4917;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4919 = x4918 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4919);
        reg = x4919;
      }
      host_args.at(0) = x4836;
      host_args.at(1) = x4837;
      host_args.at(2) = x4838;
      host_args.at(3) = x4839;
      host_args.at(4) = x4901;
      host_args.at(5) = x4905;
      host_args.at(6) = x4913;
      host_args.at(7) = x4917;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4920 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4920 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":145:47)
      auto x4921 = x93 - x4920;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4922 = x4921 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4923 = x4921 * x4841;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4924 = x4921 * x4842;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4925 = x4921 * x4843;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4926 = x4922 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4927 = x4923 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4928 = x4924 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4929 = x4925 + x89;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4930 = x4920 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4931 = x4920 * x4841;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4932 = x4920 * x4842;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4933 = x4920 * x4843;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4934 = x4926 - x4930;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4935 = x4927 - x4931;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4936 = x4928 - x4932;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4937 = x4929 - x4933;
      // loc("cirgen/circuit/rv32im/divide.cpp":146:17)
      auto x4938 = x4920 * x4853;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4939 = x4934 - x4938;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4940 = x4935 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4941 = x4939 + x4940;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4942 = Fp(x4941.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4942);
          reg = x4942;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4943 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4943 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4944 = x4941 - x4943;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4945 = x4944 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4946 = Fp(x4945.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4946);
          reg = x4946;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4947 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4947 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4948 = x4945 - x4947;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4949 = x4948 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4949);
        reg = x4949;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4950 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4950 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4951 = x4950 + x4936;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4952 = x4937 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4953 = x4951 + x4952;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4954 = Fp(x4953.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4954);
          reg = x4954;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4955 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4955 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4956 = x4953 - x4955;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4957 = x4956 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4958 = Fp(x4957.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4958);
          reg = x4958;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4959 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4959 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4960 = x4957 - x4959;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4961 = x4960 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4961);
        reg = x4961;
      }
      host_args.at(0) = x4840;
      host_args.at(1) = x4841;
      host_args.at(2) = x4842;
      host_args.at(3) = x4843;
      host_args.at(4) = x4943;
      host_args.at(5) = x4947;
      host_args.at(6) = x4955;
      host_args.at(7) = x4959;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":137:26)
      auto x4962 = x4947 * x88;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x4963 = x4943 + x4962;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4964 = (x4963 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4964);
          reg = x4964;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4965 = inv(x4963);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4965);
          reg = x4965;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4966 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4966 != Fp::invalid());
      if (x4966 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4963 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4967 = x93 - x4966;
      if (x4967 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4968 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x4968 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4969 = x4963 * x4968;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4970 = x4969 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4970 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x4971 = x4959 * x88;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4972 = x4955 + x4971;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x4973 = x4967 * x77;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4974 = x4972 + x4973;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4975 = (x4974 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4975);
          reg = x4975;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4976 = inv(x4974);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4976);
          reg = x4976;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4977 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4977 != Fp::invalid());
      if (x4977 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4974 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4978 = x93 - x4977;
      if (x4978 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4979 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x4979 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4980 = x4974 * x4979;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4981 = x4980 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4981 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4982 = x4878 + x4920;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x4983 = x4878 * x90;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x4984 = x4983 * x4920;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4985 = x4982 - x4984;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:64)
      auto x4986 = x4977 * x4878;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4987 = x4985 - x4986;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:3)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4987);
        reg = x4987;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4988 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4988 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":151:46)
      auto x4989 = x93 - x4988;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4990 = x4989 * x4844;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4991 = x4989 * x4845;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4992 = x4989 * x4846;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4993 = x4989 * x4847;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4994 = x4990 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4995 = x4991 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4996 = x4992 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4997 = x4993 + x89;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4998 = x4988 * x4844;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4999 = x4988 * x4845;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5000 = x4988 * x4846;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5001 = x4988 * x4847;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5002 = x4994 - x4998;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5003 = x4995 - x4999;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5004 = x4996 - x5000;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5005 = x4997 - x5001;
      // loc("cirgen/circuit/rv32im/divide.cpp":152:16)
      auto x5006 = x4988 * x4853;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5007 = x5002 - x5006;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5008 = x5003 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5009 = x5007 + x5008;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5010 = Fp(x5009.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5010);
          reg = x5010;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5011 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5011 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5012 = x5009 - x5011;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5013 = x5012 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5014 = Fp(x5013.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5014);
          reg = x5014;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5015 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5015 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5016 = x5013 - x5015;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5017 = x5016 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5017);
        reg = x5017;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5018 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5018 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5019 = x5018 + x5004;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5020 = x5005 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5021 = x5019 + x5020;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5022 = Fp(x5021.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5022);
          reg = x5022;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5023 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5023 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5024 = x5021 - x5023;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5025 = x5024 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5026 = Fp(x5025.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5026);
          reg = x5026;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5027 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5027 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5028 = x5025 - x5027;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5029 = x5028 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5029);
        reg = x5029;
      }
      host_args.at(0) = x4844;
      host_args.at(1) = x4845;
      host_args.at(2) = x4846;
      host_args.at(3) = x4847;
      host_args.at(4) = x5011;
      host_args.at(5) = x5015;
      host_args.at(6) = x5023;
      host_args.at(7) = x5027;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5030 = x4879 * x4848;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5031 = x4879 * x4849;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5032 = x4879 * x4850;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5033 = x4879 * x4851;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5034 = x5030 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5035 = x5031 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5036 = x5032 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5037 = x5033 + x89;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5038 = x4878 * x4848;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5039 = x4878 * x4849;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5040 = x4878 * x4850;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5041 = x4878 * x4851;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5042 = x5034 - x5038;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5043 = x5035 - x5039;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5044 = x5036 - x5040;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5045 = x5037 - x5041;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5046 = x5042 - x4896;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5047 = x5043 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5048 = x5046 + x5047;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5049 = Fp(x5048.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5049);
          reg = x5049;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5050 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5050 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5051 = x5048 - x5050;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5052 = x5051 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5053 = Fp(x5052.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5053);
          reg = x5053;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5054 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5054 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5055 = x5052 - x5054;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5056 = x5055 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5056);
        reg = x5056;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5057 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5057 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5058 = x5057 + x5044;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5059 = x5045 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5060 = x5058 + x5059;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5061 = Fp(x5060.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5061);
          reg = x5061;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5062 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5062 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5063 = x5060 - x5062;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5064 = x5063 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5065 = Fp(x5064.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5065);
          reg = x5065;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5066 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5066 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5067 = x5064 - x5066;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5068 = x5067 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5068);
        reg = x5068;
      }
      host_args.at(0) = x4848;
      host_args.at(1) = x4849;
      host_args.at(2) = x4850;
      host_args.at(3) = x4851;
      host_args.at(4) = x5050;
      host_args.at(5) = x5054;
      host_args.at(6) = x5062;
      host_args.at(7) = x5066;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5069 = x4943 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5070 = x4947 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5071 = x4955 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5072 = x4959 + x89;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5073 = x5069 - x93;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5074 = x5073 - x5050;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5075 = x5070 - x5054;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5076 = x5071 - x5062;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5077 = x5072 - x5066;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5078 = x5075 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5079 = x5074 + x5078;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5080 = Fp(x5079.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5080);
          reg = x5080;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5081 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5081 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5082 = x5079 - x5081;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5083 = x5082 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5084 = Fp(x5083.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5084);
          reg = x5084;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5085 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5085 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5086 = x5083 - x5085;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5087 = x5086 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5087);
        reg = x5087;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5088 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5088 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5089 = x5088 + x5076;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5090 = x5077 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5091 = x5089 + x5090;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5092 = Fp(x5091.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5092);
          reg = x5092;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5093 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5093 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5094 = x5091 - x5093;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5095 = x5094 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5096 = Fp(x5095.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5096);
          reg = x5096;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5097 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5097 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5098 = x5095 - x5097;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5099 = x5098 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5099);
        reg = x5099;
      }
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5100 = x5011 * x4943;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5101 = x5100 + x5050;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5102 = x5011 * x4947;
      // loc("cirgen/components/u32.cpp":261:51)
      auto x5103 = x5015 * x4943;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5104 = x5102 + x5103;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5105 = x5104 + x5054;
      // loc("cirgen/components/u32.cpp":261:14)
      auto x5106 = x5105 * x88;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5107 = x5101 + x5106;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5108 = Fp(x5107.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5108);
          reg = x5108;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5109 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5109 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5110 = x5107 - x5109;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5111 = x5110 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5112 = Fp(x5111.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5112);
          reg = x5112;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5113 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5113 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5114 = x5111 - x5113;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5115 = x5114 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5116 = Fp(x5115.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5116);
          reg = x5116;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5117 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5117 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5118 = x5115 - x5117;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5119 = x5118 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5119);
        reg = x5119;
      }
      // loc("Top/Mux/4/Mux/7/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5120 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5120 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5121 = x5120 * x88;
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5122 = x5121 + x5117;
      // loc("cirgen/components/u32.cpp":266:7)
      auto x5123 = x5015 * x4959;
      // loc("cirgen/components/u32.cpp":266:7)
      if (x5123 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:266");
      // loc("cirgen/components/u32.cpp":267:7)
      auto x5124 = x5023 * x4955;
      // loc("cirgen/components/u32.cpp":267:7)
      if (x5124 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:267");
      // loc("cirgen/components/u32.cpp":268:7)
      auto x5125 = x5027 * x4947;
      // loc("cirgen/components/u32.cpp":268:7)
      if (x5125 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:268");
      // loc("cirgen/components/u32.cpp":269:7)
      auto x5126 = x5023 * x4959;
      // loc("cirgen/components/u32.cpp":269:7)
      if (x5126 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:269");
      // loc("cirgen/components/u32.cpp":270:7)
      auto x5127 = x5027 * x4955;
      // loc("cirgen/components/u32.cpp":270:7)
      if (x5127 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:270");
      // loc("cirgen/components/u32.cpp":271:7)
      auto x5128 = x5027 * x4959;
      // loc("cirgen/components/u32.cpp":271:7)
      if (x5128 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:271");
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5129 = x5023 * x4943;
      // loc("cirgen/components/u32.cpp":273:45)
      auto x5130 = x5015 * x4947;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5131 = x5129 + x5130;
      // loc("cirgen/components/u32.cpp":274:15)
      auto x5132 = x5011 * x4955;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5133 = x5131 + x5132;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5134 = x5133 + x5062;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5135 = x5134 + x5122;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5136 = x5027 * x4943;
      // loc("cirgen/components/u32.cpp":275:52)
      auto x5137 = x5023 * x4947;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5138 = x5136 + x5137;
      // loc("cirgen/components/u32.cpp":276:22)
      auto x5139 = x5015 * x4955;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5140 = x5138 + x5139;
      // loc("cirgen/components/u32.cpp":276:52)
      auto x5141 = x5011 * x4959;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5142 = x5140 + x5141;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5143 = x5142 + x5066;
      // loc("cirgen/components/u32.cpp":275:15)
      auto x5144 = x5143 * x88;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5145 = x5135 + x5144;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5146 = Fp(x5145.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5146);
          reg = x5146;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5147 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5147 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5148 = x5145 - x5147;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5149 = x5148 * x87;
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5149);
        reg = x5149;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x5150 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5150 != Fp::invalid());
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5151 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5151 != Fp::invalid());
      host_args.at(0) = x5109;
      host_args.at(1) = x5113;
      host_args.at(2) = x5147;
      host_args.at(3) = x5150;
      host_args.at(4) = x5151;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5152 = x5109 - x4901;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5152 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5153 = x5113 - x4905;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5153 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5154 = x5147 - x4913;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5154 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5155 = x5150 - x4917;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5155 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      if (x4978 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5156 = x5151 - x93;
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5156 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5157 = x596 + x75;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5158 = Fp(x5157.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5158);
          reg = x5158;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5159 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5159 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5160 = x5157 - x5159;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5161 = x5160 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5162 = Fp(x5161.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5162);
          reg = x5162;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5163 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5163 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5164 = x5161 - x5163;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5165 = x5164 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5166 = Fp(x5165.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5166);
          reg = x5166;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5167 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5167 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5168 = x5165 - x5167;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5169 = x5168 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5170 = Fp(x5169.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5170);
          reg = x5170;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5171 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5171 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5172 = x5169 - x5171;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5173 = x5172 * x73;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5173);
        reg = x5173;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5174 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5175 = x93 - x5174;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5176 = x5174 * x5175;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5176);
        reg = x5176;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5177 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5178 = x90 - x5174;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5179 = x5177 * x5178;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5179 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":164:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
    }
    // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/components/mux.h":39:25))
    auto x5180 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x5180 != Fp::invalid());
    if (x5180 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5181 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5181 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":128:41)
      auto x5182 = x596 * x73;
      {
        host_args.at(0) = x5182;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5183 = host_outs.at(0);
        auto x5184 = host_outs.at(1);
        auto x5185 = host_outs.at(2);
        auto x5186 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5183);
          reg = x5183;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5184);
          reg = x5184;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5185);
          reg = x5185;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5186);
          reg = x5186;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5187 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5187 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5188 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5188 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5189 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5189 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5190 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5190 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5182);
        reg = x5182;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5181);
        reg = x5181;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5187);
        reg = x5187;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5188);
        reg = x5188;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5189);
        reg = x5189;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5190);
        reg = x5190;
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":130:6)
      auto x5191 = x5187 - x27;
      // loc("cirgen/circuit/rv32im/ecall.cpp":130:6)
      if (x5191 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:130");
      // loc("cirgen/circuit/rv32im/ecall.cpp":131:7)
      if (x5188 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:131");
      // loc("cirgen/circuit/rv32im/ecall.cpp":132:7)
      if (x5189 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:132");
      // loc("cirgen/circuit/rv32im/ecall.cpp":133:7)
      if (x5190 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:133");
      {
        host_args.at(0) = x26;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5192 = host_outs.at(0);
        auto x5193 = host_outs.at(1);
        auto x5194 = host_outs.at(2);
        auto x5195 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5192);
          reg = x5192;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5193);
          reg = x5193;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5194);
          reg = x5194;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5195);
          reg = x5195;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5196 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5196 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5197 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5197 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5198 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5198 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5199 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5199 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x26);
        reg = x26;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5181);
        reg = x5181;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5196);
        reg = x5196;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5197);
        reg = x5197;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5198);
        reg = x5198;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5199);
        reg = x5199;
      }
      {
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5200 = (x5196 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5201 = x5196 - x93;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5202 = (x5201 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5202);
          reg = x5202;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5203 = x5196 - x90;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5204 = (x5203 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5204);
          reg = x5204;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5205 = x5196 - x74;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5206 = (x5205 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5206);
          reg = x5206;
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5207 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5207 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5208 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5208 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5209 = x5208 * x90;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5210 = x5207 + x5209;
      // loc("Top/Mux/4/Mux/8/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5211 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5211 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5212 = x5211 * x74;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5213 = x5210 + x5212;
      // loc("./cirgen/components/onehot.h":40:8)
      auto x5214 = x5213 - x5196;
      // loc("./cirgen/components/onehot.h":40:8)
      if (x5214 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":140:47)
        auto x5215 = (x5213 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":140:47)
        auto x5216 = x93 - x5215;
        if (x5216 != 0) {
          host_args.at(0) = x5196;
          host_args.at(1) = x5197;
          host_args.at(2) = x5198;
          host_args.at(3) = x5199;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":39:25))
      auto x5217 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5217 != Fp::invalid());
      if (x5217 != 0) {
        {
          host_args.at(0) = x5196;
          host_args.at(1) = x5197;
          host_args.at(2) = x5198;
          host_args.at(3) = x5199;
          host(ctx, "halt", "", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5218 = x596 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5219 = Fp(x5218.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5219);
            reg = x5219;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5220 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5220 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5221 = x5218 - x5220;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5222 = x5221 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5223 = Fp(x5222.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5223);
            reg = x5223;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5224 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5224 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5225 = x5222 - x5224;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5226 = x5225 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5227 = Fp(x5226.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5227);
            reg = x5227;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5228 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5228 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5229 = x5226 - x5228;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5230 = x5229 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5231 = Fp(x5230.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5231);
            reg = x5231;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5232 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5232 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5233 = x5230 - x5232;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5234 = x5233 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5234);
          reg = x5234;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5235 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5235 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5236 = x93 - x5235;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5237 = x5235 * x5236;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5237);
          reg = x5237;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5238 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5238 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5239 = x90 - x5235;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5240 = x5238 * x5239;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5240 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":24:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
      if (x5207 != 0) {
        {
          host_args.at(0) = x25;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5241 = host_outs.at(0);
          auto x5242 = host_outs.at(1);
          auto x5243 = host_outs.at(2);
          auto x5244 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5241);
            reg = x5241;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5242);
            reg = x5242;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5243);
            reg = x5243;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5244);
            reg = x5244;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5245 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5245 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5246 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5246 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5247 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5247 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5248 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5248 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5245);
          reg = x5245;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5246);
          reg = x5246;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5247);
          reg = x5247;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5248);
          reg = x5248;
        }
        {
          host_args.at(0) = x24;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5249 = host_outs.at(0);
          auto x5250 = host_outs.at(1);
          auto x5251 = host_outs.at(2);
          auto x5252 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5249);
            reg = x5249;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5250);
            reg = x5250;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5251);
            reg = x5251;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5252);
            reg = x5252;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5253 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5253 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5254 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5254 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5255 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5255 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5256 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5256 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5253);
          reg = x5253;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5254);
          reg = x5254;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5255);
          reg = x5255;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5256);
          reg = x5256;
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5257 = (x5245 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5257);
            reg = x5257;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5258 = x5245 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5259 = (x5258 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5259);
            reg = x5259;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5260 = x5245 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5261 = (x5260 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5261);
            reg = x5261;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5262 = x5245 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5263 = (x5262 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5263);
            reg = x5263;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5264 = x5245 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5265 = (x5264 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5265);
            reg = x5265;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5266 = x5245 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5267 = (x5266 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5267);
            reg = x5267;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5268 = x5245 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5269 = (x5268 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5269);
            reg = x5269;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5270 = x5245 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5271 = (x5270 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5271);
            reg = x5271;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5272 = x5245 - x68;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5273 = (x5272 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5273);
            reg = x5273;
          }
        }
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5274 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x5274 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5275 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x5275 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5276 = x5275 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5277 = x5274 + x5276;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5278 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x5278 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5279 = x5278 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5280 = x5277 + x5279;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5281 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x5281 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5282 = x5281 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5283 = x5280 + x5282;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5284 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x5284 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5285 = x5284 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5286 = x5283 + x5285;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5287 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x5287 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5288 = x5287 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5289 = x5286 + x5288;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5290 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x5290 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5291 = x5290 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5292 = x5289 + x5291;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5293 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x5293 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5294 = x5293 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5295 = x5292 + x5294;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x5296 = x5295 - x5245;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x5296 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":43:24))
        auto x5297 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x5297 != Fp::invalid());
        if (x5297 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5298 = x5254 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5299 = x5298 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][36] = x5299;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5300 = x5256 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5301 = x5300 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][37] = x5301;
        }
        if (x5274 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5302 = x5254 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5303 = x5302 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][38] = x5303;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5304 = x5256 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5305 = x5304 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][39] = x5305;
        }
        if (x5275 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5306 = x5254 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5307 = x5306 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][40] = x5307;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5308 = x5256 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5309 = x5308 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][41] = x5309;
        }
        if (x5278 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5310 = x5254 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5311 = x5310 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][42] = x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5312 = x5256 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5313 = x5312 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][43] = x5313;
        }
        if (x5281 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5314 = x5254 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5315 = x5314 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][44] = x5315;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5316 = x5256 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5317 = x5316 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][45] = x5317;
        }
        if (x5284 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5318 = x5254 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5319 = x5318 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][46] = x5319;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5320 = x5256 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5321 = x5320 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][47] = x5321;
        }
        if (x5287 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5322 = x5254 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5323 = x5322 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][48] = x5323;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5324 = x5256 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5325 = x5324 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][49] = x5325;
        }
        if (x5290 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5326 = x5254 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5327 = x5326 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][50] = x5327;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5328 = x5256 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5329 = x5328 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][51] = x5329;
        }
        if (x5293 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5330 = x5254 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5331 = x5330 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][52] = x5331;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5332 = x5256 * x88;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5333 = x5332 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][53] = x5333;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":50:17)
        auto x5334 = x596 + x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5335 = x5334 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5336 = Fp(x5335.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5336);
            reg = x5336;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5337 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5337 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5338 = x5335 - x5337;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5339 = x5338 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5340 = Fp(x5339.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5340);
            reg = x5340;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5341 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5341 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5342 = x5339 - x5341;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5343 = x5342 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5344 = Fp(x5343.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5344);
            reg = x5344;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5345 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5345 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5346 = x5343 - x5345;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5347 = x5346 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5348 = Fp(x5347.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5348);
            reg = x5348;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5349 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5349 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5350 = x5347 - x5349;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5351 = x5350 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5351);
          reg = x5351;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5352 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5352 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5353 = x93 - x5352;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5354 = x5352 * x5353;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5354);
          reg = x5354;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5355 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5355 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5356 = x90 - x5352;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5357 = x5355 * x5356;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5357 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":51:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
      }
      if (x5208 != 0) {
        {
          host_args.at(0) = x25;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5358 = host_outs.at(0);
          auto x5359 = host_outs.at(1);
          auto x5360 = host_outs.at(2);
          auto x5361 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5358);
            reg = x5358;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5359);
            reg = x5359;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5360);
            reg = x5360;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5361);
            reg = x5361;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5362 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5362 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5363 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5363 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5364 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5364 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5365 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5365 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5362);
          reg = x5362;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5363);
          reg = x5363;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5364);
          reg = x5364;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5365);
          reg = x5365;
        }
        {
          host_args.at(0) = x24;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5366 = host_outs.at(0);
          auto x5367 = host_outs.at(1);
          auto x5368 = host_outs.at(2);
          auto x5369 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5366);
            reg = x5366;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5367);
            reg = x5367;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5368);
            reg = x5368;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5369);
            reg = x5369;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5370 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5370 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5371 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5371 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5372 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5372 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5373 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5373 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5370);
          reg = x5370;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5371);
          reg = x5371;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5372);
          reg = x5372;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5373);
          reg = x5373;
        }
        {
          // loc("./cirgen/components/u32.h":25:12)
          auto x5374 = x5371 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5375 = x5370 + x5374;
          // loc("./cirgen/components/u32.h":26:12)
          auto x5376 = x5372 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5377 = x5375 + x5376;
          // loc("./cirgen/components/u32.h":27:12)
          auto x5378 = x5373 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5379 = x5377 + x5378;
          // loc("cirgen/circuit/rv32im/ecall.cpp":78:22)
          auto x5380 = Fp(x5379.asUInt32() & x74.asUInt32());
          if (x5380 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:26)
            auto x5381 = x5379 - x5380;
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:26)
            auto x5382 = x5381 + x75;
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:25)
            auto x5383 = x5382 * x73;
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:7)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5383);
              reg = x5383;
            }
            // loc("cirgen/circuit/rv32im/ecall.cpp":81:42)
            auto x5384 = x5380 - x93;
            // loc("./cirgen/components/bits.h":61:23)
            {
              auto& reg = args[2][79 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5384);
              reg = x5384;
            }
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":83:23)
          auto x5385 = (x5380 == 0) ? Fp(1) : Fp(0);
          if (x5385 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":84:25)
            auto x5386 = x5379 * x73;
            // loc("cirgen/circuit/rv32im/ecall.cpp":84:7)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5386);
              reg = x5386;
            }
            // loc("./cirgen/components/bits.h":61:23)
            {
              auto& reg = args[2][79 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x74);
              reg = x74;
            }
          }
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5387 = x5371 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5388 = x5370 + x5387;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5389 = x5372 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5390 = x5388 + x5389;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5391 = x5373 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5392 = x5390 + x5391;
        // loc("Top/Mux/4/Mux/8/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5393 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x5393 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5394 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x5394 != Fp::invalid());
        host_args.at(0) = x5392;
        host_args.at(1) = x5393;
        host_args.at(2) = x5394;
        host(ctx, "log", "Calculated orig = %u, output chunks = %u, first cycle-1 = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:7)
        auto x5395 = x5393 - x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:6)
        auto x5396 = x5395 * x75;
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:44)
        auto x5397 = x5394 + x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:6)
        auto x5398 = x5396 + x5397;
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:6)
        auto x5399 = x5392 - x5398;
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:6)
        if (x5399 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:93");
        // loc("cirgen/circuit/rv32im/ecall.cpp":97:31)
        auto x5400 = x5362 * x73;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5401 = Fp(x5400.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5401);
            reg = x5401;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5402 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x5402 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5403 = x5400 - x5402;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5404 = x5403 * x87;
        // loc("cirgen/circuit/rv32im/ecall.cpp":97:7)
        if (x5404 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:97");
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5405 = Fp(x5400.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5405);
            reg = x5405;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5406 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x5406 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5407 = x5400 - x5406;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5408 = x5407 * x87;
        // loc("cirgen/circuit/rv32im/ecall.cpp":98:7)
        if (x5408 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:98");
        {
          host_args.at(0) = x5392;
          host(ctx, "syscallInit", "", host_args.data(), 1, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5409 = x596 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5410 = Fp(x5409.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5410);
            reg = x5410;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5411 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5411 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5412 = x5409 - x5411;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5413 = x5412 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5414 = Fp(x5413.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5414);
            reg = x5414;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5415 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5415 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5416 = x5413 - x5415;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5417 = x5416 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5418 = Fp(x5417.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5418);
            reg = x5418;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5419 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5419 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5420 = x5417 - x5419;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5421 = x5420 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5422 = Fp(x5421.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5422);
            reg = x5422;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5423 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5423 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5424 = x5421 - x5423;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5425 = x5424 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5425);
          reg = x5425;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5426 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5426 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5427 = x93 - x5426;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5428 = x5426 * x5427;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5428);
          reg = x5428;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5429 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5429 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5430 = x90 - x5426;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5431 = x5429 * x5430;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5431 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":103:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
        host(ctx, "log", "Set next major to be ecall copy in", host_args.data(), 0, host_outs.data(), 0);
      }
      if (x5211 != 0) {
        {
          host_args.at(0) = x25;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5432 = host_outs.at(0);
          auto x5433 = host_outs.at(1);
          auto x5434 = host_outs.at(2);
          auto x5435 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5432);
            reg = x5432;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5433);
            reg = x5433;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5434);
            reg = x5434;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5435);
            reg = x5435;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5436 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5436 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5437 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5437 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5438 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5438 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5439 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5439 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5436);
          reg = x5436;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5437);
          reg = x5437;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5438);
          reg = x5438;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5439);
          reg = x5439;
        }
        {
          host_args.at(0) = x24;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5440 = host_outs.at(0);
          auto x5441 = host_outs.at(1);
          auto x5442 = host_outs.at(2);
          auto x5443 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5440);
            reg = x5440;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5441);
            reg = x5441;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5442);
            reg = x5442;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5443);
            reg = x5443;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5444 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5444 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5445 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5445 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5446 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5446 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5447 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5447 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5444);
          reg = x5444;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5445);
          reg = x5445;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5446);
          reg = x5446;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5447);
          reg = x5447;
        }
        {
          host_args.at(0) = x23;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5448 = host_outs.at(0);
          auto x5449 = host_outs.at(1);
          auto x5450 = host_outs.at(2);
          auto x5451 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5448);
            reg = x5448;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5449);
            reg = x5449;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5450);
            reg = x5450;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5451);
            reg = x5451;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5452 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5452 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5453 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5453 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5454 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5454 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5455 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5455 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x23);
          reg = x23;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5452);
          reg = x5452;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5453);
          reg = x5453;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5454);
          reg = x5454;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5455);
          reg = x5455;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":117:17)
        auto x5456 = x596 + x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5457 = x5456 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5458 = Fp(x5457.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5458);
            reg = x5458;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5459 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5459 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5460 = x5457 - x5459;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5461 = x5460 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5462 = Fp(x5461.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5462);
            reg = x5462;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5463 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5463 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5464 = x5461 - x5463;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5465 = x5464 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5466 = Fp(x5465.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5466);
            reg = x5466;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5467 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5467 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5468 = x5465 - x5467;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5469 = x5468 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5470 = Fp(x5469.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5470);
            reg = x5470;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5471 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5471 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5472 = x5469 - x5471;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5473 = x5472 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5473);
          reg = x5473;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5474 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5474 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5475 = x93 - x5474;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5476 = x5474 * x5475;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5476);
          reg = x5476;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5477 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5477 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5478 = x90 - x5474;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5479 = x5477 * x5478;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5479 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":118:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/components/mux.h":39:25))
    auto x5480 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x5480 != Fp::invalid());
    if (x5480 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5481 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5481 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/sha.cpp":174:69))
      auto x5482 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x5482 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[12](Reg)"("cirgen/circuit/rv32im/sha.cpp":175:77))
      auto x5483 = args[2][106 * steps + ((cycle - 1) & mask)];
      assert(x5483 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":176:35)
      auto x5484 = x5482 + x5483;
      if (x5484 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":178:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x75);
          reg = x75;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5485 = x93 - x5482;
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5486 = x5485 - x5483;
      if (x5486 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5487 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5487 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5487);
          reg = x5487;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":183:40))
        auto x5488 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5488 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5489 = x5488 - x93;
        // loc("cirgen/circuit/rv32im/sha.cpp":183:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5489);
          reg = x5489;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5490 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x5490 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5491 = (x5490 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5491);
          reg = x5491;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5492 = inv(x5490);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5492);
          reg = x5492;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5493 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x5493 != Fp::invalid());
      if (x5493 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5490 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5494 = x93 - x5493;
      if (x5494 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5495 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x5495 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5496 = x5490 * x5495;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5497 = x5496 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5497 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x5493 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":187:29)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
      }
      if (x5494 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5498 = x2125 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5499 = x1340 + x5498;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5500 = x2829 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5501 = x5499 + x5500;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5502 = x3586 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5503 = x5501 + x5502;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5504 = x4038 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5505 = x5503 + x5504;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5506 = x4403 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5507 = x5505 + x5506;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5508 = x4835 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5509 = x5507 + x5508;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5510 = x5180 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5511 = x5509 + x5510;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5512 = x5480 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5513 = x5511 + x5512;
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5514 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x5514 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5515 = x5514 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5516 = x5513 + x5515;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5517 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x5517 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5518 = x5517 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5519 = x5516 + x5518;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5520 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x5520 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5521 = x5520 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5522 = x5519 + x5521;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5523 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x5523 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5524 = x5523 * x63;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5525 = x5522 + x5524;
        // loc("cirgen/circuit/rv32im/sha.cpp":188:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5525);
          reg = x5525;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5526 = x596 + x75;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5527 = Fp(x5526.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5527);
          reg = x5527;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5528 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5528 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5529 = x5526 - x5528;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5530 = x5529 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5531 = Fp(x5530.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5531);
          reg = x5531;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5532 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5532 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5533 = x5530 - x5532;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5534 = x5533 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5535 = Fp(x5534.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5535);
          reg = x5535;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5536 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5536 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5537 = x5534 - x5536;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5538 = x5537 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5539 = Fp(x5538.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5539);
          reg = x5539;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5540 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5540 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5541 = x5538 - x5540;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5542 = x5541 * x73;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5542);
        reg = x5542;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5543 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5543 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5544 = x93 - x5543;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5545 = x5543 * x5544;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5545);
        reg = x5545;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5546 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5546 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5547 = x90 - x5543;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5548 = x5546 * x5547;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5548 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5549 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x5549 != Fp::invalid());
      host_args.at(0) = x67;
      host_args.at(1) = x5549;
      host_args.at(2) = x5490;
      host(ctx, "log", "SHA_INIT: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5482 != 0) {
        {
          host_args.at(0) = x22;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5550 = host_outs.at(0);
          auto x5551 = host_outs.at(1);
          auto x5552 = host_outs.at(2);
          auto x5553 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5550);
            reg = x5550;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5551);
            reg = x5551;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5552);
            reg = x5552;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5553);
            reg = x5553;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5554 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5554 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5555 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5555 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5556 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5556 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5557 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5557 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x22);
          reg = x22;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5481);
          reg = x5481;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5554);
          reg = x5554;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5555);
          reg = x5555;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5556);
          reg = x5556;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5557);
          reg = x5557;
        }
        {
          host_args.at(0) = x21;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5558 = host_outs.at(0);
          auto x5559 = host_outs.at(1);
          auto x5560 = host_outs.at(2);
          auto x5561 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5558);
            reg = x5558;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5559);
            reg = x5559;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5560);
            reg = x5560;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5561);
            reg = x5561;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5562 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5562 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5563 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5563 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5564 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5564 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5565 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5565 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x21);
          reg = x21;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5481);
          reg = x5481;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5562);
          reg = x5562;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5564);
          reg = x5564;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5565);
          reg = x5565;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5566 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x5566 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5567 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x5567 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5568 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x5568 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5569 = args[2][128 * steps + ((cycle - 1) & mask)];
        assert(x5569 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5570 = x5567 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5571 = x5566 + x5570;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5572 = x5568 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5573 = x5571 + x5572;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5574 = x5569 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5575 = x5573 + x5574;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:58)
        auto x5576 = x5575 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5576);
          reg = x5576;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5577 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5578 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5578 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5579 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5579 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5580 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5580 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5581 = x5578 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5582 = x5577 + x5581;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5583 = x5579 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5584 = x5582 + x5583;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5585 = x5580 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5586 = x5584 + x5585;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:57)
        auto x5587 = x5586 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5587);
          reg = x5587;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5588 = x5555 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5589 = x5554 + x5588;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5590 = x5556 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5591 = x5589 + x5590;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5592 = x5557 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5593 = x5591 + x5592;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:16)
        auto x5594 = x5593 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5594);
          reg = x5594;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5595 = x5563 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5596 = x5562 + x5595;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5597 = x5564 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5598 = x5596 + x5597;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5599 = x5565 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5600 = x5598 + x5599;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:16)
        auto x5601 = x5600 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5601);
          reg = x5601;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5602 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x5602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5603 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5604 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5605 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5605 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5606 = x5603 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5607 = x5602 + x5606;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5608 = x5604 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5609 = x5607 + x5608;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5610 = x5605 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5611 = x5609 + x5610;
        // loc("cirgen/circuit/rv32im/sha.cpp":201:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5611);
          reg = x5611;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5612 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5612 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":204:10)
        auto x5613 = x5612 * x75;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5614 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5614 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":205:10)
        auto x5615 = x5614 * x75;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5616 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5616 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":206:10)
        auto x5617 = x5616 * x75;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5618 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5618 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":207:10)
        auto x5619 = x5618 * x75;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5620 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5620 != Fp::invalid());
        host_args.at(0) = x5613;
        host_args.at(1) = x5615;
        host_args.at(2) = x5617;
        host_args.at(3) = x5619;
        host_args.at(4) = x5620;
        host(ctx, "log", "  FromEcall: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5483 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":214:53))
        auto x5621 = args[2][108 * steps + ((cycle - 1) & mask)];
        assert(x5621 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":214:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5621);
          reg = x5621;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":215:51))
        auto x5622 = args[2][109 * steps + ((cycle - 1) & mask)];
        assert(x5622 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":215:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5622);
          reg = x5622;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":216:64))
        auto x5623 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x5623 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":48:10)
        auto x5624 = x5623 * x20;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":48:10)
        auto x5625 = x5624 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":216:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5625);
          reg = x5625;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":217:64)
        auto x5626 = x5625 + x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5626);
          reg = x5626;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":218:49))
        auto x5627 = args[2][111 * steps + ((cycle - 1) & mask)];
        assert(x5627 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5627);
          reg = x5627;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5628 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5628 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":221:10)
        auto x5629 = x5628 * x75;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5630 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":222:10)
        auto x5631 = x5630 * x75;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5632 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5632 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x5633 = x5632 * x75;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5634 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5634 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x5635 = x5634 * x75;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5636 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5636 != Fp::invalid());
        host_args.at(0) = x5629;
        host_args.at(1) = x5631;
        host_args.at(2) = x5633;
        host_args.at(3) = x5635;
        host_args.at(4) = x5636;
        host(ctx, "log", "  FromPageFault: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5486 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":228:42))
        auto x5637 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x5637 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":228:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5637);
          reg = x5637;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":229:40))
        auto x5638 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5638 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":229:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5638);
          reg = x5638;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":230:36))
        auto x5639 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5639 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5639);
          reg = x5639;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":231:36))
        auto x5640 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5640 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5640);
          reg = x5640;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":232:38))
        auto x5641 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x5641 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":232:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5641);
          reg = x5641;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5642 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5642 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5642);
          reg = x5642;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5643 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5643 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":236:24)
        auto x5644 = x5643 + x5490;
        {
          host_args.at(0) = x5644;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5645 = host_outs.at(0);
          auto x5646 = host_outs.at(1);
          auto x5647 = host_outs.at(2);
          auto x5648 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5645);
            reg = x5645;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5646);
            reg = x5646;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5647);
            reg = x5647;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5648);
            reg = x5648;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5649 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5649 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5650 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5650 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5651 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5651 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5652 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5652 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5644);
          reg = x5644;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5481);
          reg = x5481;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5649);
          reg = x5649;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5650);
          reg = x5650;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5651);
          reg = x5651;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5652);
          reg = x5652;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":237:24)
        auto x5653 = x5644 + x75;
        {
          host_args.at(0) = x5653;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5654 = host_outs.at(0);
          auto x5655 = host_outs.at(1);
          auto x5656 = host_outs.at(2);
          auto x5657 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5654);
            reg = x5654;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5655);
            reg = x5655;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5656);
            reg = x5656;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5657);
            reg = x5657;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5658 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5658 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5659 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5659 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5660 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5660 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5661 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5661 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5653);
          reg = x5653;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5481);
          reg = x5481;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5658);
          reg = x5658;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5659);
          reg = x5659;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5660);
          reg = x5660;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5661);
          reg = x5661;
        }
      }
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5662 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x5662 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5663 = (x5662 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5663);
          reg = x5663;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5664 = inv(x5662);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5664);
          reg = x5664;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5665 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x5665 != Fp::invalid());
      if (x5665 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5662 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5666 = x93 - x5665;
      if (x5666 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5667 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5667 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5668 = x5662 * x5667;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5669 = x5668 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5669 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5670 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5671 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5671 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5672 = x5671 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5673 = x5670 + x5672;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5674 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5674 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5675 = x5674 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5676 = x5673 + x5675;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5677 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5677 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5678 = x5677 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5679 = x5676 + x5678;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5680 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5680 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5681 = x5680 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5682 = x5679 + x5681;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5683 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5683 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5684 = x5683 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5685 = x5682 + x5684;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5686 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5686 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5687 = x5686 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5688 = x5685 + x5687;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5689 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x5689 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5690 = x5689 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5691 = x5688 + x5690;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5692 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x5692 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5693 = x5692 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5694 = x5691 + x5693;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5695 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x5695 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5696 = x5695 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5697 = x5694 + x5696;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5698 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5698 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5699 = x5698 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5700 = x5697 + x5699;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5701 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5701 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5702 = x5701 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5703 = x5700 + x5702;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5704 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5704 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5705 = x5704 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5706 = x5703 + x5705;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5707 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5707 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5708 = x5707 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5709 = x5706 + x5708;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5710 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5710 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5711 = x5710 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5712 = x5709 + x5711;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5713 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5713 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5714 = x5713 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5715 = x5712 + x5714;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5716 = x92 - x5715;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5717 = x5716 * x7;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5717);
        reg = x5717;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5718 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5718 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5719 = Fp(x5718.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5719);
          reg = x5719;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5720 = Fp(x5718.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5721 = x5720 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5721);
          reg = x5721;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5722 = Fp(x5718.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5723 = x5722 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5723);
          reg = x5723;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5724 = Fp(x5718.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5725 = x5724 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5725);
          reg = x5725;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5726 = Fp(x5718.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5727 = x5726 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5727);
          reg = x5727;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5728 = Fp(x5718.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5729 = x5728 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5729);
          reg = x5729;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5730 = Fp(x5718.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5731 = x5730 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5731);
          reg = x5731;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5732 = Fp(x5718.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5733 = x5732 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5733);
          reg = x5733;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5734 = Fp(x5718.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5735 = x5734 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5735);
          reg = x5735;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5736 = Fp(x5718.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5737 = x5736 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5737);
          reg = x5737;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5738 = Fp(x5718.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5739 = x5738 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5739);
          reg = x5739;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5740 = Fp(x5718.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5741 = x5740 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5741);
          reg = x5741;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5742 = Fp(x5718.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5743 = x5742 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5743);
          reg = x5743;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5744 = Fp(x5718.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5745 = x5744 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5745);
          reg = x5745;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5746 = Fp(x5718.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5747 = x5746 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5747);
          reg = x5747;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5748 = Fp(x5718.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5749 = x5748 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5749);
          reg = x5749;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5750 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5750 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5751 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5751 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5752 = x5751 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5753 = x5750 + x5752;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5754 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5754 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5755 = x5754 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5756 = x5753 + x5755;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5757 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5757 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5758 = x5757 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5759 = x5756 + x5758;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5760 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5760 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5761 = x5760 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5762 = x5759 + x5761;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5763 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5763 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5764 = x5763 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5765 = x5762 + x5764;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5766 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5766 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5767 = x5766 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5768 = x5765 + x5767;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5769 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5769 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5770 = x5769 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5771 = x5768 + x5770;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5772 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5772 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5773 = x5772 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5774 = x5771 + x5773;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5775 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5775 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5776 = x5775 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5777 = x5774 + x5776;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5778 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5778 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5779 = x5778 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5780 = x5777 + x5779;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5781 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5781 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5782 = x5781 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5783 = x5780 + x5782;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5784 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5784 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5785 = x5784 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5786 = x5783 + x5785;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5787 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5787 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5788 = x5787 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5789 = x5786 + x5788;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5790 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5790 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5791 = x5790 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5792 = x5789 + x5791;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5793 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x5793 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5794 = x5793 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5795 = x5792 + x5794;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5796 = x5718 - x5795;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5797 = x5796 * x7;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5797);
        reg = x5797;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5798 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5798 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5799 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5799 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5800 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5800 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5801 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5801 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x5802 = x5800 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x5803 = x5801 + x5802;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x5804 = x5798 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x5805 = x5799 + x5804;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5806 = Fp(x5803.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5806);
          reg = x5806;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5807 = Fp(x5803.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5808 = x5807 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5808);
          reg = x5808;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5809 = Fp(x5803.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5810 = x5809 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5810);
          reg = x5810;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5811 = Fp(x5803.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5812 = x5811 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5812);
          reg = x5812;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5813 = Fp(x5803.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5814 = x5813 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5814);
          reg = x5814;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5815 = Fp(x5803.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5816 = x5815 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5816);
          reg = x5816;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5817 = Fp(x5803.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5818 = x5817 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5818);
          reg = x5818;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5819 = Fp(x5803.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5820 = x5819 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5820);
          reg = x5820;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5821 = Fp(x5803.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5822 = x5821 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5822);
          reg = x5822;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5823 = Fp(x5803.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5824 = x5823 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5824);
          reg = x5824;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5825 = Fp(x5803.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5826 = x5825 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5826);
          reg = x5826;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5827 = Fp(x5803.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5828 = x5827 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5828);
          reg = x5828;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5829 = Fp(x5803.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5830 = x5829 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5830);
          reg = x5830;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5831 = Fp(x5803.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5832 = x5831 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5832);
          reg = x5832;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5833 = Fp(x5803.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5834 = x5833 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5834);
          reg = x5834;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5835 = Fp(x5803.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5836 = x5835 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5836);
          reg = x5836;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5837 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x5837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5838 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x5838 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5839 = x5838 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5840 = x5837 + x5839;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5841 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x5841 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5842 = x5841 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5843 = x5840 + x5842;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5844 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x5844 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5845 = x5844 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5846 = x5843 + x5845;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5847 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x5847 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5848 = x5847 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5849 = x5846 + x5848;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5850 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x5850 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5851 = x5850 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5852 = x5849 + x5851;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5853 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x5853 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5854 = x5853 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5855 = x5852 + x5854;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5856 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x5856 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5857 = x5856 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5858 = x5855 + x5857;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5859 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x5859 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5860 = x5859 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5861 = x5858 + x5860;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5862 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x5862 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5863 = x5862 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5864 = x5861 + x5863;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5865 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x5865 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5866 = x5865 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5867 = x5864 + x5866;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5868 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x5868 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5869 = x5868 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5870 = x5867 + x5869;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5871 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x5871 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5872 = x5871 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5873 = x5870 + x5872;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5874 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x5874 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5875 = x5874 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5876 = x5873 + x5875;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5877 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x5877 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5878 = x5877 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5879 = x5876 + x5878;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5880 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x5880 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5881 = x5880 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5882 = x5879 + x5881;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5883 = x5803 - x5882;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5884 = x5883 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x5885 = Fp(x5884.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5885);
          reg = x5885;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5886 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5886 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x5887 = x5884 - x5886;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x5888 = x5887 * x73;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x5889 = x93 - x5888;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x5890 = x5888 * x5889;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x5890 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x5891 = x5805 + x5884;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5892 = Fp(x5891.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5892);
          reg = x5892;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5893 = Fp(x5891.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5894 = x5893 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5894);
          reg = x5894;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5895 = Fp(x5891.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5896 = x5895 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5896);
          reg = x5896;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5897 = Fp(x5891.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5898 = x5897 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5898);
          reg = x5898;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5899 = Fp(x5891.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5900 = x5899 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5900);
          reg = x5900;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5901 = Fp(x5891.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5902 = x5901 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5902);
          reg = x5902;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5903 = Fp(x5891.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5904 = x5903 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5904);
          reg = x5904;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5905 = Fp(x5891.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5906 = x5905 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5906);
          reg = x5906;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5907 = Fp(x5891.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5908 = x5907 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5908);
          reg = x5908;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5909 = Fp(x5891.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5910 = x5909 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5910);
          reg = x5910;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5911 = Fp(x5891.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5912 = x5911 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5912);
          reg = x5912;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5913 = Fp(x5891.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5914 = x5913 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5914);
          reg = x5914;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5915 = Fp(x5891.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5916 = x5915 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5916);
          reg = x5916;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5917 = Fp(x5891.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5918 = x5917 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5918);
          reg = x5918;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5919 = Fp(x5891.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5920 = x5919 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5920);
          reg = x5920;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5921 = Fp(x5891.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5922 = x5921 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5922);
          reg = x5922;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5923 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x5923 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5924 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x5924 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5925 = x5924 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5926 = x5923 + x5925;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5927 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x5927 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5928 = x5927 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5929 = x5926 + x5928;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5930 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x5930 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5931 = x5930 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5932 = x5929 + x5931;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5933 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x5933 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5934 = x5933 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5935 = x5932 + x5934;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5936 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x5936 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5937 = x5936 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5938 = x5935 + x5937;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5939 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x5939 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5940 = x5939 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5941 = x5938 + x5940;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5942 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x5942 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5943 = x5942 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5944 = x5941 + x5943;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5945 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x5945 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5946 = x5945 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5947 = x5944 + x5946;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5948 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x5948 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5949 = x5948 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5950 = x5947 + x5949;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5951 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5951 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5952 = x5951 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5953 = x5950 + x5952;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5954 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5954 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5955 = x5954 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5956 = x5953 + x5955;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5957 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5957 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5958 = x5957 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5959 = x5956 + x5958;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5960 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5960 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5961 = x5960 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5962 = x5959 + x5961;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5963 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x5963 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5964 = x5963 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5965 = x5962 + x5964;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5966 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x5966 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5967 = x5966 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5968 = x5965 + x5967;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5969 = x5891 - x5968;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5970 = x5969 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x5971 = Fp(x5970.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5971);
          reg = x5971;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5972 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x5972 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x5973 = x5970 - x5972;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x5974 = x5973 * x73;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x5975 = x93 - x5974;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x5976 = x5974 * x5975;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x5976 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5977 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5977 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5978 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5978 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5979 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5979 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5980 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5980 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x5981 = x5979 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x5982 = x5980 + x5981;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x5983 = x5977 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x5984 = x5978 + x5983;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5985 = Fp(x5982.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5985);
          reg = x5985;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5986 = Fp(x5982.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5987 = x5986 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5987);
          reg = x5987;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5988 = Fp(x5982.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5989 = x5988 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5989);
          reg = x5989;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5990 = Fp(x5982.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5991 = x5990 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5991);
          reg = x5991;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5992 = Fp(x5982.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5993 = x5992 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5993);
          reg = x5993;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5994 = Fp(x5982.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5995 = x5994 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5995);
          reg = x5995;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5996 = Fp(x5982.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5997 = x5996 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5997);
          reg = x5997;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5998 = Fp(x5982.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5999 = x5998 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5999);
          reg = x5999;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6000 = Fp(x5982.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6001 = x6000 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6001);
          reg = x6001;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6002 = Fp(x5982.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6003 = x6002 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6003);
          reg = x6003;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6004 = Fp(x5982.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6005 = x6004 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6005);
          reg = x6005;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6006 = Fp(x5982.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6007 = x6006 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6007);
          reg = x6007;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6008 = Fp(x5982.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6009 = x6008 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6009);
          reg = x6009;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6010 = Fp(x5982.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6011 = x6010 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6011);
          reg = x6011;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6012 = Fp(x5982.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6013 = x6012 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6013);
          reg = x6013;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6014 = Fp(x5982.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6015 = x6014 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6015);
          reg = x6015;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6016 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6016 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6017 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6017 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6018 = x6017 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6019 = x6016 + x6018;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6020 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6020 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6021 = x6020 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6022 = x6019 + x6021;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6023 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6023 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6024 = x6023 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6025 = x6022 + x6024;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6026 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6026 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6027 = x6026 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6028 = x6025 + x6027;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6029 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6029 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6030 = x6029 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6031 = x6028 + x6030;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6032 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6032 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6033 = x6032 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6034 = x6031 + x6033;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6035 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6035 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6036 = x6035 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6037 = x6034 + x6036;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6038 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6038 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6039 = x6038 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6040 = x6037 + x6039;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6041 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6041 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6042 = x6041 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6043 = x6040 + x6042;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6044 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6044 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6045 = x6044 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6046 = x6043 + x6045;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6047 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6047 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6048 = x6047 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6049 = x6046 + x6048;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6050 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6050 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6051 = x6050 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6052 = x6049 + x6051;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6053 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6053 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6054 = x6053 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6055 = x6052 + x6054;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6056 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6056 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6057 = x6056 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6058 = x6055 + x6057;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6059 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6059 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6060 = x6059 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6061 = x6058 + x6060;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6062 = x5982 - x6061;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6063 = x6062 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6064 = Fp(x6063.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6064);
          reg = x6064;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6065 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x6065 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6066 = x6063 - x6065;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6067 = x6066 * x73;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6068 = x93 - x6067;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6069 = x6067 * x6068;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6069 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6070 = x5984 + x6063;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6071 = Fp(x6070.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6071);
          reg = x6071;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6072 = Fp(x6070.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6073 = x6072 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6073);
          reg = x6073;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6074 = Fp(x6070.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6075 = x6074 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6075);
          reg = x6075;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6076 = Fp(x6070.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6077 = x6076 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6077);
          reg = x6077;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6078 = Fp(x6070.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6079 = x6078 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6079);
          reg = x6079;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6080 = Fp(x6070.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6081 = x6080 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6081);
          reg = x6081;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6082 = Fp(x6070.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6083 = x6082 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6083);
          reg = x6083;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6084 = Fp(x6070.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6085 = x6084 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6085);
          reg = x6085;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6086 = Fp(x6070.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6087 = x6086 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6087);
          reg = x6087;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6088 = Fp(x6070.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6089 = x6088 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6089);
          reg = x6089;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6090 = Fp(x6070.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6091 = x6090 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6091);
          reg = x6091;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6092 = Fp(x6070.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6093 = x6092 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6093);
          reg = x6093;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6094 = Fp(x6070.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6095 = x6094 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6095);
          reg = x6095;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6096 = Fp(x6070.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6097 = x6096 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6097);
          reg = x6097;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6098 = Fp(x6070.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6099 = x6098 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6099);
          reg = x6099;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6100 = Fp(x6070.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6101 = x6100 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6101);
          reg = x6101;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6102 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6102 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6103 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6103 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6104 = x6103 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6105 = x6102 + x6104;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6106 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6106 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6107 = x6106 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6108 = x6105 + x6107;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6109 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6109 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6110 = x6109 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6111 = x6108 + x6110;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6112 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6112 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6113 = x6112 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6114 = x6111 + x6113;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6115 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6115 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6116 = x6115 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6117 = x6114 + x6116;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6118 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6118 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6119 = x6118 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6120 = x6117 + x6119;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6121 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6121 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6122 = x6121 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6123 = x6120 + x6122;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6124 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6124 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6125 = x6124 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6126 = x6123 + x6125;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6127 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6127 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6128 = x6127 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6129 = x6126 + x6128;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6130 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6130 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6131 = x6130 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6132 = x6129 + x6131;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6133 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6133 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6134 = x6133 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6135 = x6132 + x6134;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6136 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6136 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6137 = x6136 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6138 = x6135 + x6137;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6139 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6139 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6140 = x6139 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6141 = x6138 + x6140;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6142 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x6142 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6143 = x6142 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6144 = x6141 + x6143;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6145 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x6145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6146 = x6145 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6147 = x6144 + x6146;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6148 = x6070 - x6147;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6149 = x6148 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6150 = Fp(x6149.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6150);
          reg = x6150;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6151 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6151 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6152 = x6149 - x6151;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6153 = x6152 * x73;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6154 = x93 - x6153;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6155 = x6153 * x6154;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6155 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/components/mux.h":39:25))
    auto x6156 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x6156 != Fp::invalid());
    if (x6156 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6157 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x6157 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[9](Reg)"("cirgen/circuit/rv32im/sha.cpp":259:70))
      auto x6158 = args[2][103 * steps + ((cycle - 1) & mask)];
      assert(x6158 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[11](Reg)"("cirgen/circuit/rv32im/sha.cpp":260:70))
      auto x6159 = args[2][105 * steps + ((cycle - 1) & mask)];
      assert(x6159 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":261:29)
      auto x6160 = x6158 + x6159;
      if (x6160 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":263:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6161 = x93 - x6158;
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6162 = x6161 - x6159;
      if (x6162 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6163 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x6163 != Fp::invalid());
        if (x6163 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":269:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":271:20)
        auto x6164 = x93 - x6163;
        if (x6164 != 0) {
          // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6165 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x6165 != Fp::invalid());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6165);
            reg = x6165;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":274:42))
          auto x6166 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x6166 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":274:42)
          auto x6167 = x6166 - x93;
          // loc("cirgen/circuit/rv32im/sha.cpp":274:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6167);
            reg = x6167;
          }
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6168 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x6168 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6169 = (x6168 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6169);
          reg = x6169;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6170 = inv(x6168);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6170);
          reg = x6170;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6171 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x6171 != Fp::invalid());
      if (x6171 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6168 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6172 = x93 - x6171;
      if (x6172 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6173 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x6173 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6174 = x6168 * x6173;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6175 = x6174 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6175 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x6171 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6176 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x6176 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":281:17)
        auto x6177 = x93 - x6176;
        if (x6177 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":281:21)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x66);
            reg = x66;
          }
        }
        if (x6176 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":282:17)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
      }
      if (x6172 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6178 = x2125 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6179 = x1340 + x6178;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6180 = x2829 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6181 = x6179 + x6180;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6182 = x3586 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6183 = x6181 + x6182;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6184 = x4038 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6185 = x6183 + x6184;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6186 = x4403 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6187 = x6185 + x6186;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6188 = x4835 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6189 = x6187 + x6188;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6190 = x5180 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6191 = x6189 + x6190;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6192 = x5480 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6193 = x6191 + x6192;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6194 = x6156 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6195 = x6193 + x6194;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6196 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x6196 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6197 = x6196 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6198 = x6195 + x6197;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6199 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x6199 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6200 = x6199 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6201 = x6198 + x6200;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6202 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x6202 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6203 = x6202 * x63;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6204 = x6201 + x6203;
        // loc("cirgen/circuit/rv32im/sha.cpp":284:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6204);
          reg = x6204;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x6205 = x596 + x75;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6206 = Fp(x6205.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6206);
          reg = x6206;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x6207 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x6207 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6208 = x6205 - x6207;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x6209 = x6208 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6210 = Fp(x6209.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6210);
          reg = x6210;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x6211 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x6211 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6212 = x6209 - x6211;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x6213 = x6212 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6214 = Fp(x6213.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6214);
          reg = x6214;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x6215 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6215 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6216 = x6213 - x6215;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x6217 = x6216 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x6218 = Fp(x6217.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6218);
          reg = x6218;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6219 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x6219 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x6220 = x6217 - x6219;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x6221 = x6220 * x73;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6221);
        reg = x6221;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6222 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6222 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x6223 = x93 - x6222;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x6224 = x6222 * x6223;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6224);
        reg = x6224;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6225 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x6225 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x6226 = x90 - x6222;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x6227 = x6225 * x6226;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x6227 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":287:40))
      auto x6228 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x6228 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":287:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6228);
        reg = x6228;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":288:38))
      auto x6229 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x6229 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":288:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6229);
        reg = x6229;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":289:34))
      auto x6230 = args[2][133 * steps + ((cycle - 1) & mask)];
      assert(x6230 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":289:3)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6230);
        reg = x6230;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":290:34))
      auto x6231 = args[2][134 * steps + ((cycle - 1) & mask)];
      assert(x6231 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":290:3)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6231);
        reg = x6231;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":291:36))
      auto x6232 = args[2][138 * steps + ((cycle - 1) & mask)];
      assert(x6232 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":291:3)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6232);
        reg = x6232;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6233 = args[2][143 * steps + ((cycle - 1) & mask)];
      assert(x6233 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6233);
        reg = x6233;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6234 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x6234 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6235 = (x6234 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6235);
          reg = x6235;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6236 = inv(x6234);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6236);
          reg = x6236;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6237 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x6237 != Fp::invalid());
      if (x6237 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6234 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6238 = x93 - x6237;
      if (x6238 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6239 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6239 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6240 = x6234 * x6239;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6241 = x6240 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6241 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6242 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x6242 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":300:8)
      auto x6243 = x6242 * x75;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6244 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x6244 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":301:8)
      auto x6245 = x6244 * x75;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6246 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x6246 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":302:8)
      auto x6247 = x6246 * x75;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6248 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x6248 != Fp::invalid());
      host_args.at(0) = x66;
      host_args.at(1) = x6248;
      host_args.at(2) = x6168;
      host_args.at(3) = x6243;
      host_args.at(4) = x6245;
      host_args.at(5) = x6247;
      host_args.at(6) = x6234;
      host(ctx, "log", "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = 0x%x, data1 = 0x%x, state = 0x%x, repeat: %u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/sha.cpp":306:15)
      auto x6249 = x93 - x6248;
      if (x6249 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6250 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x6250 != Fp::invalid());
        if (x6250 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6251 = x6242 + x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6252 = x6251 - x6168;
          {
            host_args.at(0) = x6252;
            host_args.at(1) = x92;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6253 = host_outs.at(0);
            auto x6254 = host_outs.at(1);
            auto x6255 = host_outs.at(2);
            auto x6256 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6253);
              reg = x6253;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6254);
              reg = x6254;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6255);
              reg = x6255;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6256);
              reg = x6256;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6257 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6257 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6258 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6258 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6259 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6259 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6260 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6260 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6252);
            reg = x6252;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6157);
            reg = x6157;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6257);
            reg = x6257;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6258);
            reg = x6258;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6259);
            reg = x6259;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6260);
            reg = x6260;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":308:16)
        auto x6261 = x93 - x6250;
        if (x6261 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6262 = x6242 + x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6263 = x6262 - x6168;
          {
            host_args.at(0) = x6263;
            host_args.at(1) = x93;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6264 = host_outs.at(0);
            auto x6265 = host_outs.at(1);
            auto x6266 = host_outs.at(2);
            auto x6267 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6264);
              reg = x6264;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6265);
              reg = x6265;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6266);
              reg = x6266;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6267);
              reg = x6267;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6268 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6268 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6269 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6269 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6270 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6270 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6271 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6271 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6263);
            reg = x6263;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6157);
            reg = x6157;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6268);
            reg = x6268;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6269);
            reg = x6269;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6270);
            reg = x6270;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6271);
            reg = x6271;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
        auto x6272 = x6 - x6168;
        {
          host_args.at(0) = x6272;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6273 = host_outs.at(0);
          auto x6274 = host_outs.at(1);
          auto x6275 = host_outs.at(2);
          auto x6276 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6273);
            reg = x6273;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6274);
            reg = x6274;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6275);
            reg = x6275;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6276);
            reg = x6276;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6277 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6277 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6278 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6278 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6279 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6280 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6280 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6272);
          reg = x6272;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6157);
          reg = x6157;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6277);
          reg = x6277;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6278);
          reg = x6278;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6279);
          reg = x6279;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6280);
          reg = x6280;
        }
      }
      if (x6248 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6281 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x6281 != Fp::invalid());
        if (x6281 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6282 = x6244 + x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6283 = x6282 - x6168;
          {
            host_args.at(0) = x6283;
            host_args.at(1) = x92;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6284 = host_outs.at(0);
            auto x6285 = host_outs.at(1);
            auto x6286 = host_outs.at(2);
            auto x6287 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6284);
              reg = x6284;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6285);
              reg = x6285;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6286);
              reg = x6286;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6287);
              reg = x6287;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6288 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6288 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6289 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6289 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6290 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6290 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6291 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6291 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6283);
            reg = x6283;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6157);
            reg = x6157;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6288);
            reg = x6288;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6289);
            reg = x6289;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6290);
            reg = x6290;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6291);
            reg = x6291;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":313:16)
        auto x6292 = x93 - x6281;
        if (x6292 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6293 = x6244 + x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6294 = x6293 - x6168;
          {
            host_args.at(0) = x6294;
            host_args.at(1) = x93;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6295 = host_outs.at(0);
            auto x6296 = host_outs.at(1);
            auto x6297 = host_outs.at(2);
            auto x6298 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6295);
              reg = x6295;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6296);
              reg = x6296;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6297);
              reg = x6297;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6298);
              reg = x6298;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6299 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6299 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6300 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6300 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6301 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6301 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6302 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6302 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6294);
            reg = x6294;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6157);
            reg = x6157;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6299);
            reg = x6299;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6300);
            reg = x6300;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6301);
            reg = x6301;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6302);
            reg = x6302;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
        auto x6303 = x5 - x6168;
        {
          host_args.at(0) = x6303;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6304 = host_outs.at(0);
          auto x6305 = host_outs.at(1);
          auto x6306 = host_outs.at(2);
          auto x6307 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6304);
            reg = x6304;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6305);
            reg = x6305;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6306);
            reg = x6306;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6307);
            reg = x6307;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6308 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6308 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6309 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6309 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6310 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6310 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6311 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6311 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6303);
          reg = x6303;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6157);
          reg = x6157;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6308);
          reg = x6308;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6309);
          reg = x6309;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6310);
          reg = x6310;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6311);
          reg = x6311;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6312 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x6312 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6313 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x6313 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6314 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x6314 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6315 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x6315 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6316 = x6314 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6317 = x6315 + x6316;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6318 = x6312 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6319 = x6313 + x6318;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6320 = Fp(x6317.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6320);
          reg = x6320;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6321 = Fp(x6317.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6322 = x6321 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6322);
          reg = x6322;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6323 = Fp(x6317.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6324 = x6323 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6324);
          reg = x6324;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6325 = Fp(x6317.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6326 = x6325 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6326);
          reg = x6326;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6327 = Fp(x6317.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6328 = x6327 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6328);
          reg = x6328;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6329 = Fp(x6317.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6330 = x6329 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6330);
          reg = x6330;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6331 = Fp(x6317.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6332 = x6331 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6332);
          reg = x6332;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6333 = Fp(x6317.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6334 = x6333 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6334);
          reg = x6334;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6335 = Fp(x6317.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6336 = x6335 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6336);
          reg = x6336;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6337 = Fp(x6317.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6338 = x6337 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6338);
          reg = x6338;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6339 = Fp(x6317.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6340 = x6339 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6340);
          reg = x6340;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6341 = Fp(x6317.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6342 = x6341 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6342);
          reg = x6342;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6343 = Fp(x6317.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6344 = x6343 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6344);
          reg = x6344;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6345 = Fp(x6317.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6346 = x6345 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6346);
          reg = x6346;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6347 = Fp(x6317.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6348 = x6347 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6348);
          reg = x6348;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6349 = Fp(x6317.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6350 = x6349 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6350);
          reg = x6350;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6351 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6351 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6352 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6352 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6353 = x6352 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6354 = x6351 + x6353;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6355 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6355 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6356 = x6355 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6357 = x6354 + x6356;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6358 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6358 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6359 = x6358 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6360 = x6357 + x6359;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6361 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6361 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6362 = x6361 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6363 = x6360 + x6362;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6364 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6364 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6365 = x6364 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6366 = x6363 + x6365;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6367 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6367 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6368 = x6367 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6369 = x6366 + x6368;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6370 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x6370 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6371 = x6370 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6372 = x6369 + x6371;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6373 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x6373 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6374 = x6373 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6375 = x6372 + x6374;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6376 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x6376 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6377 = x6376 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6378 = x6375 + x6377;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6379 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6379 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6380 = x6379 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6381 = x6378 + x6380;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6382 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6382 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6383 = x6382 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6384 = x6381 + x6383;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6385 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6385 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6386 = x6385 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6387 = x6384 + x6386;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6388 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6388 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6389 = x6388 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6390 = x6387 + x6389;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6391 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6391 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6392 = x6391 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6393 = x6390 + x6392;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6394 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6394 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6395 = x6394 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6396 = x6393 + x6395;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6397 = x6317 - x6396;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6398 = x6397 * x7;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6398);
        reg = x6398;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6399 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6399 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
      auto x6400 = x6319 + x6399;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6401 = Fp(x6400.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6401);
          reg = x6401;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6402 = Fp(x6400.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6403 = x6402 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6403);
          reg = x6403;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6404 = Fp(x6400.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6405 = x6404 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6405);
          reg = x6405;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6406 = Fp(x6400.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6407 = x6406 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6407);
          reg = x6407;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6408 = Fp(x6400.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6409 = x6408 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6409);
          reg = x6409;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6410 = Fp(x6400.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6411 = x6410 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6411);
          reg = x6411;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6412 = Fp(x6400.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6413 = x6412 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6413);
          reg = x6413;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6414 = Fp(x6400.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6415 = x6414 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6415);
          reg = x6415;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6416 = Fp(x6400.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6417 = x6416 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6417);
          reg = x6417;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6418 = Fp(x6400.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6419 = x6418 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6419);
          reg = x6419;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6420 = Fp(x6400.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6421 = x6420 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6421);
          reg = x6421;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6422 = Fp(x6400.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6423 = x6422 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6423);
          reg = x6423;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6424 = Fp(x6400.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6425 = x6424 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6425);
          reg = x6425;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6426 = Fp(x6400.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6427 = x6426 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6427);
          reg = x6427;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6428 = Fp(x6400.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6429 = x6428 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6429);
          reg = x6429;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6430 = Fp(x6400.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6431 = x6430 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6431);
          reg = x6431;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6432 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6432 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6433 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6433 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6434 = x6433 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6435 = x6432 + x6434;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6436 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6436 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6437 = x6436 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6438 = x6435 + x6437;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6439 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6439 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6440 = x6439 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6441 = x6438 + x6440;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6442 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6442 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6443 = x6442 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6444 = x6441 + x6443;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6445 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6445 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6446 = x6445 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6447 = x6444 + x6446;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6448 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6448 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6449 = x6448 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6450 = x6447 + x6449;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6451 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6451 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6452 = x6451 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6453 = x6450 + x6452;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6454 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6454 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6455 = x6454 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6456 = x6453 + x6455;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6457 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x6457 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6458 = x6457 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6459 = x6456 + x6458;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6460 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x6460 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6461 = x6460 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6462 = x6459 + x6461;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6463 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x6463 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6464 = x6463 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6465 = x6462 + x6464;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6466 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x6466 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6467 = x6466 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6468 = x6465 + x6467;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6469 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x6469 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6470 = x6469 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6471 = x6468 + x6470;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6472 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x6472 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6473 = x6472 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6474 = x6471 + x6473;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6475 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x6475 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6476 = x6475 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6477 = x6474 + x6476;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6478 = x6400 - x6477;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6479 = x6478 * x7;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6479);
        reg = x6479;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6480 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x6480 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6481 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6481 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6482 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x6482 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6483 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x6483 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6484 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x6484 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6485 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x6485 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6486 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x6486 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6487 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x6487 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6488 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x6488 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6489 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6489 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6490 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6490 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6491 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6491 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6492 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6492 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6493 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6493 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6494 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6494 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6495 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6495 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6496 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6496 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6497 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6497 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6498 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6498 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6499 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6499 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6500 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6500 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6501 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6501 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6502 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6502 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6503 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6503 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6504 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6504 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6505 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6505 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6506 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6506 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6507 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6507 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6508 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6508 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6509 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6509 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6510 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6510 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6511 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6511 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6512 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x6512 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6513 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x6513 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6514 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x6514 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6515 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x6515 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6516 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x6516 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6517 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x6517 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6518 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x6518 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6519 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x6519 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6520 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x6520 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6521 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6521 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6522 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6522 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6523 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6523 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6524 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6524 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6525 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6525 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6526 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6527 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6527 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6528 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6529 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6530 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6531 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6531 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6532 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6532 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6533 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6533 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6534 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6534 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6535 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6535 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6536 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6536 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6537 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6537 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6538 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6538 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6539 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6539 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6540 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6540 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6541 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6542 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6543 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6544 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x6544 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6545 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x6545 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6546 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x6546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6547 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x6547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6548 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x6548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6549 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x6549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6550 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x6550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6551 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x6551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6552 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x6552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6553 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x6553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6554 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x6554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6555 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x6555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6556 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x6556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6557 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x6557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6558 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x6558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6559 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x6559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6560 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x6560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6561 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x6561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6562 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x6562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6563 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x6563 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6564 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x6564 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6565 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x6565 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6566 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x6566 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6567 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x6567 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6568 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x6568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6569 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x6569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6570 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x6570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6571 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x6571 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6572 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x6572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6573 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x6573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6574 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x6574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6575 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x6575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6576 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x6576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6577 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x6577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6578 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x6578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6579 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x6579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6580 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x6580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6581 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x6581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6582 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x6582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6583 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x6583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6584 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x6584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6585 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x6585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6586 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x6586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6587 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6588 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x6588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6589 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x6589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6590 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x6590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6591 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x6591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6592 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x6592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6593 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6594 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x6594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6595 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6596 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6597 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x6597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6598 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x6598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6599 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6600 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x6600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6601 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x6601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6602 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6603 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x6603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6604 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x6604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6605 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6606 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x6606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6607 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x6607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6608 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6609 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6610 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6611 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6612 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6613 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6614 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6615 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6616 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6617 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x6617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6618 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x6618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6619 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x6619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6620 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x6620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6621 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x6621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6622 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x6622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6623 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6624 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x6624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6625 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x6625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6626 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x6626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6627 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x6627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6628 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x6628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6629 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x6629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6630 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x6630 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6631 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x6631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6632 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x6632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6633 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x6633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6634 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x6634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6635 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x6635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6636 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x6636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6637 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x6637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6638 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x6638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6639 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x6639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6640 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6641 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6642 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6643 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6644 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6645 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6646 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6647 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6648 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6648 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6649 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x6649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6650 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x6650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6651 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x6651 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6652 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x6652 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6653 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x6653 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6654 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x6654 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6655 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x6655 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6656 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x6656 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6657 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x6657 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6658 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x6658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6659 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x6659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6660 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x6660 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6661 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x6661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6662 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x6662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6663 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x6663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6664 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x6664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6665 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x6665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6666 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x6666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6667 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6668 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6669 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x6669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6670 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6671 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x6671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6672 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x6672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6673 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x6673 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6674 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x6674 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6675 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x6675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6676 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x6676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6677 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x6677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6678 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x6678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6679 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6680 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x6680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6681 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x6681 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6682 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x6682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6683 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x6683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6684 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6685 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6686 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6687 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x6687 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6688 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6689 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x6689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6690 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x6690 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6691 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x6691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6692 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6693 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x6693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6694 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x6694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6695 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x6695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6696 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x6696 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6697 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x6697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6698 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x6698 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6699 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x6699 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6700 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x6700 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6701 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x6701 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6702 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x6702 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6703 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6704 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x6704 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6705 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6706 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6707 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6708 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6709 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6710 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6711 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6712 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6713 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6714 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6715 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6716 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6717 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6718 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6719 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6720 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6721 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6722 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6723 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6724 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6725 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6726 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6727 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6728 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6729 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6730 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6731 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6732 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6733 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6734 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6735 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6736 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6737 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6738 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6739 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x6740 = x6737 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x6741 = x6736 + x6740;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x6742 = x6739 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x6743 = x6738 + x6742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6744 = x6493 + x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6745 = x6493 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6746 = x6745 * x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6747 = x6744 - x6746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6748 = x6494 + x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6749 = x6494 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6750 = x6749 * x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6751 = x6748 - x6750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6752 = x6495 + x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6753 = x6495 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6754 = x6753 * x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6755 = x6752 - x6754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6756 = x6496 + x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6757 = x6496 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6758 = x6757 * x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6759 = x6756 - x6758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6760 = x6497 + x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6761 = x6497 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6762 = x6761 * x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6763 = x6760 - x6762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6764 = x6498 + x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6765 = x6498 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6766 = x6765 * x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6767 = x6764 - x6766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6768 = x6499 + x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6769 = x6499 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6770 = x6769 * x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6771 = x6768 - x6770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6772 = x6500 + x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6773 = x6500 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6774 = x6773 * x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6775 = x6772 - x6774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6776 = x6501 + x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6777 = x6501 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6778 = x6777 * x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6779 = x6776 - x6778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6780 = x6502 + x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6781 = x6502 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6782 = x6781 * x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6783 = x6780 - x6782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6784 = x6503 + x6480;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6785 = x6503 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6786 = x6785 * x6480;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6787 = x6784 - x6786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6788 = x6504 + x6481;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6789 = x6504 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6790 = x6789 * x6481;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6791 = x6788 - x6790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6792 = x6505 + x6482;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6793 = x6505 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6794 = x6793 * x6482;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6795 = x6792 - x6794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6796 = x6506 + x6483;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6797 = x6506 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6798 = x6797 * x6483;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6799 = x6796 - x6798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6800 = x6507 + x6484;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6801 = x6507 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6802 = x6801 * x6484;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6803 = x6800 - x6802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6804 = x6508 + x6485;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6805 = x6508 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6806 = x6805 * x6485;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6807 = x6804 - x6806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6808 = x6509 + x6486;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6809 = x6509 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6810 = x6809 * x6486;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6811 = x6808 - x6810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6812 = x6510 + x6487;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6813 = x6510 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6814 = x6813 * x6487;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6815 = x6812 - x6814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6816 = x6511 + x6488;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6817 = x6511 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6818 = x6817 * x6488;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6819 = x6816 - x6818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6820 = x6480 + x6489;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6821 = x6480 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6822 = x6821 * x6489;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6823 = x6820 - x6822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6824 = x6481 + x6490;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6825 = x6481 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6826 = x6825 * x6490;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6827 = x6824 - x6826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6828 = x6482 + x6491;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6829 = x6482 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6830 = x6829 * x6491;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6831 = x6828 - x6830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6832 = x6483 + x6492;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6833 = x6483 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6834 = x6833 * x6492;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6835 = x6832 - x6834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6836 = x6484 + x6493;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6837 = x6484 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6838 = x6837 * x6493;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6839 = x6836 - x6838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6840 = x6485 + x6494;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6841 = x6485 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6842 = x6841 * x6494;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6843 = x6840 - x6842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6844 = x6486 + x6495;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6845 = x6486 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6846 = x6845 * x6495;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6847 = x6844 - x6846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6848 = x6487 + x6496;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6849 = x6487 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6850 = x6849 * x6496;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6851 = x6848 - x6850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6852 = x6488 + x6497;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6853 = x6488 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6854 = x6853 * x6497;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6855 = x6852 - x6854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6856 = x6489 + x6498;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6857 = x6489 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6858 = x6857 * x6498;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6859 = x6856 - x6858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6860 = x6490 + x6499;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6861 = x6490 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6862 = x6861 * x6499;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6863 = x6860 - x6862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6864 = x6491 + x6500;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6865 = x6491 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6866 = x6865 * x6500;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6867 = x6864 - x6866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6868 = x6492 + x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6869 = x6492 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6870 = x6869 * x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6871 = x6868 - x6870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6872 = x6482 + x6747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6873 = x6829 * x6747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6874 = x6872 - x6873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6875 = x6483 + x6751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6876 = x6833 * x6751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6877 = x6875 - x6876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6878 = x6484 + x6755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6879 = x6837 * x6755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6880 = x6878 - x6879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6881 = x6485 + x6759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6882 = x6841 * x6759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6883 = x6881 - x6882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6884 = x6486 + x6763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6885 = x6845 * x6763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6886 = x6884 - x6885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6887 = x6487 + x6767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6888 = x6849 * x6767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6889 = x6887 - x6888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6890 = x6488 + x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6891 = x6853 * x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6892 = x6890 - x6891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6893 = x6489 + x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6894 = x6857 * x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6895 = x6893 - x6894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6896 = x6490 + x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6897 = x6861 * x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6898 = x6896 - x6897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6899 = x6491 + x6783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6900 = x6865 * x6783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6901 = x6899 - x6900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6902 = x6492 + x6787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6903 = x6869 * x6787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6904 = x6902 - x6903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6905 = x6493 + x6791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6906 = x6745 * x6791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6907 = x6905 - x6906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6908 = x6494 + x6795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6909 = x6749 * x6795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6910 = x6908 - x6909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6911 = x6495 + x6799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6912 = x6753 * x6799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6913 = x6911 - x6912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6914 = x6496 + x6803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6915 = x6757 * x6803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6916 = x6914 - x6915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6917 = x6497 + x6807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6918 = x6761 * x6807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6919 = x6917 - x6918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6920 = x6498 + x6811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6921 = x6765 * x6811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6922 = x6920 - x6921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6923 = x6499 + x6815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6924 = x6769 * x6815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6925 = x6923 - x6924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6926 = x6500 + x6819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6927 = x6773 * x6819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6928 = x6926 - x6927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6929 = x6501 + x6823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6930 = x6777 * x6823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6931 = x6929 - x6930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6932 = x6502 + x6827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6933 = x6781 * x6827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6934 = x6932 - x6933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6935 = x6503 + x6831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6936 = x6785 * x6831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6937 = x6935 - x6936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6938 = x6504 + x6835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6939 = x6789 * x6835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6940 = x6938 - x6939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6941 = x6505 + x6839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6942 = x6793 * x6839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6943 = x6941 - x6942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6944 = x6506 + x6843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6945 = x6797 * x6843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6946 = x6944 - x6945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6947 = x6507 + x6847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6948 = x6801 * x6847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6949 = x6947 - x6948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6950 = x6508 + x6851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6951 = x6805 * x6851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6952 = x6950 - x6951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6953 = x6509 + x6855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6954 = x6809 * x6855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6955 = x6953 - x6954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6956 = x6510 + x6859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6957 = x6813 * x6859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6958 = x6956 - x6957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6959 = x6511 + x6863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6960 = x6817 * x6863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6961 = x6959 - x6960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6962 = x6480 + x6867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6963 = x6821 * x6867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6964 = x6962 - x6963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6965 = x6481 + x6871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6966 = x6825 * x6871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6967 = x6965 - x6966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6968 = x6619 + x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6969 = x6619 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6970 = x6969 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6971 = x6968 - x6970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6972 = x6620 + x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6973 = x6620 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6974 = x6973 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6975 = x6972 - x6974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6976 = x6621 + x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6977 = x6621 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6978 = x6977 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6979 = x6976 - x6978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6980 = x6622 + x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6981 = x6622 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6982 = x6981 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6983 = x6980 - x6982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6984 = x6623 + x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6985 = x6623 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6986 = x6985 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6987 = x6984 - x6986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6988 = x6624 + x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6989 = x6624 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6990 = x6989 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6991 = x6988 - x6990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6992 = x6625 + x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6993 = x6625 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6994 = x6993 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6995 = x6992 - x6994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6996 = x6626 + x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6997 = x6626 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6998 = x6997 * x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6999 = x6996 - x6998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7000 = x6627 + x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7001 = x6627 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7002 = x7001 * x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7003 = x7000 - x7002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7004 = x6628 + x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7005 = x6628 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7006 = x7005 * x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7007 = x7004 - x7006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7008 = x6629 + x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7009 = x6629 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7010 = x7009 * x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7011 = x7008 - x7010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7012 = x6630 + x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7013 = x6630 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7014 = x7013 * x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7015 = x7012 - x7014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7016 = x6631 + x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7017 = x6631 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7018 = x7017 * x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7019 = x7016 - x7018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7020 = x6632 + x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7021 = x6632 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7022 = x7021 * x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7023 = x7020 - x7022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7024 = x6633 + x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7025 = x6633 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7026 = x7025 * x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7027 = x7024 - x7026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7028 = x6634 + x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7029 = x6634 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7030 = x7029 * x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7031 = x7028 - x7030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7032 = x6635 + x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7033 = x6635 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7034 = x7033 * x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7035 = x7032 - x7034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7036 = x6636 + x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7037 = x6636 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7038 = x7037 * x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7039 = x7036 - x7038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7040 = x6637 + x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7041 = x6637 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7042 = x7041 * x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7043 = x7040 - x7042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7044 = x6638 + x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7045 = x6638 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7046 = x7045 * x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7047 = x7044 - x7046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7048 = x6639 + x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7049 = x6639 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7050 = x7049 * x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7051 = x7048 - x7050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7052 = x6608 + x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7053 = x6608 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7054 = x7053 * x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7055 = x7052 - x7054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7056 = x6609 + x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7057 = x6609 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7058 = x7057 * x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7059 = x7056 - x7058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7060 = x6610 + x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7061 = x6610 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7062 = x7061 * x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7063 = x7060 - x7062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7064 = x6611 + x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7065 = x6611 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7066 = x7065 * x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7067 = x7064 - x7066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7068 = x6612 + x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7069 = x6612 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7070 = x7069 * x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7071 = x7068 - x7070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7072 = x6613 + x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7073 = x6613 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7074 = x7073 * x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7075 = x7072 - x7074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7076 = x6614 + x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7077 = x6614 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7078 = x7077 * x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7079 = x7076 - x7078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7080 = x6615 + x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7081 = x6615 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7082 = x7081 * x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7083 = x7080 - x7082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7084 = x6616 + x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7085 = x6616 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7086 = x7085 * x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7087 = x7084 - x7086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7088 = x6617 + x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7089 = x6617 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7090 = x7089 * x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7091 = x7088 - x7090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7092 = x6618 + x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7093 = x6618 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7094 = x7093 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7095 = x7092 - x7094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7096 = x6614 + x6971;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7097 = x7077 * x6971;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7098 = x7096 - x7097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7099 = x6615 + x6975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7100 = x7081 * x6975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7101 = x7099 - x7100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7102 = x6616 + x6979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7103 = x7085 * x6979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7104 = x7102 - x7103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7105 = x6617 + x6983;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7106 = x7089 * x6983;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7107 = x7105 - x7106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7108 = x6618 + x6987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7109 = x7093 * x6987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7110 = x7108 - x7109;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7111 = x6619 + x6991;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7112 = x6969 * x6991;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7113 = x7111 - x7112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7114 = x6620 + x6995;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7115 = x6973 * x6995;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7116 = x7114 - x7115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7117 = x6621 + x6999;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7118 = x6977 * x6999;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7119 = x7117 - x7118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7120 = x6622 + x7003;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7121 = x6981 * x7003;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7122 = x7120 - x7121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7123 = x6623 + x7007;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7124 = x6985 * x7007;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7125 = x7123 - x7124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7126 = x6624 + x7011;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7127 = x6989 * x7011;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7128 = x7126 - x7127;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7129 = x6625 + x7015;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7130 = x6993 * x7015;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7131 = x7129 - x7130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7132 = x6626 + x7019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7133 = x6997 * x7019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7134 = x7132 - x7133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7135 = x6627 + x7023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7136 = x7001 * x7023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7137 = x7135 - x7136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7138 = x6628 + x7027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7139 = x7005 * x7027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7140 = x7138 - x7139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7141 = x6629 + x7031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7142 = x7009 * x7031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7143 = x7141 - x7142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7144 = x6630 + x7035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7145 = x7013 * x7035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7146 = x7144 - x7145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7147 = x6631 + x7039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7148 = x7017 * x7039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7149 = x7147 - x7148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7150 = x6632 + x7043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7151 = x7021 * x7043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7152 = x7150 - x7151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7153 = x6633 + x7047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7154 = x7025 * x7047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7155 = x7153 - x7154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7156 = x6634 + x7051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7157 = x7029 * x7051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7158 = x7156 - x7157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7159 = x6635 + x7055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7160 = x7033 * x7055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7161 = x7159 - x7160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7162 = x6636 + x7059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7163 = x7037 * x7059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7164 = x7162 - x7163;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7165 = x6637 + x7063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7166 = x7041 * x7063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7167 = x7165 - x7166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7168 = x6638 + x7067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7169 = x7045 * x7067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7170 = x7168 - x7169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7171 = x6639 + x7071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7172 = x7049 * x7071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7173 = x7171 - x7172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7174 = x6608 + x7075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7175 = x7053 * x7075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7176 = x7174 - x7175;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7177 = x6609 + x7079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7178 = x7057 * x7079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7179 = x7177 - x7178;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7180 = x6610 + x7083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7181 = x7061 * x7083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7182 = x7180 - x7181;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7183 = x6611 + x7087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7184 = x7065 * x7087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7185 = x7183 - x7184;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7186 = x6612 + x7091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7187 = x7069 * x7091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7188 = x7186 - x7187;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7189 = x6613 + x7095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7190 = x7073 * x7095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7191 = x7189 - x7190;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7192 = x6705 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7193 = x6704 + x7192;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7194 = x6706 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7195 = x7193 + x7194;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7196 = x6707 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7197 = x7195 + x7196;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7198 = x6708 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7199 = x7197 + x7198;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7200 = x6709 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7201 = x7199 + x7200;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7202 = x6710 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7203 = x7201 + x7202;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7204 = x6711 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7205 = x7203 + x7204;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7206 = x6712 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7207 = x7205 + x7206;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7208 = x6713 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7209 = x7207 + x7208;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7210 = x6714 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7211 = x7209 + x7210;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7212 = x6715 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7213 = x7211 + x7212;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7214 = x6716 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7215 = x7213 + x7214;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7216 = x6717 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7217 = x7215 + x7216;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7218 = x6718 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7219 = x7217 + x7218;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7220 = x6719 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7221 = x7219 + x7220;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7222 = x6721 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7223 = x6720 + x7222;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7224 = x6722 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7225 = x7223 + x7224;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7226 = x6723 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7227 = x7225 + x7226;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7228 = x6724 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7229 = x7227 + x7228;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7230 = x6725 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7231 = x7229 + x7230;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7232 = x6726 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7233 = x7231 + x7232;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7234 = x6727 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7235 = x7233 + x7234;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7236 = x6728 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7237 = x7235 + x7236;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7238 = x6729 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7239 = x7237 + x7238;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7240 = x6730 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7241 = x7239 + x7240;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7242 = x6731 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7243 = x7241 + x7242;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7244 = x6732 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7245 = x7243 + x7244;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7246 = x6733 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7247 = x7245 + x7246;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7248 = x6734 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7249 = x7247 + x7248;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7250 = x6735 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7251 = x7249 + x7250;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7252 = x6608 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7253 = x93 - x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7254 = x7253 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7255 = x7252 + x7254;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7256 = x6609 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7257 = x93 - x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7258 = x7257 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7259 = x7256 + x7258;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7260 = x6610 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7261 = x93 - x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7262 = x7261 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7263 = x7260 + x7262;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7264 = x6611 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7265 = x93 - x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7266 = x7265 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7267 = x7264 + x7266;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7268 = x6612 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7269 = x93 - x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7270 = x7269 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7271 = x7268 + x7270;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7272 = x6613 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7273 = x93 - x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7274 = x7273 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7275 = x7272 + x7274;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7276 = x6614 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7277 = x93 - x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7278 = x7277 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7279 = x7276 + x7278;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7280 = x6615 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7281 = x93 - x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7282 = x7281 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7283 = x7280 + x7282;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7284 = x6616 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7285 = x93 - x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7286 = x7285 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7287 = x7284 + x7286;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7288 = x6617 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7289 = x93 - x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7290 = x7289 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7291 = x7288 + x7290;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7292 = x6618 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7293 = x93 - x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7294 = x7293 * x6682;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7295 = x7292 + x7294;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7296 = x6619 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7297 = x93 - x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7298 = x7297 * x6683;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7299 = x7296 + x7298;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7300 = x6620 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7301 = x93 - x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7302 = x7301 * x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7303 = x7300 + x7302;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7304 = x6621 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7305 = x93 - x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7306 = x7305 * x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7307 = x7304 + x7306;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7308 = x6622 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7309 = x93 - x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7310 = x7309 * x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7311 = x7308 + x7310;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7312 = x6623 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7313 = x93 - x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7314 = x7313 * x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7315 = x7312 + x7314;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7316 = x6624 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7317 = x93 - x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7318 = x7317 * x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7319 = x7316 + x7318;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7320 = x6625 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7321 = x93 - x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7322 = x7321 * x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7323 = x7320 + x7322;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7324 = x6626 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7325 = x93 - x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7326 = x7325 * x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7327 = x7324 + x7326;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7328 = x6627 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7329 = x93 - x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7330 = x7329 * x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7331 = x7328 + x7330;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7332 = x6628 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7333 = x93 - x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7334 = x7333 * x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7335 = x7332 + x7334;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7336 = x6629 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7337 = x93 - x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7338 = x7337 * x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7339 = x7336 + x7338;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7340 = x6630 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7341 = x93 - x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7342 = x7341 * x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7343 = x7340 + x7342;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7344 = x6631 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7345 = x93 - x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7346 = x7345 * x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7347 = x7344 + x7346;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7348 = x6632 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7349 = x93 - x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7350 = x7349 * x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7351 = x7348 + x7350;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7352 = x6633 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7353 = x93 - x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7354 = x7353 * x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7355 = x7352 + x7354;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7356 = x6634 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7357 = x93 - x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7358 = x7357 * x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7359 = x7356 + x7358;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7360 = x6635 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7361 = x93 - x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7362 = x7361 * x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7363 = x7360 + x7362;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7364 = x6636 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7365 = x93 - x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7366 = x7365 * x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7367 = x7364 + x7366;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7368 = x6637 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7369 = x93 - x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7370 = x7369 * x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7371 = x7368 + x7370;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7372 = x6638 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7373 = x93 - x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7374 = x7373 * x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7375 = x7372 + x7374;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7376 = x6639 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7377 = x93 - x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7378 = x7377 * x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7379 = x7376 + x7378;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7380 = x7259 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7381 = x7255 + x7380;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7382 = x7263 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7383 = x7381 + x7382;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7384 = x7267 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7385 = x7383 + x7384;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7386 = x7271 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7387 = x7385 + x7386;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7388 = x7275 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7389 = x7387 + x7388;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7390 = x7279 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7391 = x7389 + x7390;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7392 = x7283 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7393 = x7391 + x7392;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7394 = x7287 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7395 = x7393 + x7394;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7396 = x7291 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7397 = x7395 + x7396;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7398 = x7295 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7399 = x7397 + x7398;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7400 = x7299 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7401 = x7399 + x7400;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7402 = x7303 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7403 = x7401 + x7402;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7404 = x7307 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7405 = x7403 + x7404;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7406 = x7311 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7407 = x7405 + x7406;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7408 = x7315 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7409 = x7407 + x7408;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7410 = x7323 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7411 = x7319 + x7410;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7412 = x7327 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7413 = x7411 + x7412;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7414 = x7331 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7415 = x7413 + x7414;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7416 = x7335 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7417 = x7415 + x7416;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7418 = x7339 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7419 = x7417 + x7418;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7420 = x7343 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7421 = x7419 + x7420;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7422 = x7347 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7423 = x7421 + x7422;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7424 = x7351 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7425 = x7423 + x7424;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7426 = x7355 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7427 = x7425 + x7426;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7428 = x7359 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7429 = x7427 + x7428;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7430 = x7363 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7431 = x7429 + x7430;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7432 = x7367 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7433 = x7431 + x7432;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7434 = x7371 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7435 = x7433 + x7434;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7436 = x7375 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7437 = x7435 + x7436;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7438 = x7379 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7439 = x7437 + x7438;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7440 = x7101 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7441 = x7098 + x7440;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7442 = x7104 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7443 = x7441 + x7442;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7444 = x7107 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7445 = x7443 + x7444;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7446 = x7110 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7447 = x7445 + x7446;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7448 = x7113 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7449 = x7447 + x7448;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7450 = x7116 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7451 = x7449 + x7450;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7452 = x7119 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7453 = x7451 + x7452;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7454 = x7122 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7455 = x7453 + x7454;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7456 = x7125 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7457 = x7455 + x7456;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7458 = x7128 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7459 = x7457 + x7458;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7460 = x7131 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7461 = x7459 + x7460;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7462 = x7134 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7463 = x7461 + x7462;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7464 = x7137 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7465 = x7463 + x7464;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7466 = x7140 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7467 = x7465 + x7466;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7468 = x7143 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7469 = x7467 + x7468;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7470 = x7149 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7471 = x7146 + x7470;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7472 = x7152 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7473 = x7471 + x7472;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7474 = x7155 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7475 = x7473 + x7474;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7476 = x7158 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7477 = x7475 + x7476;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7478 = x7161 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7479 = x7477 + x7478;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7480 = x7164 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7481 = x7479 + x7480;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7482 = x7167 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7483 = x7481 + x7482;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7484 = x7170 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7485 = x7483 + x7484;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7486 = x7173 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7487 = x7485 + x7486;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7488 = x7176 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7489 = x7487 + x7488;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7490 = x7179 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7491 = x7489 + x7490;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7492 = x7182 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7493 = x7491 + x7492;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7494 = x7185 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7495 = x7493 + x7494;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7496 = x7188 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7497 = x7495 + x7496;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7498 = x7191 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7499 = x7497 + x7498;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7500 = x7409 + x7469;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7501 = x7439 + x7499;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7502 = x7221 + x7500;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7503 = x7251 + x7501;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7504 = x6741 + x7502;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7505 = x6743 + x7503;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7506 = x6396 + x7504;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7507 = x6477 + x7505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7508 = x6480 * x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7509 = x93 - x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7510 = x7508 * x7509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7511 = x93 - x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7512 = x6480 * x7511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7513 = x7512 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7514 = x7510 + x7513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7515 = x93 - x6480;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7516 = x7515 * x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7517 = x7516 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7518 = x7514 + x7517;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7519 = x7508 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7520 = x7518 + x7519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7521 = x6481 * x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7522 = x93 - x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7523 = x7521 * x7522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7524 = x93 - x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7525 = x6481 * x7524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7526 = x7525 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7527 = x7523 + x7526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7528 = x93 - x6481;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7529 = x7528 * x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7530 = x7529 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7531 = x7527 + x7530;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7532 = x7521 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7533 = x7531 + x7532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7534 = x6482 * x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7535 = x93 - x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7536 = x7534 * x7535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7537 = x93 - x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7538 = x6482 * x7537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7539 = x7538 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7540 = x7536 + x7539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7541 = x93 - x6482;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7542 = x7541 * x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7543 = x7542 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7544 = x7540 + x7543;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7545 = x7534 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7546 = x7544 + x7545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7547 = x6483 * x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7548 = x93 - x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7549 = x7547 * x7548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7550 = x93 - x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7551 = x6483 * x7550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7552 = x7551 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7553 = x7549 + x7552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7554 = x93 - x6483;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7555 = x7554 * x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7556 = x7555 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7557 = x7553 + x7556;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7558 = x7547 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7559 = x7557 + x7558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7560 = x6484 * x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7561 = x93 - x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7562 = x7560 * x7561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7563 = x93 - x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7564 = x6484 * x7563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7565 = x7564 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7566 = x7562 + x7565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7567 = x93 - x6484;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7568 = x7567 * x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7569 = x7568 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7570 = x7566 + x7569;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7571 = x7560 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7572 = x7570 + x7571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7573 = x6485 * x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7574 = x93 - x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7575 = x7573 * x7574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7576 = x93 - x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7577 = x6485 * x7576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7578 = x7577 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7579 = x7575 + x7578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7580 = x93 - x6485;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7581 = x7580 * x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7582 = x7581 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7583 = x7579 + x7582;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7584 = x7573 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7585 = x7583 + x7584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7586 = x6486 * x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7587 = x93 - x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7588 = x7586 * x7587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7589 = x93 - x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7590 = x6486 * x7589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7591 = x7590 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7592 = x7588 + x7591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7593 = x93 - x6486;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7594 = x7593 * x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7595 = x7594 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7596 = x7592 + x7595;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7597 = x7586 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7598 = x7596 + x7597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7599 = x6487 * x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7600 = x93 - x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7601 = x7599 * x7600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7602 = x93 - x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7603 = x6487 * x7602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7604 = x7603 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7605 = x7601 + x7604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7606 = x93 - x6487;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7607 = x7606 * x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7608 = x7607 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7609 = x7605 + x7608;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7610 = x7599 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7611 = x7609 + x7610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7612 = x6488 * x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7613 = x93 - x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7614 = x7612 * x7613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7615 = x93 - x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7616 = x6488 * x7615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7617 = x7616 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7618 = x7614 + x7617;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7619 = x93 - x6488;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7620 = x7619 * x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7621 = x7620 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7622 = x7618 + x7621;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7623 = x7612 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7624 = x7622 + x7623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7625 = x6489 * x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7626 = x93 - x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7627 = x7625 * x7626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7628 = x93 - x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7629 = x6489 * x7628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7630 = x7629 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7631 = x7627 + x7630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7632 = x93 - x6489;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7633 = x7632 * x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7634 = x7633 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7635 = x7631 + x7634;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7636 = x7625 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7637 = x7635 + x7636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7638 = x6490 * x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7639 = x93 - x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7640 = x7638 * x7639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7641 = x93 - x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7642 = x6490 * x7641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7643 = x7642 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7644 = x7640 + x7643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7645 = x93 - x6490;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7646 = x7645 * x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7647 = x7646 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7648 = x7644 + x7647;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7649 = x7638 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7650 = x7648 + x7649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7651 = x6491 * x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7652 = x93 - x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7653 = x7651 * x7652;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7654 = x93 - x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7655 = x6491 * x7654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7656 = x7655 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7657 = x7653 + x7656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7658 = x93 - x6491;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7659 = x7658 * x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7660 = x7659 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7661 = x7657 + x7660;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7662 = x7651 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7663 = x7661 + x7662;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7664 = x6492 * x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7665 = x93 - x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7666 = x7664 * x7665;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7667 = x93 - x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7668 = x6492 * x7667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7669 = x7668 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7670 = x7666 + x7669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7671 = x93 - x6492;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7672 = x7671 * x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7673 = x7672 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7674 = x7670 + x7673;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7675 = x7664 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7676 = x7674 + x7675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7677 = x6493 * x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7678 = x93 - x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7679 = x7677 * x7678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7680 = x93 - x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7681 = x6493 * x7680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7682 = x7681 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7683 = x7679 + x7682;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7684 = x93 - x6493;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7685 = x7684 * x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7686 = x7685 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7687 = x7683 + x7686;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7688 = x7677 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7689 = x7687 + x7688;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7690 = x6494 * x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7691 = x93 - x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7692 = x7690 * x7691;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7693 = x93 - x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7694 = x6494 * x7693;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7695 = x7694 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7696 = x7692 + x7695;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7697 = x93 - x6494;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7698 = x7697 * x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7699 = x7698 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7700 = x7696 + x7699;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7701 = x7690 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7702 = x7700 + x7701;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7703 = x6495 * x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7704 = x93 - x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7705 = x7703 * x7704;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7706 = x93 - x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7707 = x6495 * x7706;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7708 = x7707 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7709 = x7705 + x7708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7710 = x93 - x6495;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7711 = x7710 * x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7712 = x7711 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7713 = x7709 + x7712;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7714 = x7703 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7715 = x7713 + x7714;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7716 = x6496 * x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7717 = x93 - x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7718 = x7716 * x7717;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7719 = x93 - x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7720 = x6496 * x7719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7721 = x7720 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7722 = x7718 + x7721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7723 = x93 - x6496;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7724 = x7723 * x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7725 = x7724 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7726 = x7722 + x7725;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7727 = x7716 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7728 = x7726 + x7727;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7729 = x6497 * x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7730 = x93 - x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7731 = x7729 * x7730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7732 = x93 - x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7733 = x6497 * x7732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7734 = x7733 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7735 = x7731 + x7734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7736 = x93 - x6497;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7737 = x7736 * x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7738 = x7737 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7739 = x7735 + x7738;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7740 = x7729 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7741 = x7739 + x7740;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7742 = x6498 * x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7743 = x93 - x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7744 = x7742 * x7743;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7745 = x93 - x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7746 = x6498 * x7745;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7747 = x7746 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7748 = x7744 + x7747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7749 = x93 - x6498;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7750 = x7749 * x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7751 = x7750 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7752 = x7748 + x7751;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7753 = x7742 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7754 = x7752 + x7753;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7755 = x6499 * x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7756 = x93 - x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7757 = x7755 * x7756;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7758 = x93 - x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7759 = x6499 * x7758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7760 = x7759 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7761 = x7757 + x7760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7762 = x93 - x6499;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7763 = x7762 * x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7764 = x7763 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7765 = x7761 + x7764;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7766 = x7755 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7767 = x7765 + x7766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7768 = x6500 * x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7769 = x93 - x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7770 = x7768 * x7769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7771 = x93 - x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7772 = x6500 * x7771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7773 = x7772 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7774 = x7770 + x7773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7775 = x93 - x6500;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7776 = x7775 * x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7777 = x7776 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7778 = x7774 + x7777;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7779 = x7768 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7780 = x7778 + x7779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7781 = x6501 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7782 = x93 - x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7783 = x7781 * x7782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7784 = x93 - x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7785 = x6501 * x7784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7786 = x7785 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7787 = x7783 + x7786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7788 = x93 - x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7789 = x7788 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7790 = x7789 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7791 = x7787 + x7790;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7792 = x7781 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7793 = x7791 + x7792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7794 = x6502 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7795 = x93 - x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7796 = x7794 * x7795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7797 = x93 - x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7798 = x6502 * x7797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7799 = x7798 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7800 = x7796 + x7799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7801 = x93 - x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7802 = x7801 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7803 = x7802 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7804 = x7800 + x7803;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7805 = x7794 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7806 = x7804 + x7805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7807 = x6503 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7808 = x93 - x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7809 = x7807 * x7808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7810 = x93 - x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7811 = x6503 * x7810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7812 = x7811 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7813 = x7809 + x7812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7814 = x93 - x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7815 = x7814 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7816 = x7815 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7817 = x7813 + x7816;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7818 = x7807 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7819 = x7817 + x7818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7820 = x6504 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7821 = x93 - x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7822 = x7820 * x7821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7823 = x93 - x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7824 = x6504 * x7823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7825 = x7824 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7826 = x7822 + x7825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7827 = x93 - x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7828 = x7827 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7829 = x7828 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7830 = x7826 + x7829;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7831 = x7820 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7832 = x7830 + x7831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7833 = x6505 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7834 = x93 - x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7835 = x7833 * x7834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7836 = x93 - x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7837 = x6505 * x7836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7838 = x7837 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7839 = x7835 + x7838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7840 = x93 - x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7841 = x7840 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7842 = x7841 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7843 = x7839 + x7842;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7844 = x7833 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7845 = x7843 + x7844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7846 = x6506 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7847 = x93 - x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7848 = x7846 * x7847;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7849 = x93 - x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7850 = x6506 * x7849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7851 = x7850 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7852 = x7848 + x7851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7853 = x93 - x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7854 = x7853 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7855 = x7854 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7856 = x7852 + x7855;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7857 = x7846 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7858 = x7856 + x7857;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7859 = x6507 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7860 = x93 - x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7861 = x7859 * x7860;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7862 = x93 - x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7863 = x6507 * x7862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7864 = x7863 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7865 = x7861 + x7864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7866 = x93 - x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7867 = x7866 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7868 = x7867 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7869 = x7865 + x7868;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7870 = x7859 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7871 = x7869 + x7870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7872 = x6508 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7873 = x93 - x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7874 = x7872 * x7873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7875 = x93 - x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7876 = x6508 * x7875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7877 = x7876 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7878 = x7874 + x7877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7879 = x93 - x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7880 = x7879 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7881 = x7880 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7882 = x7878 + x7881;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7883 = x7872 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7884 = x7882 + x7883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7885 = x6509 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7886 = x93 - x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7887 = x7885 * x7886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7888 = x93 - x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7889 = x6509 * x7888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7890 = x7889 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7891 = x7887 + x7890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7892 = x93 - x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7893 = x7892 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7894 = x7893 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7895 = x7891 + x7894;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7896 = x7885 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7897 = x7895 + x7896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7898 = x6510 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7899 = x93 - x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7900 = x7898 * x7899;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7901 = x93 - x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7902 = x6510 * x7901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7903 = x7902 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7904 = x7900 + x7903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7905 = x93 - x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7906 = x7905 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7907 = x7906 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7908 = x7904 + x7907;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7909 = x7898 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7910 = x7908 + x7909;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7911 = x6511 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7912 = x93 - x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7913 = x7911 * x7912;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7914 = x93 - x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7915 = x6511 * x7914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7916 = x7915 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7917 = x7913 + x7916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7918 = x93 - x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7919 = x7918 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7920 = x7919 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7921 = x7917 + x7920;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7922 = x7911 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7923 = x7921 + x7922;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7924 = x7533 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7925 = x7520 + x7924;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7926 = x7546 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7927 = x7925 + x7926;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7928 = x7559 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7929 = x7927 + x7928;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7930 = x7572 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7931 = x7929 + x7930;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7932 = x7585 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7933 = x7931 + x7932;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7934 = x7598 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7935 = x7933 + x7934;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7936 = x7611 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7937 = x7935 + x7936;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7938 = x7624 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7939 = x7937 + x7938;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7940 = x7637 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7941 = x7939 + x7940;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7942 = x7650 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7943 = x7941 + x7942;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7944 = x7663 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7945 = x7943 + x7944;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7946 = x7676 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7947 = x7945 + x7946;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7948 = x7689 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7949 = x7947 + x7948;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7950 = x7702 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7951 = x7949 + x7950;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7952 = x7715 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7953 = x7951 + x7952;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7954 = x7741 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7955 = x7728 + x7954;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7956 = x7754 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7957 = x7955 + x7956;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7958 = x7767 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7959 = x7957 + x7958;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7960 = x7780 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7961 = x7959 + x7960;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7962 = x7793 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7963 = x7961 + x7962;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7964 = x7806 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7965 = x7963 + x7964;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7966 = x7819 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7967 = x7965 + x7966;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7968 = x7832 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7969 = x7967 + x7968;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7970 = x7845 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7971 = x7969 + x7970;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7972 = x7858 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7973 = x7971 + x7972;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7974 = x7871 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7975 = x7973 + x7974;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7976 = x7884 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7977 = x7975 + x7976;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7978 = x7897 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7979 = x7977 + x7978;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7980 = x7910 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7981 = x7979 + x7980;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7982 = x7923 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7983 = x7981 + x7982;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7984 = x6877 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7985 = x6874 + x7984;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7986 = x6880 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7987 = x7985 + x7986;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7988 = x6883 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7989 = x7987 + x7988;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7990 = x6886 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7991 = x7989 + x7990;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7992 = x6889 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7993 = x7991 + x7992;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7994 = x6892 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7995 = x7993 + x7994;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7996 = x6895 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7997 = x7995 + x7996;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7998 = x6898 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7999 = x7997 + x7998;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8000 = x6901 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8001 = x7999 + x8000;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8002 = x6904 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8003 = x8001 + x8002;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8004 = x6907 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8005 = x8003 + x8004;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8006 = x6910 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8007 = x8005 + x8006;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8008 = x6913 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8009 = x8007 + x8008;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8010 = x6916 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8011 = x8009 + x8010;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8012 = x6919 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8013 = x8011 + x8012;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8014 = x6925 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8015 = x6922 + x8014;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8016 = x6928 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8017 = x8015 + x8016;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8018 = x6931 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8019 = x8017 + x8018;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8020 = x6934 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8021 = x8019 + x8020;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8022 = x6937 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8023 = x8021 + x8022;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8024 = x6940 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8025 = x8023 + x8024;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8026 = x6943 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8027 = x8025 + x8026;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8028 = x6946 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8029 = x8027 + x8028;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8030 = x6949 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8031 = x8029 + x8030;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8032 = x6952 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8033 = x8031 + x8032;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8034 = x6955 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8035 = x8033 + x8034;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8036 = x6958 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8037 = x8035 + x8036;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8038 = x6961 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8039 = x8037 + x8038;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8040 = x6964 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8041 = x8039 + x8040;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8042 = x6967 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8043 = x8041 + x8042;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8044 = x7953 + x8013;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8045 = x7983 + x8043;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8046 = x7506 + x8044;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8047 = x7507 + x8045;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8048 = x6577 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8049 = x6576 + x8048;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8050 = x6578 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8051 = x8049 + x8050;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8052 = x6579 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8053 = x8051 + x8052;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8054 = x6580 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8055 = x8053 + x8054;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8056 = x6581 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8057 = x8055 + x8056;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8058 = x6582 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8059 = x8057 + x8058;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8060 = x6583 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8061 = x8059 + x8060;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8062 = x6584 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8063 = x8061 + x8062;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8064 = x6585 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8065 = x8063 + x8064;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8066 = x6586 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8067 = x8065 + x8066;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8068 = x6587 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8069 = x8067 + x8068;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8070 = x6588 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8071 = x8069 + x8070;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8072 = x6589 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8073 = x8071 + x8072;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8074 = x6590 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8075 = x8073 + x8074;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8076 = x6591 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8077 = x8075 + x8076;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8078 = x6593 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8079 = x6592 + x8078;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8080 = x6594 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8081 = x8079 + x8080;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8082 = x6595 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8083 = x8081 + x8082;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8084 = x6596 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8085 = x8083 + x8084;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8086 = x6597 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8087 = x8085 + x8086;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8088 = x6598 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8089 = x8087 + x8088;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8090 = x6599 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8091 = x8089 + x8090;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8092 = x6600 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8093 = x8091 + x8092;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8094 = x6601 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8095 = x8093 + x8094;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8096 = x6602 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8097 = x8095 + x8096;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8098 = x6603 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8099 = x8097 + x8098;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8100 = x6604 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8101 = x8099 + x8100;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8102 = x6605 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8103 = x8101 + x8102;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8104 = x6606 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8105 = x8103 + x8104;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8106 = x6607 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8107 = x8105 + x8106;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8108 = x7506 + x8077;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8109 = x7507 + x8107;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8046);
        reg = x8046;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8108);
        reg = x8108;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8047);
        reg = x8047;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8109);
        reg = x8109;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8110 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x8110 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8111 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x8111 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8112 = Fp(x8110.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8112);
          reg = x8112;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8113 = Fp(x8110.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8114 = x8113 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8114);
          reg = x8114;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8115 = Fp(x8110.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8116 = x8115 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8116);
          reg = x8116;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8117 = Fp(x8110.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8118 = x8117 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8118);
          reg = x8118;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8119 = Fp(x8110.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8120 = x8119 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8120);
          reg = x8120;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8121 = Fp(x8110.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8122 = x8121 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8122);
          reg = x8122;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8123 = Fp(x8110.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8124 = x8123 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8124);
          reg = x8124;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8125 = Fp(x8110.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8126 = x8125 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8126);
          reg = x8126;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8127 = Fp(x8110.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8128 = x8127 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8128);
          reg = x8128;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8129 = Fp(x8110.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8130 = x8129 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8130);
          reg = x8130;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8131 = Fp(x8110.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8132 = x8131 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8132);
          reg = x8132;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8133 = Fp(x8110.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8134 = x8133 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8134);
          reg = x8134;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8135 = Fp(x8110.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8136 = x8135 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8136);
          reg = x8136;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8137 = Fp(x8110.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8138 = x8137 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8138);
          reg = x8138;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8139 = Fp(x8110.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8140 = x8139 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8140);
          reg = x8140;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8141 = Fp(x8110.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8142 = x8141 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8142);
          reg = x8142;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8143 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x8143 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8144 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x8144 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8145 = x8144 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8146 = x8143 + x8145;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8147 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x8147 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8148 = x8147 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8149 = x8146 + x8148;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8150 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8150 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8151 = x8150 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8152 = x8149 + x8151;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8153 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8153 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8154 = x8153 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8155 = x8152 + x8154;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8156 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8156 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8157 = x8156 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8158 = x8155 + x8157;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8159 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x8159 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8160 = x8159 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8161 = x8158 + x8160;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8162 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x8162 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8163 = x8162 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8164 = x8161 + x8163;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8165 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x8165 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8166 = x8165 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8167 = x8164 + x8166;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8168 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8169 = x8168 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8170 = x8167 + x8169;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8171 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8171 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8172 = x8171 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8173 = x8170 + x8172;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8174 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8175 = x8174 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8176 = x8173 + x8175;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8177 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8178 = x8177 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8179 = x8176 + x8178;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8180 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8180 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8181 = x8180 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8182 = x8179 + x8181;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8183 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8183 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8184 = x8183 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8185 = x8182 + x8184;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8186 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8186 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8187 = x8186 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8188 = x8185 + x8187;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8189 = x8110 - x8188;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8190 = x8189 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8191 = Fp(x8190.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8191);
          reg = x8191;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8192 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8192 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8193 = x8190 - x8192;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8194 = x8193 * x73;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8195 = x93 - x8194;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8196 = x8194 * x8195;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8196 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8197 = x8111 + x8190;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8198 = Fp(x8197.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8198);
          reg = x8198;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8199 = Fp(x8197.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8200 = x8199 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8200);
          reg = x8200;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8201 = Fp(x8197.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8202 = x8201 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8202);
          reg = x8202;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8203 = Fp(x8197.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8204 = x8203 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8204);
          reg = x8204;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8205 = Fp(x8197.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8206 = x8205 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8206);
          reg = x8206;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8207 = Fp(x8197.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8208 = x8207 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8208);
          reg = x8208;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8209 = Fp(x8197.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8210 = x8209 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8210);
          reg = x8210;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8211 = Fp(x8197.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8212 = x8211 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8212);
          reg = x8212;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8213 = Fp(x8197.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8214 = x8213 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8214);
          reg = x8214;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8215 = Fp(x8197.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8216 = x8215 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8216);
          reg = x8216;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8217 = Fp(x8197.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8218 = x8217 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8218);
          reg = x8218;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8219 = Fp(x8197.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8220 = x8219 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8220);
          reg = x8220;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8221 = Fp(x8197.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8222 = x8221 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8222);
          reg = x8222;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8223 = Fp(x8197.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8224 = x8223 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8224);
          reg = x8224;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8225 = Fp(x8197.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8226 = x8225 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8226);
          reg = x8226;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8227 = Fp(x8197.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8228 = x8227 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8228);
          reg = x8228;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8229 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8229 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8230 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8230 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8231 = x8230 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8232 = x8229 + x8231;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8233 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8233 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8234 = x8233 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8235 = x8232 + x8234;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8236 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8236 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8237 = x8236 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8238 = x8235 + x8237;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8239 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8239 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8240 = x8239 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8241 = x8238 + x8240;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8242 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8242 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8243 = x8242 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8244 = x8241 + x8243;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8245 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8245 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8246 = x8245 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8247 = x8244 + x8246;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8248 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8248 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8249 = x8248 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8250 = x8247 + x8249;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8251 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8251 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8252 = x8251 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8253 = x8250 + x8252;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8254 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8254 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8255 = x8254 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8256 = x8253 + x8255;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8257 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8257 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8258 = x8257 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8259 = x8256 + x8258;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8260 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8260 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8261 = x8260 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8262 = x8259 + x8261;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8263 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8263 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8264 = x8263 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8265 = x8262 + x8264;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8266 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8266 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8267 = x8266 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8268 = x8265 + x8267;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8269 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8269 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8270 = x8269 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8271 = x8268 + x8270;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8272 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8272 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8273 = x8272 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8274 = x8271 + x8273;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8275 = x8197 - x8274;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8276 = x8275 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8277 = Fp(x8276.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8277);
          reg = x8277;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8278 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x8278 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8279 = x8276 - x8278;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8280 = x8279 * x73;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8281 = x93 - x8280;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8282 = x8280 * x8281;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8282 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8283 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x8283 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8284 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x8284 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8285 = Fp(x8283.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8285);
          reg = x8285;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8286 = Fp(x8283.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8287 = x8286 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8287);
          reg = x8287;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8288 = Fp(x8283.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8289 = x8288 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8289);
          reg = x8289;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8290 = Fp(x8283.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8291 = x8290 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8291);
          reg = x8291;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8292 = Fp(x8283.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8293 = x8292 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8293);
          reg = x8293;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8294 = Fp(x8283.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8295 = x8294 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8295);
          reg = x8295;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8296 = Fp(x8283.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8297 = x8296 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8297);
          reg = x8297;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8298 = Fp(x8283.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8299 = x8298 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8299);
          reg = x8299;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8300 = Fp(x8283.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8301 = x8300 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8301);
          reg = x8301;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8302 = Fp(x8283.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8303 = x8302 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8303);
          reg = x8303;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8304 = Fp(x8283.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8305 = x8304 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8305);
          reg = x8305;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8306 = Fp(x8283.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8307 = x8306 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8307);
          reg = x8307;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8308 = Fp(x8283.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8309 = x8308 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8309);
          reg = x8309;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8310 = Fp(x8283.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8311 = x8310 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8311);
          reg = x8311;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8312 = Fp(x8283.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8313 = x8312 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8313);
          reg = x8313;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8314 = Fp(x8283.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8315 = x8314 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8315);
          reg = x8315;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8316 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8316 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8317 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8317 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8318 = x8317 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8319 = x8316 + x8318;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8320 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8320 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8321 = x8320 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8322 = x8319 + x8321;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8323 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8323 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8324 = x8323 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8325 = x8322 + x8324;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8326 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8326 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8327 = x8326 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8328 = x8325 + x8327;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8329 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8329 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8330 = x8329 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8331 = x8328 + x8330;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8332 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8332 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8333 = x8332 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8334 = x8331 + x8333;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8335 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8335 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8336 = x8335 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8337 = x8334 + x8336;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8338 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8338 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8339 = x8338 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8340 = x8337 + x8339;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8341 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8341 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8342 = x8341 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8343 = x8340 + x8342;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8344 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8344 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8345 = x8344 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8346 = x8343 + x8345;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8347 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8347 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8348 = x8347 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8349 = x8346 + x8348;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8350 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8350 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8351 = x8350 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8352 = x8349 + x8351;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8353 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8353 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8354 = x8353 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8355 = x8352 + x8354;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8356 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8356 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8357 = x8356 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8358 = x8355 + x8357;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8359 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8359 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8360 = x8359 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8361 = x8358 + x8360;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8362 = x8283 - x8361;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8363 = x8362 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8364 = Fp(x8363.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8364);
          reg = x8364;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8365 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x8365 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8366 = x8363 - x8365;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8367 = x8366 * x73;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8368 = x93 - x8367;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8369 = x8367 * x8368;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8369 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8370 = x8284 + x8363;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8371 = Fp(x8370.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8371);
          reg = x8371;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8372 = Fp(x8370.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8373 = x8372 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8373);
          reg = x8373;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8374 = Fp(x8370.asUInt32() & x75.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8375 = x8374 * x73;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8375);
          reg = x8375;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8376 = Fp(x8370.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8377 = x8376 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8377);
          reg = x8377;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8378 = Fp(x8370.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8379 = x8378 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8379);
          reg = x8379;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8380 = Fp(x8370.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8381 = x8380 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8381);
          reg = x8381;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8382 = Fp(x8370.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8383 = x8382 * x52;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8383);
          reg = x8383;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8384 = Fp(x8370.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8385 = x8384 * x61;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8385);
          reg = x8385;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8386 = Fp(x8370.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8387 = x8386 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8387);
          reg = x8387;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8388 = Fp(x8370.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8389 = x8388 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8389);
          reg = x8389;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8390 = Fp(x8370.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8391 = x8390 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8391);
          reg = x8391;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8392 = Fp(x8370.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8393 = x8392 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8393);
          reg = x8393;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8394 = Fp(x8370.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8395 = x8394 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8395);
          reg = x8395;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8396 = Fp(x8370.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8397 = x8396 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8397);
          reg = x8397;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8398 = Fp(x8370.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8399 = x8398 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8399);
          reg = x8399;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8400 = Fp(x8370.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8401 = x8400 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8401);
          reg = x8401;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8402 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8402 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8403 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8403 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8404 = x8403 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8405 = x8402 + x8404;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8406 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8406 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8407 = x8406 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8408 = x8405 + x8407;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8409 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8409 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8410 = x8409 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8411 = x8408 + x8410;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8412 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8412 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8413 = x8412 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8414 = x8411 + x8413;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8415 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8415 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8416 = x8415 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8417 = x8414 + x8416;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8418 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8418 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8419 = x8418 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8420 = x8417 + x8419;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8421 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8421 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8422 = x8421 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8423 = x8420 + x8422;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8424 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8424 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8425 = x8424 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8426 = x8423 + x8425;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8427 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8427 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8428 = x8427 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8429 = x8426 + x8428;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8430 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8430 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8431 = x8430 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8432 = x8429 + x8431;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8433 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8433 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8434 = x8433 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8435 = x8432 + x8434;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8436 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8436 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8437 = x8436 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8438 = x8435 + x8437;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8439 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8439 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8440 = x8439 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8441 = x8438 + x8440;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8442 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x8442 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8443 = x8442 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8444 = x8441 + x8443;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8445 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x8445 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8446 = x8445 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8447 = x8444 + x8446;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8448 = x8370 - x8447;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8449 = x8448 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8450 = Fp(x8449.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8450);
          reg = x8450;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8451 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x8451 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8452 = x8449 - x8451;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8453 = x8452 * x73;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8454 = x93 - x8453;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8455 = x8453 * x8454;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8455 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/components/mux.h":39:25))
    auto x8456 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x8456 != Fp::invalid());
    if (x8456 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8457 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x8457 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8458 = args[2][136 * steps + ((cycle - 1) & mask)];
      assert(x8458 != Fp::invalid());
      if (x8458 != 0) {
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("cirgen/circuit/rv32im/sha.cpp":339:72))
        auto x8459 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x8459 != Fp::invalid());
        if (x8459 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":342:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4);
            reg = x4;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":343:40))
          auto x8460 = args[2][138 * steps + ((cycle - 1) & mask)];
          assert(x8460 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":343:7)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8460);
            reg = x8460;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":345:22)
        auto x8461 = x93 - x8459;
        if (x8461 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":347:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":348:44))
          auto x8462 = args[2][138 * steps + ((cycle - 1) & mask)];
          assert(x8462 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":348:44)
          auto x8463 = x8462 - x93;
          // loc("cirgen/circuit/rv32im/sha.cpp":348:7)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8463);
            reg = x8463;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":351:18)
      auto x8464 = x93 - x8458;
      if (x8464 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8465 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x8465 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8465);
          reg = x8465;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":354:40))
        auto x8466 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x8466 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":354:40)
        auto x8467 = x8466 - x93;
        // loc("cirgen/circuit/rv32im/sha.cpp":354:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8467);
          reg = x8467;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":355:38))
        auto x8468 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x8468 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":355:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8468);
          reg = x8468;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8469 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x8469 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8470 = (x8469 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8470);
          reg = x8470;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8471 = inv(x8469);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8471);
          reg = x8471;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8472 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x8472 != Fp::invalid());
      if (x8472 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8469 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8473 = x93 - x8472;
      if (x8473 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8474 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x8474 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8475 = x8469 * x8474;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8476 = x8475 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8476 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8477 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x8477 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":359:15)
      auto x8478 = x93 - x8477;
      if (x8472 != 0) {
        if (x8478 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        if (x8477 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
        }
      }
      if (x8473 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":369:38))
      auto x8479 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x8479 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":369:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8479);
        reg = x8479;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":370:40))
      auto x8480 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x8480 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":370:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8480);
        reg = x8480;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8481 = args[2][143 * steps + ((cycle - 1) & mask)];
      assert(x8481 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8481);
        reg = x8481;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8482 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x8482 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8483 = (x8482 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8483);
          reg = x8483;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8484 = inv(x8482);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8484);
          reg = x8484;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8485 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x8485 != Fp::invalid());
      if (x8485 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8482 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8486 = x93 - x8485;
      if (x8486 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8487 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x8487 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8488 = x8482 * x8487;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8489 = x8488 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8489 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x8490 = x596 + x75;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8491 = Fp(x8490.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8491);
          reg = x8491;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x8492 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x8492 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8493 = x8490 - x8492;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x8494 = x8493 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8495 = Fp(x8494.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8495);
          reg = x8495;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x8496 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x8496 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8497 = x8494 - x8496;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x8498 = x8497 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8499 = Fp(x8498.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8499);
          reg = x8499;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x8500 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x8500 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8501 = x8498 - x8500;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x8502 = x8501 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x8503 = Fp(x8502.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8503);
          reg = x8503;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8504 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x8504 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x8505 = x8502 - x8504;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x8506 = x8505 * x73;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8506);
        reg = x8506;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8507 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8507 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x8508 = x93 - x8507;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x8509 = x8507 * x8508;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8509);
        reg = x8509;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x8510 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x8510 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x8511 = x90 - x8507;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x8512 = x8510 * x8511;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x8512 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x65;
      host_args.at(1) = x8477;
      host_args.at(2) = x8469;
      host_args.at(3) = x8482;
      host(ctx, "log", "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", host_args.data(), 4, host_outs.data(), 0);
      if (x8478 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
        auto x8513 = x3 - x8469;
        {
          host_args.at(0) = x8513;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x8514 = host_outs.at(0);
          auto x8515 = host_outs.at(1);
          auto x8516 = host_outs.at(2);
          auto x8517 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8514);
            reg = x8514;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8515);
            reg = x8515;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8516);
            reg = x8516;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8517);
            reg = x8517;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8518 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x8518 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8519 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x8519 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8520 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x8520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8521 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x8521 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8513);
          reg = x8513;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8457);
          reg = x8457;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8518);
          reg = x8518;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8519);
          reg = x8519;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8520);
          reg = x8520;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8521);
          reg = x8521;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8522 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8522 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8523 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8523 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8524 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8524 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8525 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8525 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8526 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8527 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8527 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8528 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8529 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x8529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8530 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x8530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8531 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x8531 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8532 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8532 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8533 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8533 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8534 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8534 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8535 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8535 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8536 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8536 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8537 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x8537 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8538 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x8538 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8539 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x8539 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8540 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x8540 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8541 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x8541 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8542 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x8542 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8543 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x8543 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8544 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x8544 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8545 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x8545 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8546 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x8546 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8547 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x8547 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8548 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x8548 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8549 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x8549 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8550 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x8550 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8551 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x8551 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8552 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x8552 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8553 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x8553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8554 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x8554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8555 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x8555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8556 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x8556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8557 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x8557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8558 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x8558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8559 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x8559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8560 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x8560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8561 = args[2][89 * steps + ((cycle - 7) & mask)];
      assert(x8561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8562 = args[2][90 * steps + ((cycle - 7) & mask)];
      assert(x8562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8563 = args[2][91 * steps + ((cycle - 7) & mask)];
      assert(x8563 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8564 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x8564 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8565 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x8565 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8566 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x8566 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8567 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x8567 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8568 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x8568 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8569 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x8569 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8570 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x8570 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8571 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x8571 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8572 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x8572 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8573 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x8573 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8574 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x8574 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8575 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x8575 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8576 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x8576 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8577 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x8577 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8578 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x8578 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8579 = args[2][34 * steps + ((cycle - 7) & mask)];
      assert(x8579 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8580 = args[2][35 * steps + ((cycle - 7) & mask)];
      assert(x8580 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8581 = args[2][36 * steps + ((cycle - 7) & mask)];
      assert(x8581 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8582 = args[2][37 * steps + ((cycle - 7) & mask)];
      assert(x8582 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8583 = args[2][38 * steps + ((cycle - 7) & mask)];
      assert(x8583 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8584 = args[2][39 * steps + ((cycle - 7) & mask)];
      assert(x8584 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8585 = args[2][40 * steps + ((cycle - 7) & mask)];
      assert(x8585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8586 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x8586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8587 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x8587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8588 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x8588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8589 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x8589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8590 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x8590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8591 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x8591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8592 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x8592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8593 = args[2][89 * steps + ((cycle - 15) & mask)];
      assert(x8593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8594 = args[2][90 * steps + ((cycle - 15) & mask)];
      assert(x8594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8595 = args[2][91 * steps + ((cycle - 15) & mask)];
      assert(x8595 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8596 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x8596 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8597 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x8597 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8598 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x8598 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8599 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x8599 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8600 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x8600 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8601 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x8601 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8602 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x8602 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8603 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x8603 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8604 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x8604 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8605 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x8605 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8606 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8607 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x8607 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8608 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x8608 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8609 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x8609 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8610 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x8610 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8611 = args[2][34 * steps + ((cycle - 15) & mask)];
      assert(x8611 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8612 = args[2][35 * steps + ((cycle - 15) & mask)];
      assert(x8612 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8613 = args[2][36 * steps + ((cycle - 15) & mask)];
      assert(x8613 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8614 = args[2][37 * steps + ((cycle - 15) & mask)];
      assert(x8614 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8615 = args[2][38 * steps + ((cycle - 15) & mask)];
      assert(x8615 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8616 = args[2][39 * steps + ((cycle - 15) & mask)];
      assert(x8616 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8617 = args[2][40 * steps + ((cycle - 15) & mask)];
      assert(x8617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8618 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x8618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8619 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x8619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8620 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x8620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8621 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x8621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8622 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x8622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8623 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x8623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8624 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x8624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8625 = args[2][89 * steps + ((cycle - 16) & mask)];
      assert(x8625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8626 = args[2][90 * steps + ((cycle - 16) & mask)];
      assert(x8626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8627 = args[2][91 * steps + ((cycle - 16) & mask)];
      assert(x8627 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8628 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x8628 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8629 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x8629 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8630 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x8630 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8631 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x8631 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8632 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x8632 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8633 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8634 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x8634 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8635 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x8635 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8636 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x8636 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8637 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x8637 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8638 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x8638 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8639 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8640 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x8640 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8641 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x8641 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8642 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8643 = args[2][34 * steps + ((cycle - 16) & mask)];
      assert(x8643 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8644 = args[2][35 * steps + ((cycle - 16) & mask)];
      assert(x8644 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8645 = args[2][36 * steps + ((cycle - 16) & mask)];
      assert(x8645 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8646 = args[2][37 * steps + ((cycle - 16) & mask)];
      assert(x8646 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8647 = args[2][38 * steps + ((cycle - 16) & mask)];
      assert(x8647 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8648 = args[2][39 * steps + ((cycle - 16) & mask)];
      assert(x8648 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8649 = args[2][40 * steps + ((cycle - 16) & mask)];
      assert(x8649 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8650 = x8604 + x8589;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8651 = x8604 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8652 = x8651 * x8589;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8653 = x8650 - x8652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8654 = x8605 + x8590;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8655 = x8605 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8656 = x8655 * x8590;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8657 = x8654 - x8656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8658 = x8606 + x8591;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8659 = x8606 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8660 = x8659 * x8591;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8661 = x8658 - x8660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8662 = x8607 + x8592;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8663 = x8607 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8664 = x8663 * x8592;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8665 = x8662 - x8664;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8666 = x8608 + x8593;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8667 = x8608 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8668 = x8667 * x8593;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8669 = x8666 - x8668;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8670 = x8609 + x8594;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8671 = x8609 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8672 = x8671 * x8594;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8673 = x8670 - x8672;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8674 = x8610 + x8595;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8675 = x8610 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8676 = x8675 * x8595;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8677 = x8674 - x8676;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8678 = x8611 + x8596;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8679 = x8611 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8680 = x8679 * x8596;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8681 = x8678 - x8680;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8682 = x8612 + x8597;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8683 = x8612 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8684 = x8683 * x8597;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8685 = x8682 - x8684;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8686 = x8613 + x8598;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8687 = x8613 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8688 = x8687 * x8598;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8689 = x8686 - x8688;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8690 = x8614 + x8599;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8691 = x8614 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8692 = x8691 * x8599;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8693 = x8690 - x8692;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8694 = x8615 + x8600;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8695 = x8615 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8696 = x8695 * x8600;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8697 = x8694 - x8696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8698 = x8616 + x8601;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8699 = x8616 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8700 = x8699 * x8601;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8701 = x8698 - x8700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8702 = x8617 + x8602;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8703 = x8617 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8704 = x8703 * x8602;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8705 = x8702 - x8704;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8706 = x8586 + x8603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8707 = x8586 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8708 = x8707 * x8603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8709 = x8706 - x8708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8710 = x8587 + x8604;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8711 = x8587 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8712 = x8711 * x8604;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8713 = x8710 - x8712;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8714 = x8588 + x8605;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8715 = x8588 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8716 = x8715 * x8605;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8717 = x8714 - x8716;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8718 = x8589 + x8606;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8719 = x8589 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8720 = x8719 * x8606;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8721 = x8718 - x8720;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8722 = x8590 + x8607;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8723 = x8590 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8724 = x8723 * x8607;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8725 = x8722 - x8724;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8726 = x8591 + x8608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8727 = x8591 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8728 = x8727 * x8608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8729 = x8726 - x8728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8730 = x8592 + x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8731 = x8592 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8732 = x8731 * x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8733 = x8730 - x8732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8734 = x8593 + x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8735 = x8593 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8736 = x8735 * x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8737 = x8734 - x8736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8738 = x8594 + x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8739 = x8594 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8740 = x8739 * x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8741 = x8738 - x8740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8742 = x8595 + x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8743 = x8595 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8744 = x8743 * x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8745 = x8742 - x8744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8746 = x8596 + x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8747 = x8596 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8748 = x8747 * x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8749 = x8746 - x8748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8750 = x8597 + x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8751 = x8597 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8752 = x8751 * x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8753 = x8750 - x8752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8754 = x8598 + x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8755 = x8598 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8756 = x8755 * x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8757 = x8754 - x8756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8758 = x8599 + x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8759 = x8599 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8760 = x8759 * x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8761 = x8758 - x8760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8762 = x8600 + x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8763 = x8600 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8764 = x8763 * x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8765 = x8762 - x8764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8766 = x8593 + x8653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8767 = x8735 * x8653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8768 = x8766 - x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8769 = x8594 + x8657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8770 = x8739 * x8657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8771 = x8769 - x8770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8772 = x8595 + x8661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8773 = x8743 * x8661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8774 = x8772 - x8773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8775 = x8596 + x8665;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8776 = x8747 * x8665;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8777 = x8775 - x8776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8778 = x8597 + x8669;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8779 = x8751 * x8669;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8780 = x8778 - x8779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8781 = x8598 + x8673;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8782 = x8755 * x8673;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8783 = x8781 - x8782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8784 = x8599 + x8677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8785 = x8759 * x8677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8786 = x8784 - x8785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8787 = x8600 + x8681;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8788 = x8763 * x8681;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8789 = x8787 - x8788;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8790 = x8601 + x8685;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8791 = x8601 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8792 = x8791 * x8685;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8793 = x8790 - x8792;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8794 = x8602 + x8689;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8795 = x8602 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8796 = x8795 * x8689;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8797 = x8794 - x8796;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8798 = x8603 + x8693;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8799 = x8603 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8800 = x8799 * x8693;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8801 = x8798 - x8800;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8802 = x8604 + x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8803 = x8651 * x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8804 = x8802 - x8803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8805 = x8605 + x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8806 = x8655 * x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8807 = x8805 - x8806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8808 = x8606 + x8705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8809 = x8659 * x8705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8810 = x8808 - x8809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8811 = x8607 + x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8812 = x8663 * x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8813 = x8811 - x8812;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8814 = x8608 + x8713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8815 = x8667 * x8713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8816 = x8814 - x8815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8817 = x8609 + x8717;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8818 = x8671 * x8717;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8819 = x8817 - x8818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8820 = x8610 + x8721;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8821 = x8675 * x8721;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8822 = x8820 - x8821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8823 = x8611 + x8725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8824 = x8679 * x8725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8825 = x8823 - x8824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8826 = x8612 + x8729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8827 = x8683 * x8729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8828 = x8826 - x8827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8829 = x8613 + x8733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8830 = x8687 * x8733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8831 = x8829 - x8830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8832 = x8614 + x8737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8833 = x8691 * x8737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8834 = x8832 - x8833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8835 = x8615 + x8741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8836 = x8695 * x8741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8837 = x8835 - x8836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8838 = x8616 + x8745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8839 = x8699 * x8745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8840 = x8838 - x8839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8841 = x8617 + x8749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8842 = x8703 * x8749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8843 = x8841 - x8842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8844 = x8586 + x8753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8845 = x8707 * x8753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8846 = x8844 - x8845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8847 = x8587 + x8757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8848 = x8711 * x8757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8849 = x8847 - x8848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8850 = x8588 + x8761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8851 = x8715 * x8761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8852 = x8850 - x8851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8853 = x8589 + x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8854 = x8719 * x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8855 = x8853 - x8854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8856 = x8590 + x8601;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8857 = x8723 * x8601;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8858 = x8856 - x8857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8859 = x8591 + x8602;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8860 = x8727 * x8602;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8861 = x8859 - x8860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8862 = x8592 + x8603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8863 = x8731 * x8603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8864 = x8862 - x8863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8865 = x8541 + x8532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8866 = x8541 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8867 = x8866 * x8532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8868 = x8865 - x8867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8869 = x8542 + x8533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8870 = x8542 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8871 = x8870 * x8533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8872 = x8869 - x8871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8873 = x8543 + x8534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8874 = x8543 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8875 = x8874 * x8534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8876 = x8873 - x8875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8877 = x8544 + x8535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8878 = x8544 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8879 = x8878 * x8535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8880 = x8877 - x8879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8881 = x8545 + x8536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8882 = x8545 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8883 = x8882 * x8536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8884 = x8881 - x8883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8885 = x8546 + x8537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8886 = x8546 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8887 = x8886 * x8537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8888 = x8885 - x8887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8889 = x8547 + x8538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8890 = x8547 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8891 = x8890 * x8538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8892 = x8889 - x8891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8893 = x8548 + x8539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8894 = x8548 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8895 = x8894 * x8539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8896 = x8893 - x8895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8897 = x8549 + x8540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8898 = x8549 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8899 = x8898 * x8540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8900 = x8897 - x8899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8901 = x8550 + x8541;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8902 = x8550 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8903 = x8902 * x8541;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8904 = x8901 - x8903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8905 = x8551 + x8542;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8906 = x8551 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8907 = x8906 * x8542;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8908 = x8905 - x8907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8909 = x8552 + x8543;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8910 = x8552 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8911 = x8910 * x8543;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8912 = x8909 - x8911;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8913 = x8553 + x8544;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8914 = x8553 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8915 = x8914 * x8544;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8916 = x8913 - x8915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8917 = x8522 + x8545;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8918 = x8522 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8919 = x8918 * x8545;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8920 = x8917 - x8919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8921 = x8523 + x8546;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8922 = x8523 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8923 = x8922 * x8546;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8924 = x8921 - x8923;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8925 = x8524 + x8547;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8926 = x8524 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8927 = x8926 * x8547;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8928 = x8925 - x8927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8929 = x8525 + x8548;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8930 = x8525 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8931 = x8930 * x8548;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8932 = x8929 - x8931;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8933 = x8526 + x8549;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8934 = x8526 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8935 = x8934 * x8549;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8936 = x8933 - x8935;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8937 = x8527 + x8550;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8938 = x8527 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8939 = x8938 * x8550;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8940 = x8937 - x8939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8941 = x8528 + x8551;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8942 = x8528 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8943 = x8942 * x8551;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8944 = x8941 - x8943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8945 = x8529 + x8552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8946 = x8529 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8947 = x8946 * x8552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8948 = x8945 - x8947;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8949 = x8530 + x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8950 = x8530 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8951 = x8950 * x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8952 = x8949 - x8951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8953 = x8539 + x8868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8954 = x8539 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8955 = x8954 * x8868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8956 = x8953 - x8955;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8957 = x8540 + x8872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8958 = x8540 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8959 = x8958 * x8872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8960 = x8957 - x8959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8961 = x8541 + x8876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8962 = x8866 * x8876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8963 = x8961 - x8962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8964 = x8542 + x8880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8965 = x8870 * x8880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8966 = x8964 - x8965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8967 = x8543 + x8884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8968 = x8874 * x8884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8969 = x8967 - x8968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8970 = x8544 + x8888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8971 = x8878 * x8888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8972 = x8970 - x8971;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8973 = x8545 + x8892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8974 = x8882 * x8892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8975 = x8973 - x8974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8976 = x8546 + x8896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8977 = x8886 * x8896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8978 = x8976 - x8977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8979 = x8547 + x8900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8980 = x8890 * x8900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8981 = x8979 - x8980;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8982 = x8548 + x8904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8983 = x8894 * x8904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8984 = x8982 - x8983;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8985 = x8549 + x8908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8986 = x8898 * x8908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8987 = x8985 - x8986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8988 = x8550 + x8912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8989 = x8902 * x8912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8990 = x8988 - x8989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8991 = x8551 + x8916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8992 = x8906 * x8916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8993 = x8991 - x8992;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8994 = x8552 + x8920;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8995 = x8910 * x8920;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8996 = x8994 - x8995;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8997 = x8553 + x8924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8998 = x8914 * x8924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8999 = x8997 - x8998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9000 = x8522 + x8928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9001 = x8918 * x8928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9002 = x9000 - x9001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9003 = x8523 + x8932;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9004 = x8922 * x8932;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9005 = x9003 - x9004;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9006 = x8524 + x8936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9007 = x8926 * x8936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9008 = x9006 - x9007;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9009 = x8525 + x8940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9010 = x8930 * x8940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9011 = x9009 - x9010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9012 = x8526 + x8944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9013 = x8934 * x8944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9014 = x9012 - x9013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9015 = x8527 + x8948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9016 = x8938 * x8948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9017 = x9015 - x9016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9018 = x8528 + x8952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9019 = x8942 * x8952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9020 = x9018 - x9019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9021 = x8529 + x8531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9022 = x8946 * x8531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9023 = x9021 - x9022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9024 = x8530 + x8532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9025 = x8950 * x8532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9026 = x9024 - x9025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9027 = x8531 + x8533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9028 = x8531 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9029 = x9028 * x8533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9030 = x9027 - x9029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9031 = x8532 + x8534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9032 = x8532 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9033 = x9032 * x8534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9034 = x9031 - x9033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9035 = x8533 + x8535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9036 = x8533 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9037 = x9036 * x8535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9038 = x9035 - x9037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9039 = x8534 + x8536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9040 = x8534 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9041 = x9040 * x8536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9042 = x9039 - x9041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9043 = x8535 + x8537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9044 = x8535 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9045 = x9044 * x8537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9046 = x9043 - x9045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9047 = x8536 + x8538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9048 = x8536 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9049 = x9048 * x8538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9050 = x9047 - x9049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9051 = x8537 + x8539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9052 = x8537 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9053 = x9052 * x8539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9054 = x9051 - x9053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9055 = x8538 + x8540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9056 = x8538 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9057 = x9056 * x8540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9058 = x9055 - x9057;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9059 = x8619 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9060 = x8618 + x9059;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9061 = x8620 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9062 = x9060 + x9061;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9063 = x8621 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9064 = x9062 + x9063;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9065 = x8622 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9066 = x9064 + x9065;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9067 = x8623 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9068 = x9066 + x9067;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9069 = x8624 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9070 = x9068 + x9069;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9071 = x8625 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9072 = x9070 + x9071;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9073 = x8626 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9074 = x9072 + x9073;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9075 = x8627 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9076 = x9074 + x9075;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9077 = x8628 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9078 = x9076 + x9077;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9079 = x8629 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9080 = x9078 + x9079;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9081 = x8630 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9082 = x9080 + x9081;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9083 = x8631 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9084 = x9082 + x9083;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9085 = x8632 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9086 = x9084 + x9085;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9087 = x8633 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9088 = x9086 + x9087;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9089 = x8635 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9090 = x8634 + x9089;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9091 = x8636 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9092 = x9090 + x9091;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9093 = x8637 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9094 = x9092 + x9093;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9095 = x8638 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9096 = x9094 + x9095;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9097 = x8639 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9098 = x9096 + x9097;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9099 = x8640 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9100 = x9098 + x9099;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9101 = x8641 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9102 = x9100 + x9101;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9103 = x8642 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9104 = x9102 + x9103;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9105 = x8643 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9106 = x9104 + x9105;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9107 = x8644 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9108 = x9106 + x9107;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9109 = x8645 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9110 = x9108 + x9109;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9111 = x8646 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9112 = x9110 + x9111;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9113 = x8647 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9114 = x9112 + x9113;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9115 = x8648 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9116 = x9114 + x9115;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9117 = x8649 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9118 = x9116 + x9117;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9119 = x8771 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9120 = x8768 + x9119;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9121 = x8774 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9122 = x9120 + x9121;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9123 = x8777 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9124 = x9122 + x9123;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9125 = x8780 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9126 = x9124 + x9125;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9127 = x8783 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9128 = x9126 + x9127;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9129 = x8786 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9130 = x9128 + x9129;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9131 = x8789 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9132 = x9130 + x9131;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9133 = x8793 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9134 = x9132 + x9133;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9135 = x8797 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9136 = x9134 + x9135;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9137 = x8801 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9138 = x9136 + x9137;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9139 = x8804 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9140 = x9138 + x9139;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9141 = x8807 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9142 = x9140 + x9141;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9143 = x8810 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9144 = x9142 + x9143;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9145 = x8813 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9146 = x9144 + x9145;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9147 = x8816 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9148 = x9146 + x9147;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9149 = x8822 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9150 = x8819 + x9149;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9151 = x8825 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9152 = x9150 + x9151;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9153 = x8828 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9154 = x9152 + x9153;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9155 = x8831 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9156 = x9154 + x9155;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9157 = x8834 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9158 = x9156 + x9157;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9159 = x8837 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9160 = x9158 + x9159;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9161 = x8840 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9162 = x9160 + x9161;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9163 = x8843 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9164 = x9162 + x9163;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9165 = x8846 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9166 = x9164 + x9165;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9167 = x8849 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9168 = x9166 + x9167;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9169 = x8852 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9170 = x9168 + x9169;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9171 = x8855 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9172 = x9170 + x9171;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9173 = x8858 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9174 = x9172 + x9173;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9175 = x8861 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9176 = x9174 + x9175;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9177 = x8864 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9178 = x9176 + x9177;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9179 = x8555 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9180 = x8554 + x9179;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9181 = x8556 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9182 = x9180 + x9181;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9183 = x8557 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9184 = x9182 + x9183;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9185 = x8558 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9186 = x9184 + x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9187 = x8559 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9188 = x9186 + x9187;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9189 = x8560 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9190 = x9188 + x9189;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9191 = x8561 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9192 = x9190 + x9191;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9193 = x8562 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9194 = x9192 + x9193;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9195 = x8563 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9196 = x9194 + x9195;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9197 = x8564 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9198 = x9196 + x9197;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9199 = x8565 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9200 = x9198 + x9199;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9201 = x8566 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9202 = x9200 + x9201;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9203 = x8567 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9204 = x9202 + x9203;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9205 = x8568 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9206 = x9204 + x9205;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9207 = x8569 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9208 = x9206 + x9207;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9209 = x8571 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9210 = x8570 + x9209;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9211 = x8572 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9212 = x9210 + x9211;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9213 = x8573 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9214 = x9212 + x9213;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9215 = x8574 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9216 = x9214 + x9215;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9217 = x8575 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9218 = x9216 + x9217;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9219 = x8576 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9220 = x9218 + x9219;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9221 = x8577 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9222 = x9220 + x9221;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9223 = x8578 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9224 = x9222 + x9223;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9225 = x8579 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9226 = x9224 + x9225;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9227 = x8580 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9228 = x9226 + x9227;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9229 = x8581 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9230 = x9228 + x9229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9231 = x8582 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9232 = x9230 + x9231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9233 = x8583 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9234 = x9232 + x9233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9235 = x8584 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9236 = x9234 + x9235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9237 = x8585 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9238 = x9236 + x9237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9239 = x8960 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9240 = x8956 + x9239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9241 = x8963 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9242 = x9240 + x9241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9243 = x8966 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9244 = x9242 + x9243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9245 = x8969 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9246 = x9244 + x9245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9247 = x8972 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9248 = x9246 + x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9249 = x8975 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9250 = x9248 + x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9251 = x8978 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9252 = x9250 + x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9253 = x8981 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9254 = x9252 + x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9255 = x8984 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9256 = x9254 + x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9257 = x8987 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9258 = x9256 + x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9259 = x8990 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9260 = x9258 + x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9261 = x8993 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9262 = x9260 + x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9263 = x8996 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9264 = x9262 + x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9265 = x8999 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9266 = x9264 + x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9267 = x9002 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9268 = x9266 + x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9269 = x9008 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9270 = x9005 + x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9271 = x9011 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9272 = x9270 + x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9273 = x9014 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9274 = x9272 + x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9275 = x9017 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9276 = x9274 + x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9277 = x9020 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9278 = x9276 + x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9279 = x9023 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9280 = x9278 + x9279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9281 = x9026 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9282 = x9280 + x9281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9283 = x9030 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9284 = x9282 + x9283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9285 = x9034 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9286 = x9284 + x9285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9287 = x9038 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9288 = x9286 + x9287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9289 = x9042 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9290 = x9288 + x9289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9291 = x9046 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9292 = x9290 + x9291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9293 = x9050 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9294 = x9292 + x9293;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9295 = x9054 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9296 = x9294 + x9295;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9297 = x9058 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9298 = x9296 + x9297;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9299 = x9208 + x9268;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9300 = x9238 + x9298;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9301 = x9148 + x9299;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9302 = x9178 + x9300;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9303 = x9088 + x9301;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9304 = x9118 + x9302;
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][148 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9303);
        reg = x9303;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][149 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9304);
        reg = x9304;
      }
      if (x8477 != 0) {
        {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9305 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9305 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9306 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9306 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9307 = x9306 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9308 = x9305 + x9307;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9309 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9309 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9310 = x9309 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9311 = x9308 + x9310;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9312 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9312 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9313 = x9312 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9314 = x9311 + x9313;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9315 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9315 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9316 = x9315 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9317 = x9314 + x9316;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9318 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9318 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9319 = x9318 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9320 = x9317 + x9319;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9321 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9321 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9322 = x9321 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9323 = x9320 + x9322;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9324 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9324 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9325 = x9324 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9326 = x9323 + x9325;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9327 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9327 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9328 = x9327 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9329 = x9326 + x9328;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9330 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9330 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9331 = x9330 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9332 = x9329 + x9331;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9333 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9333 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9334 = x9333 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9335 = x9332 + x9334;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9336 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9336 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9337 = x9336 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9338 = x9335 + x9337;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9339 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9339 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9340 = x9339 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9341 = x9338 + x9340;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9342 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9342 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9343 = x9342 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9344 = x9341 + x9343;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9345 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9345 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9346 = x9345 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9347 = x9344 + x9346;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9348 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9348 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9349 = x9348 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9350 = x9347 + x9349;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9351 = x92 - x9350;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9352 = x9351 * x7;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9352);
          reg = x9352;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9353 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9353 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9354 = Fp(x9353.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9354);
            reg = x9354;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9355 = Fp(x9353.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9356 = x9355 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9356);
            reg = x9356;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9357 = Fp(x9353.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9358 = x9357 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9358);
            reg = x9358;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9359 = Fp(x9353.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9360 = x9359 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9360);
            reg = x9360;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9361 = Fp(x9353.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9362 = x9361 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9362);
            reg = x9362;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9363 = Fp(x9353.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9364 = x9363 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9364);
            reg = x9364;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9365 = Fp(x9353.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9366 = x9365 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9366);
            reg = x9366;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9367 = Fp(x9353.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9368 = x9367 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9368);
            reg = x9368;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9369 = Fp(x9353.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9370 = x9369 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9370);
            reg = x9370;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9371 = Fp(x9353.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9372 = x9371 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9372);
            reg = x9372;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9373 = Fp(x9353.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9374 = x9373 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9374);
            reg = x9374;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9375 = Fp(x9353.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9376 = x9375 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9376);
            reg = x9376;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9377 = Fp(x9353.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9378 = x9377 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9378);
            reg = x9378;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9379 = Fp(x9353.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9380 = x9379 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9380);
            reg = x9380;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9381 = Fp(x9353.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9382 = x9381 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9382);
            reg = x9382;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9383 = Fp(x9353.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9384 = x9383 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9384);
            reg = x9384;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9385 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9385 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9386 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9386 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9387 = x9386 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9388 = x9385 + x9387;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9389 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9389 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9390 = x9389 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9391 = x9388 + x9390;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9392 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9392 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9393 = x9392 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9394 = x9391 + x9393;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9395 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9395 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9396 = x9395 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9397 = x9394 + x9396;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9398 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9398 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9399 = x9398 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9400 = x9397 + x9399;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9401 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9401 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9402 = x9401 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9403 = x9400 + x9402;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9404 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9404 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9405 = x9404 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9406 = x9403 + x9405;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9407 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9407 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9408 = x9407 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9409 = x9406 + x9408;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9410 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9410 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9411 = x9410 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9412 = x9409 + x9411;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9413 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9413 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9414 = x9413 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9415 = x9412 + x9414;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9416 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9416 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9417 = x9416 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9418 = x9415 + x9417;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9419 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9419 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9420 = x9419 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9421 = x9418 + x9420;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9422 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9422 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9423 = x9422 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9424 = x9421 + x9423;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9425 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9425 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9426 = x9425 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9427 = x9424 + x9426;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9428 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9428 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9429 = x9428 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9430 = x9427 + x9429;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9431 = x9353 - x9430;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9432 = x9431 * x7;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9432);
          reg = x9432;
        }
      }
      if (x8478 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x9433 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x9433 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x9434 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x9434 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9435 = Fp(x9433.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9435);
            reg = x9435;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9436 = Fp(x9433.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9437 = x9436 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9437);
            reg = x9437;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9438 = Fp(x9433.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9439 = x9438 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9439);
            reg = x9439;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9440 = Fp(x9433.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9441 = x9440 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9441);
            reg = x9441;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9442 = Fp(x9433.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9443 = x9442 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9443);
            reg = x9443;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9444 = Fp(x9433.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9445 = x9444 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9445);
            reg = x9445;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9446 = Fp(x9433.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9447 = x9446 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9447);
            reg = x9447;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9448 = Fp(x9433.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9449 = x9448 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9449);
            reg = x9449;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9450 = Fp(x9433.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9451 = x9450 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9451);
            reg = x9451;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9452 = Fp(x9433.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9453 = x9452 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9453);
            reg = x9453;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9454 = Fp(x9433.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9455 = x9454 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9455);
            reg = x9455;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9456 = Fp(x9433.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9457 = x9456 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9457);
            reg = x9457;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9458 = Fp(x9433.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9459 = x9458 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9459);
            reg = x9459;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9460 = Fp(x9433.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9461 = x9460 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9461);
            reg = x9461;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9462 = Fp(x9433.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9463 = x9462 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9463);
            reg = x9463;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9464 = Fp(x9433.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9465 = x9464 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9465);
            reg = x9465;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9466 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9466 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9467 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9467 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9468 = x9467 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9469 = x9466 + x9468;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9470 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9470 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9471 = x9470 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9472 = x9469 + x9471;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9473 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9473 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9474 = x9473 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9475 = x9472 + x9474;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9476 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9476 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9477 = x9476 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9478 = x9475 + x9477;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9479 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9479 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9480 = x9479 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9481 = x9478 + x9480;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9482 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9482 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9483 = x9482 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9484 = x9481 + x9483;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9485 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9485 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9486 = x9485 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9487 = x9484 + x9486;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9488 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9488 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9489 = x9488 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9490 = x9487 + x9489;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9491 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9491 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9492 = x9491 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9493 = x9490 + x9492;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9494 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9494 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9495 = x9494 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9496 = x9493 + x9495;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9497 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9497 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9498 = x9497 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9499 = x9496 + x9498;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9500 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9500 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9501 = x9500 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9502 = x9499 + x9501;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9503 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9503 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9504 = x9503 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9505 = x9502 + x9504;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9506 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9506 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9507 = x9506 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9508 = x9505 + x9507;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9509 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9509 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9510 = x9509 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9511 = x9508 + x9510;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9512 = x9433 - x9511;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9513 = x9512 * x7;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9513);
          reg = x9513;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9514 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9514 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
        auto x9515 = x9434 + x9514;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9516 = Fp(x9515.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9516);
            reg = x9516;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9517 = Fp(x9515.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9518 = x9517 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9518);
            reg = x9518;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9519 = Fp(x9515.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9520 = x9519 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9520);
            reg = x9520;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9521 = Fp(x9515.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9522 = x9521 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9522);
            reg = x9522;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9523 = Fp(x9515.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9524 = x9523 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9524);
            reg = x9524;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9525 = Fp(x9515.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9526 = x9525 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9526);
            reg = x9526;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9527 = Fp(x9515.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9528 = x9527 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9528);
            reg = x9528;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9529 = Fp(x9515.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9530 = x9529 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9530);
            reg = x9530;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9531 = Fp(x9515.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9532 = x9531 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9532);
            reg = x9532;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9533 = Fp(x9515.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9534 = x9533 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9534);
            reg = x9534;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9535 = Fp(x9515.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9536 = x9535 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9536);
            reg = x9536;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9537 = Fp(x9515.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9538 = x9537 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9538);
            reg = x9538;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9539 = Fp(x9515.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9540 = x9539 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9540);
            reg = x9540;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9541 = Fp(x9515.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9542 = x9541 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9542);
            reg = x9542;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9543 = Fp(x9515.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9544 = x9543 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9544);
            reg = x9544;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9545 = Fp(x9515.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9546 = x9545 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9546);
            reg = x9546;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9547 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9547 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9548 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9548 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9549 = x9548 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9550 = x9547 + x9549;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9551 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9551 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9552 = x9551 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9553 = x9550 + x9552;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9554 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9554 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9555 = x9554 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9556 = x9553 + x9555;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9557 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9557 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9558 = x9557 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9559 = x9556 + x9558;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9560 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9560 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9561 = x9560 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9562 = x9559 + x9561;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9563 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9563 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9564 = x9563 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9565 = x9562 + x9564;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9566 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9566 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9567 = x9566 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9568 = x9565 + x9567;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9569 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9569 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9570 = x9569 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9571 = x9568 + x9570;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9572 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9572 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9573 = x9572 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9574 = x9571 + x9573;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9575 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9575 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9576 = x9575 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9577 = x9574 + x9576;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9578 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9578 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9579 = x9578 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9580 = x9577 + x9579;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9581 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9581 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9582 = x9581 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9583 = x9580 + x9582;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9584 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9584 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9585 = x9584 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9586 = x9583 + x9585;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9587 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9587 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9588 = x9587 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9589 = x9586 + x9588;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9590 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9590 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9591 = x9590 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9592 = x9589 + x9591;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9593 = x9515 - x9592;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9594 = x9593 * x7;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9594);
          reg = x9594;
        }
      }
      if (x8477 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9595 = args[2][150 * steps + ((cycle - 4) & mask)];
        assert(x9595 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9596 = args[2][151 * steps + ((cycle - 4) & mask)];
        assert(x9596 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9597 = args[2][152 * steps + ((cycle - 4) & mask)];
        assert(x9597 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9598 = args[2][153 * steps + ((cycle - 4) & mask)];
        assert(x9598 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9599 = args[2][154 * steps + ((cycle - 4) & mask)];
        assert(x9599 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9600 = args[2][155 * steps + ((cycle - 4) & mask)];
        assert(x9600 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9601 = args[2][156 * steps + ((cycle - 4) & mask)];
        assert(x9601 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9602 = args[2][157 * steps + ((cycle - 4) & mask)];
        assert(x9602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9603 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x9603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9604 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x9604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9605 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x9605 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9606 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x9606 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9607 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x9607 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9608 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x9608 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9609 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x9609 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9610 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x9610 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9611 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x9611 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9612 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x9612 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9613 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x9613 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9614 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x9614 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9615 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x9615 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9616 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x9616 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9617 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x9617 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9618 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x9618 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9619 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x9619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9620 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x9620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9621 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x9621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9622 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x9622 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9623 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x9623 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9624 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x9624 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9625 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x9625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9626 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x9626 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9627 = x9596 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9628 = x9595 + x9627;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9629 = x9597 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9630 = x9628 + x9629;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9631 = x9598 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9632 = x9630 + x9631;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9633 = x9599 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9634 = x9632 + x9633;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9635 = x9600 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9636 = x9634 + x9635;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9637 = x9601 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9638 = x9636 + x9637;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9639 = x9602 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9640 = x9638 + x9639;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9641 = x9603 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9642 = x9640 + x9641;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9643 = x9604 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9644 = x9642 + x9643;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9645 = x9605 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9646 = x9644 + x9645;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9647 = x9606 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9648 = x9646 + x9647;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9649 = x9607 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9650 = x9648 + x9649;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9651 = x9608 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9652 = x9650 + x9651;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9653 = x9609 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9654 = x9652 + x9653;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9655 = x9610 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9656 = x9654 + x9655;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9657 = x9612 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9658 = x9611 + x9657;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9659 = x9613 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9660 = x9658 + x9659;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9661 = x9614 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9662 = x9660 + x9661;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9663 = x9615 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9664 = x9662 + x9663;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9665 = x9616 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9666 = x9664 + x9665;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9667 = x9617 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9668 = x9666 + x9667;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9669 = x9618 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9670 = x9668 + x9669;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9671 = x9619 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9672 = x9670 + x9671;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9673 = x9620 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9674 = x9672 + x9673;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9675 = x9621 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9676 = x9674 + x9675;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9677 = x9622 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9678 = x9676 + x9677;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9679 = x9623 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9680 = x9678 + x9679;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9681 = x9624 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9682 = x9680 + x9681;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9683 = x9625 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9684 = x9682 + x9683;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9685 = x9626 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9686 = x9684 + x9685;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9687 = args[2][150 * steps + ((cycle - 68) & mask)];
        assert(x9687 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9688 = args[2][151 * steps + ((cycle - 68) & mask)];
        assert(x9688 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9689 = args[2][152 * steps + ((cycle - 68) & mask)];
        assert(x9689 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9690 = args[2][153 * steps + ((cycle - 68) & mask)];
        assert(x9690 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9691 = args[2][154 * steps + ((cycle - 68) & mask)];
        assert(x9691 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9692 = args[2][155 * steps + ((cycle - 68) & mask)];
        assert(x9692 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9693 = args[2][156 * steps + ((cycle - 68) & mask)];
        assert(x9693 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9694 = args[2][157 * steps + ((cycle - 68) & mask)];
        assert(x9694 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9695 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x9695 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9696 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x9696 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9697 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x9697 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9698 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x9698 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9699 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x9699 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9700 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x9700 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9701 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x9701 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9702 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x9702 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9703 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x9703 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9704 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x9704 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9705 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x9705 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9706 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x9706 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9707 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x9707 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9708 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x9708 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9709 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x9709 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9710 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x9710 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9711 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x9711 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9712 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x9712 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9713 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x9713 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9714 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x9714 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9715 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x9715 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9716 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x9716 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9717 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x9717 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9718 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x9718 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9719 = x9688 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9720 = x9687 + x9719;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9721 = x9689 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9722 = x9720 + x9721;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9723 = x9690 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9724 = x9722 + x9723;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9725 = x9691 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9726 = x9724 + x9725;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9727 = x9692 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9728 = x9726 + x9727;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9729 = x9693 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9730 = x9728 + x9729;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9731 = x9694 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9732 = x9730 + x9731;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9733 = x9695 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9734 = x9732 + x9733;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9735 = x9696 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9736 = x9734 + x9735;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9737 = x9697 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9738 = x9736 + x9737;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9739 = x9698 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9740 = x9738 + x9739;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9741 = x9699 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9742 = x9740 + x9741;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9743 = x9700 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9744 = x9742 + x9743;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9745 = x9701 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9746 = x9744 + x9745;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9747 = x9702 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9748 = x9746 + x9747;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9749 = x9704 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9750 = x9703 + x9749;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9751 = x9705 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9752 = x9750 + x9751;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9753 = x9706 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9754 = x9752 + x9753;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9755 = x9707 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9756 = x9754 + x9755;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9757 = x9708 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9758 = x9756 + x9757;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9759 = x9709 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9760 = x9758 + x9759;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9761 = x9710 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9762 = x9760 + x9761;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9763 = x9711 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9764 = x9762 + x9763;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9765 = x9712 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9766 = x9764 + x9765;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9767 = x9713 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9768 = x9766 + x9767;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9769 = x9714 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9770 = x9768 + x9769;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9771 = x9715 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9772 = x9770 + x9771;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9773 = x9716 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9774 = x9772 + x9773;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9775 = x9717 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9776 = x9774 + x9775;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9777 = x9718 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9778 = x9776 + x9777;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9779 = x9656 + x9748;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9780 = x9686 + x9778;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9781 = Fp(x9779.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9781);
            reg = x9781;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9782 = Fp(x9779.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9783 = x9782 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9783);
            reg = x9783;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9784 = Fp(x9779.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9785 = x9784 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9785);
            reg = x9785;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9786 = Fp(x9779.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9787 = x9786 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9787);
            reg = x9787;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9788 = Fp(x9779.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9789 = x9788 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9789);
            reg = x9789;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9790 = Fp(x9779.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9791 = x9790 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9791);
            reg = x9791;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9792 = Fp(x9779.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9793 = x9792 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9793);
            reg = x9793;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9794 = Fp(x9779.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9795 = x9794 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9795);
            reg = x9795;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9796 = Fp(x9779.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9797 = x9796 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9797);
            reg = x9797;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9798 = Fp(x9779.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9799 = x9798 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9799);
            reg = x9799;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9800 = Fp(x9779.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9801 = x9800 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9801);
            reg = x9801;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9802 = Fp(x9779.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9803 = x9802 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9803);
            reg = x9803;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9804 = Fp(x9779.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9805 = x9804 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9805);
            reg = x9805;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9806 = Fp(x9779.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9807 = x9806 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9807);
            reg = x9807;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9808 = Fp(x9779.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9809 = x9808 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9809);
            reg = x9809;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9810 = Fp(x9779.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9811 = x9810 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9811);
            reg = x9811;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9812 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x9812 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9813 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x9813 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9814 = x9813 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9815 = x9812 + x9814;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9816 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x9816 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9817 = x9816 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9818 = x9815 + x9817;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9819 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x9819 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9820 = x9819 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9821 = x9818 + x9820;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9822 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x9822 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9823 = x9822 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9824 = x9821 + x9823;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9825 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x9825 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9826 = x9825 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9827 = x9824 + x9826;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9828 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x9828 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9829 = x9828 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9830 = x9827 + x9829;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9831 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9831 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9832 = x9831 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9833 = x9830 + x9832;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9834 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9834 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9835 = x9834 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9836 = x9833 + x9835;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9837 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x9837 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9838 = x9837 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9839 = x9836 + x9838;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9840 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x9840 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9841 = x9840 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9842 = x9839 + x9841;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9843 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x9843 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9844 = x9843 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9845 = x9842 + x9844;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9846 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x9846 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9847 = x9846 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9848 = x9845 + x9847;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9849 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x9849 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9850 = x9849 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9851 = x9848 + x9850;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9852 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x9852 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9853 = x9852 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9854 = x9851 + x9853;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9855 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x9855 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9856 = x9855 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9857 = x9854 + x9856;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9858 = x9779 - x9857;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9859 = x9858 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x9860 = Fp(x9859.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9860);
            reg = x9860;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9861 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x9861 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x9862 = x9859 - x9861;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x9863 = x9862 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x9864 = x93 - x9863;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x9865 = x9863 * x9864;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x9865 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x9866 = x9780 + x9859;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9867 = Fp(x9866.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9867);
            reg = x9867;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9868 = Fp(x9866.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9869 = x9868 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9869);
            reg = x9869;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9870 = Fp(x9866.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9871 = x9870 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9871);
            reg = x9871;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9872 = Fp(x9866.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9873 = x9872 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9873);
            reg = x9873;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9874 = Fp(x9866.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9875 = x9874 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9875);
            reg = x9875;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9876 = Fp(x9866.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9877 = x9876 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9877);
            reg = x9877;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9878 = Fp(x9866.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9879 = x9878 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9879);
            reg = x9879;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9880 = Fp(x9866.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9881 = x9880 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9881);
            reg = x9881;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9882 = Fp(x9866.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9883 = x9882 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9883);
            reg = x9883;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9884 = Fp(x9866.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9885 = x9884 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9885);
            reg = x9885;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9886 = Fp(x9866.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9887 = x9886 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9887);
            reg = x9887;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9888 = Fp(x9866.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9889 = x9888 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9889);
            reg = x9889;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9890 = Fp(x9866.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9891 = x9890 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9891);
            reg = x9891;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9892 = Fp(x9866.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9893 = x9892 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9893);
            reg = x9893;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9894 = Fp(x9866.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9895 = x9894 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9895);
            reg = x9895;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9896 = Fp(x9866.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9897 = x9896 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9897);
            reg = x9897;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9898 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x9898 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9899 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x9899 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9900 = x9899 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9901 = x9898 + x9900;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9902 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x9902 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9903 = x9902 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9904 = x9901 + x9903;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9905 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x9905 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9906 = x9905 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9907 = x9904 + x9906;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9908 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x9908 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9909 = x9908 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9910 = x9907 + x9909;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9911 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x9911 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9912 = x9911 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9913 = x9910 + x9912;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9914 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x9914 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9915 = x9914 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9916 = x9913 + x9915;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9917 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x9917 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9918 = x9917 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9919 = x9916 + x9918;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9920 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x9920 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9921 = x9920 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9922 = x9919 + x9921;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9923 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x9923 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9924 = x9923 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9925 = x9922 + x9924;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9926 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x9926 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9927 = x9926 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9928 = x9925 + x9927;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9929 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x9929 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9930 = x9929 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9931 = x9928 + x9930;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9932 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x9932 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9933 = x9932 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9934 = x9931 + x9933;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9935 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x9935 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9936 = x9935 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9937 = x9934 + x9936;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9938 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x9938 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9939 = x9938 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9940 = x9937 + x9939;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9941 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x9941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9942 = x9941 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9943 = x9940 + x9942;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9944 = x9866 - x9943;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9945 = x9944 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x9946 = Fp(x9945.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9946);
            reg = x9946;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9947 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9947 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x9948 = x9945 - x9947;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x9949 = x9948 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x9950 = x93 - x9949;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x9951 = x9949 * x9950;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x9951 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9952 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x9952 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9953 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x9953 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9954 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x9954 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9955 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x9955 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9956 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x9956 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9957 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x9957 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9958 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x9958 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9959 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x9959 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9960 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x9960 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9961 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x9961 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9962 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x9962 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9963 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x9963 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9964 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x9964 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9965 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x9965 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9966 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x9966 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9967 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x9967 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9968 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x9968 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9969 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x9969 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9970 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x9970 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9971 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x9971 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9972 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x9972 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9973 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x9973 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9974 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x9974 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9975 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x9975 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9976 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x9976 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9977 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x9977 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9978 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x9978 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9979 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x9979 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9980 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x9980 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9981 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x9981 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9982 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x9982 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9983 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x9983 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9984 = x9953 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9985 = x9952 + x9984;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9986 = x9954 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9987 = x9985 + x9986;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9988 = x9955 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9989 = x9987 + x9988;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9990 = x9956 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9991 = x9989 + x9990;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9992 = x9957 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9993 = x9991 + x9992;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9994 = x9958 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9995 = x9993 + x9994;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9996 = x9959 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9997 = x9995 + x9996;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9998 = x9960 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9999 = x9997 + x9998;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10000 = x9961 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10001 = x9999 + x10000;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10002 = x9962 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10003 = x10001 + x10002;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10004 = x9963 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10005 = x10003 + x10004;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10006 = x9964 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10007 = x10005 + x10006;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10008 = x9965 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10009 = x10007 + x10008;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10010 = x9966 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10011 = x10009 + x10010;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10012 = x9967 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10013 = x10011 + x10012;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10014 = x9969 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10015 = x9968 + x10014;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10016 = x9970 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10017 = x10015 + x10016;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10018 = x9971 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10019 = x10017 + x10018;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10020 = x9972 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10021 = x10019 + x10020;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10022 = x9973 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10023 = x10021 + x10022;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10024 = x9974 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10025 = x10023 + x10024;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10026 = x9975 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10027 = x10025 + x10026;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10028 = x9976 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10029 = x10027 + x10028;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10030 = x9977 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10031 = x10029 + x10030;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10032 = x9978 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10033 = x10031 + x10032;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10034 = x9979 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10035 = x10033 + x10034;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10036 = x9980 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10037 = x10035 + x10036;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10038 = x9981 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10039 = x10037 + x10038;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10040 = x9982 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10041 = x10039 + x10040;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10042 = x9983 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10043 = x10041 + x10042;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10044 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x10044 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10045 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x10045 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10046 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x10046 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10047 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x10047 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10048 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x10048 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10049 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x10049 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10050 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x10050 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10051 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x10051 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10052 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x10052 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10053 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10053 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10054 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10054 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10055 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10055 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10056 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10056 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10057 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10057 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10058 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10058 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10059 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10059 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10060 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10060 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10061 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10061 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10062 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10062 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10063 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10063 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10064 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10064 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10065 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10065 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10066 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10066 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10067 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10067 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10068 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10068 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10069 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10069 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10070 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10070 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10071 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10071 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10072 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10072 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10073 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10073 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10074 = args[2][212 * steps + ((cycle - 68) & mask)];
        assert(x10074 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10075 = args[2][213 * steps + ((cycle - 68) & mask)];
        assert(x10075 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10076 = x10045 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10077 = x10044 + x10076;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10078 = x10046 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10079 = x10077 + x10078;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10080 = x10047 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10081 = x10079 + x10080;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10082 = x10048 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10083 = x10081 + x10082;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10084 = x10049 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10085 = x10083 + x10084;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10086 = x10050 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10087 = x10085 + x10086;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10088 = x10051 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10089 = x10087 + x10088;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10090 = x10052 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10091 = x10089 + x10090;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10092 = x10053 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10093 = x10091 + x10092;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10094 = x10054 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10095 = x10093 + x10094;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10096 = x10055 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10097 = x10095 + x10096;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10098 = x10056 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10099 = x10097 + x10098;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10100 = x10057 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10101 = x10099 + x10100;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10102 = x10058 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10103 = x10101 + x10102;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10104 = x10059 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10105 = x10103 + x10104;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10106 = x10061 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10107 = x10060 + x10106;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10108 = x10062 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10109 = x10107 + x10108;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10110 = x10063 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10111 = x10109 + x10110;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10112 = x10064 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10113 = x10111 + x10112;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10114 = x10065 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10115 = x10113 + x10114;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10116 = x10066 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10117 = x10115 + x10116;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10118 = x10067 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10119 = x10117 + x10118;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10120 = x10068 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10121 = x10119 + x10120;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10122 = x10069 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10123 = x10121 + x10122;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10124 = x10070 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10125 = x10123 + x10124;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10126 = x10071 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10127 = x10125 + x10126;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10128 = x10072 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10129 = x10127 + x10128;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10130 = x10073 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10131 = x10129 + x10130;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10132 = x10074 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10133 = x10131 + x10132;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10134 = x10075 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10135 = x10133 + x10134;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10136 = x10013 + x10105;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10137 = x10043 + x10135;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10138 = Fp(x10136.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10138);
            reg = x10138;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10139 = Fp(x10136.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10140 = x10139 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10140);
            reg = x10140;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10141 = Fp(x10136.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10142 = x10141 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10142);
            reg = x10142;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10143 = Fp(x10136.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10144 = x10143 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10144);
            reg = x10144;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10145 = Fp(x10136.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10146 = x10145 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10146);
            reg = x10146;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10147 = Fp(x10136.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10148 = x10147 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10148);
            reg = x10148;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10149 = Fp(x10136.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10150 = x10149 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10150);
            reg = x10150;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10151 = Fp(x10136.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10152 = x10151 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10152);
            reg = x10152;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10153 = Fp(x10136.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10154 = x10153 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10154);
            reg = x10154;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10155 = Fp(x10136.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10156 = x10155 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10156);
            reg = x10156;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10157 = Fp(x10136.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10158 = x10157 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10158);
            reg = x10158;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10159 = Fp(x10136.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10160 = x10159 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10160);
            reg = x10160;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10161 = Fp(x10136.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10162 = x10161 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10162);
            reg = x10162;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10163 = Fp(x10136.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10164 = x10163 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10164);
            reg = x10164;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10165 = Fp(x10136.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10166 = x10165 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10166);
            reg = x10166;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10167 = Fp(x10136.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10168 = x10167 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10168);
            reg = x10168;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10169 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10169 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10170 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10170 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10171 = x10170 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10172 = x10169 + x10171;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10173 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10173 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10174 = x10173 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10175 = x10172 + x10174;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10176 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10176 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10177 = x10176 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10178 = x10175 + x10177;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10179 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10179 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10180 = x10179 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10181 = x10178 + x10180;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10182 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10182 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10183 = x10182 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10184 = x10181 + x10183;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10185 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10185 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10186 = x10185 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10187 = x10184 + x10186;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10188 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10188 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10189 = x10188 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10190 = x10187 + x10189;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10191 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10191 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10192 = x10191 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10193 = x10190 + x10192;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10194 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10194 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10195 = x10194 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10196 = x10193 + x10195;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10197 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10197 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10198 = x10197 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10199 = x10196 + x10198;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10200 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10200 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10201 = x10200 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10202 = x10199 + x10201;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10203 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10203 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10204 = x10203 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10205 = x10202 + x10204;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10206 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10206 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10207 = x10206 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10208 = x10205 + x10207;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10209 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10209 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10210 = x10209 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10211 = x10208 + x10210;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10212 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10212 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10213 = x10212 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10214 = x10211 + x10213;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10215 = x10136 - x10214;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10216 = x10215 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10217 = Fp(x10216.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10217);
            reg = x10217;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10218 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x10218 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10219 = x10216 - x10218;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10220 = x10219 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10221 = x93 - x10220;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10222 = x10220 * x10221;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10222 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10223 = x10137 + x10216;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10224 = Fp(x10223.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10224);
            reg = x10224;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10225 = Fp(x10223.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10226 = x10225 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10226);
            reg = x10226;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10227 = Fp(x10223.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10228 = x10227 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10228);
            reg = x10228;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10229 = Fp(x10223.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10230 = x10229 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10230);
            reg = x10230;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10231 = Fp(x10223.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10232 = x10231 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10232);
            reg = x10232;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10233 = Fp(x10223.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10234 = x10233 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10234);
            reg = x10234;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10235 = Fp(x10223.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10236 = x10235 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10236);
            reg = x10236;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10237 = Fp(x10223.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10238 = x10237 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10238);
            reg = x10238;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10239 = Fp(x10223.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10240 = x10239 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10240);
            reg = x10240;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10241 = Fp(x10223.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10242 = x10241 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10242);
            reg = x10242;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10243 = Fp(x10223.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10244 = x10243 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10244);
            reg = x10244;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10245 = Fp(x10223.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10246 = x10245 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10246);
            reg = x10246;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10247 = Fp(x10223.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10248 = x10247 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10248);
            reg = x10248;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10249 = Fp(x10223.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10250 = x10249 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10250);
            reg = x10250;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10251 = Fp(x10223.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10252 = x10251 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10252);
            reg = x10252;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10253 = Fp(x10223.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10254 = x10253 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10254);
            reg = x10254;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10255 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10255 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10256 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10256 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10257 = x10256 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10258 = x10255 + x10257;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10259 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10259 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10260 = x10259 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10261 = x10258 + x10260;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10262 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10262 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10263 = x10262 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10264 = x10261 + x10263;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10265 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10265 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10266 = x10265 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10267 = x10264 + x10266;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10268 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10268 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10269 = x10268 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10270 = x10267 + x10269;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10271 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10271 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10272 = x10271 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10273 = x10270 + x10272;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10274 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10274 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10275 = x10274 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10276 = x10273 + x10275;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10277 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10277 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10278 = x10277 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10279 = x10276 + x10278;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10280 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10280 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10281 = x10280 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10282 = x10279 + x10281;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10283 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10283 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10284 = x10283 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10285 = x10282 + x10284;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10286 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10286 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10287 = x10286 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10288 = x10285 + x10287;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10289 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10289 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10290 = x10289 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10291 = x10288 + x10290;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10292 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10292 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10293 = x10292 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10294 = x10291 + x10293;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10295 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x10295 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10296 = x10295 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10297 = x10294 + x10296;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10298 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x10298 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10299 = x10298 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10300 = x10297 + x10299;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10301 = x10223 - x10300;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10302 = x10301 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10303 = Fp(x10302.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10303);
            reg = x10303;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10304 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x10304 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10305 = x10302 - x10304;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10306 = x10305 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10307 = x93 - x10306;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10308 = x10306 * x10307;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10308 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10309 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x10309 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":399:17)
      auto x10310 = x93 - x10309;
      if (x8485 != 0) {
        if (x10309 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10311 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x10311 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":403:26)
          auto x10312 = x10311 + x8469;
          {
            host_args.at(0) = x10312;
            host_args.at(1) = x93;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10313 = host_outs.at(0);
            auto x10314 = host_outs.at(1);
            auto x10315 = host_outs.at(2);
            auto x10316 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10313);
              reg = x10313;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10314);
              reg = x10314;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10315);
              reg = x10315;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10316);
              reg = x10316;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10317 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x10317 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10318 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10318 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10319 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10319 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10320 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10320 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10312);
            reg = x10312;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8457);
            reg = x8457;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10317);
            reg = x10317;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10318);
            reg = x10318;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10319);
            reg = x10319;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10320);
            reg = x10320;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10321 = x10311 + x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10322 = x10321 + x8469;
          {
            host_args.at(0) = x10322;
            host_args.at(1) = x93;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10323 = host_outs.at(0);
            auto x10324 = host_outs.at(1);
            auto x10325 = host_outs.at(2);
            auto x10326 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10323);
              reg = x10323;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10324);
              reg = x10324;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10325);
              reg = x10325;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10326);
              reg = x10326;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10327 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10327 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10328 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10328 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10329 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10329 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10330 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10330 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10322);
            reg = x10322;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8457);
            reg = x8457;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10327);
            reg = x10327;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10328);
            reg = x10328;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10329);
            reg = x10329;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10330);
            reg = x10330;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x10331 = args[2][108 * steps + ((cycle - 0) & mask)];
          assert(x10331 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":405:39)
          auto x10332 = x10331 * x75;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10333 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x10333 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10334 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10334 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10335 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10335 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10336 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10336 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10337 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10337 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10338 = x10337 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10339 = x10333 + x10338;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10340 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10340 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10341 = x10340 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10342 = x10334 + x10341;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10343 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10343 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10344 = x10343 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10345 = x10335 + x10344;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10346 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10346 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10347 = x10346 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10348 = x10336 + x10347;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10349 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10349 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10350 = x10349 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10351 = x10339 + x10350;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10352 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10352 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10353 = x10352 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10354 = x10342 + x10353;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10355 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10355 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10356 = x10355 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10357 = x10345 + x10356;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10358 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10358 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10359 = x10358 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10360 = x10348 + x10359;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10361 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10361 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10362 = x10361 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10363 = x10351 + x10362;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10364 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10364 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10365 = x10364 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10366 = x10354 + x10365;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10367 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10367 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10368 = x10367 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10369 = x10357 + x10368;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10370 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10370 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10371 = x10370 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10372 = x10360 + x10371;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10373 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10373 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10374 = x10373 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10375 = x10363 + x10374;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10376 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10376 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10377 = x10376 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10378 = x10366 + x10377;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10379 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10379 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10380 = x10379 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10381 = x10369 + x10380;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10382 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10382 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10383 = x10382 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10384 = x10372 + x10383;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10385 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10385 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10386 = x10385 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10387 = x10375 + x10386;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10388 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10388 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10389 = x10388 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10390 = x10378 + x10389;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10391 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10391 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10392 = x10391 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10393 = x10381 + x10392;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10394 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10394 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10395 = x10394 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10396 = x10384 + x10395;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10397 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10397 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10398 = x10397 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10399 = x10387 + x10398;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10400 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10400 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10401 = x10400 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10402 = x10390 + x10401;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10403 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10403 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10404 = x10403 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10405 = x10393 + x10404;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10406 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10406 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10407 = x10406 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10408 = x10396 + x10407;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10409 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10409 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10410 = x10409 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10411 = x10399 + x10410;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10412 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10412 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10413 = x10412 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10414 = x10402 + x10413;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10415 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10415 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10416 = x10415 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10417 = x10405 + x10416;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10418 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10418 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10419 = x10418 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10420 = x10408 + x10419;
          host_args.at(0) = x10332;
          host_args.at(1) = x10317;
          host_args.at(2) = x10318;
          host_args.at(3) = x10319;
          host_args.at(4) = x10320;
          host_args.at(5) = x10420;
          host_args.at(6) = x10417;
          host_args.at(7) = x10414;
          host_args.at(8) = x10411;
          host(ctx, "log", "  io0: [0x%x] %w, a: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x10421 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x10421 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":406:39)
          auto x10422 = x10421 * x75;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10423 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10423 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10424 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10424 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10425 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10425 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10426 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10426 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10427 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10427 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10428 = x10427 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10429 = x10423 + x10428;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10430 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10430 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10431 = x10430 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10432 = x10424 + x10431;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10433 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10433 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10434 = x10433 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10435 = x10425 + x10434;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10436 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10436 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10437 = x10436 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10438 = x10426 + x10437;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10439 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10439 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10440 = x10439 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10441 = x10429 + x10440;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10442 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10442 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10443 = x10442 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10444 = x10432 + x10443;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10445 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10445 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10446 = x10445 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10447 = x10435 + x10446;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10448 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10448 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10449 = x10448 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10450 = x10438 + x10449;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10451 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10451 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10452 = x10451 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10453 = x10441 + x10452;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10454 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10454 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10455 = x10454 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10456 = x10444 + x10455;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10457 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10457 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10458 = x10457 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10459 = x10447 + x10458;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10460 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10460 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10461 = x10460 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10462 = x10450 + x10461;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10463 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10463 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10464 = x10463 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10465 = x10453 + x10464;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10466 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10466 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10467 = x10466 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10468 = x10456 + x10467;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10469 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10469 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10470 = x10469 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10471 = x10459 + x10470;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10472 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10472 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10473 = x10472 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10474 = x10462 + x10473;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10475 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10475 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10476 = x10475 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10477 = x10465 + x10476;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10478 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10478 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10479 = x10478 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10480 = x10468 + x10479;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10481 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10481 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10482 = x10481 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10483 = x10471 + x10482;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10484 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10484 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10485 = x10484 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10486 = x10474 + x10485;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10487 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10487 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10488 = x10487 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10489 = x10477 + x10488;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10490 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10490 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10491 = x10490 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10492 = x10480 + x10491;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10493 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10493 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10494 = x10493 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10495 = x10483 + x10494;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10496 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10496 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10497 = x10496 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10498 = x10486 + x10497;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10499 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10499 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10500 = x10499 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10501 = x10489 + x10500;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10502 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10502 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10503 = x10502 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10504 = x10492 + x10503;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10505 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10505 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10506 = x10505 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10507 = x10495 + x10506;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10508 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10508 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10509 = x10508 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10510 = x10498 + x10509;
          host_args.at(0) = x10422;
          host_args.at(1) = x10327;
          host_args.at(2) = x10328;
          host_args.at(3) = x10329;
          host_args.at(4) = x10330;
          host_args.at(5) = x10510;
          host_args.at(6) = x10507;
          host_args.at(7) = x10504;
          host_args.at(8) = x10501;
          host(ctx, "log", "  io1: [0x%x] %w, e: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("./cirgen/components/u32.h":25:12)
          auto x10511 = x10318 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10512 = x10317 + x10511;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10513 = x10319 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10514 = x10512 + x10513;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10515 = x10320 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10516 = x10514 + x10515;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10517 = x10417 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10518 = x10420 + x10517;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10519 = x10414 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10520 = x10518 + x10519;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10521 = x10411 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10522 = x10520 + x10521;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          auto x10523 = x10516 - x10522;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          if (x10523 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:407");
          // loc("./cirgen/components/u32.h":25:12)
          auto x10524 = x10328 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10525 = x10327 + x10524;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10526 = x10329 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10527 = x10525 + x10526;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10528 = x10330 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10529 = x10527 + x10528;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10530 = x10507 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10531 = x10510 + x10530;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10532 = x10504 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10533 = x10531 + x10532;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10534 = x10501 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10535 = x10533 + x10534;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          auto x10536 = x10529 - x10535;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          if (x10536 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:408");
        }
        if (x10310 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10537 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x10537 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":411:27)
          auto x10538 = x10537 + x8469;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10539 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x10539 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10540 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10540 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10541 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10541 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10542 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10542 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10543 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10543 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10544 = x10543 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10545 = x10539 + x10544;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10546 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10546 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10547 = x10546 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10548 = x10540 + x10547;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10549 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10549 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10550 = x10549 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10551 = x10541 + x10550;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10552 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10552 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10553 = x10552 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10554 = x10542 + x10553;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10555 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10555 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10556 = x10555 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10557 = x10545 + x10556;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10558 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10558 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10559 = x10558 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10560 = x10548 + x10559;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10561 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10561 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10562 = x10561 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10563 = x10551 + x10562;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10564 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10564 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10565 = x10564 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10566 = x10554 + x10565;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10567 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10567 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10568 = x10567 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10569 = x10557 + x10568;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10570 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10570 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10571 = x10570 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10572 = x10560 + x10571;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10573 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10573 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10574 = x10573 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10575 = x10563 + x10574;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10576 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10576 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10577 = x10576 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10578 = x10566 + x10577;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10579 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10579 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10580 = x10579 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10581 = x10569 + x10580;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10582 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10582 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10583 = x10582 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10584 = x10572 + x10583;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10585 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10585 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10586 = x10585 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10587 = x10575 + x10586;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10588 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10588 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10589 = x10588 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10590 = x10578 + x10589;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10591 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10591 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10592 = x10591 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10593 = x10581 + x10592;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10594 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10594 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10595 = x10594 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10596 = x10584 + x10595;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10597 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10597 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10598 = x10597 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10599 = x10587 + x10598;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10600 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10600 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10601 = x10600 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10602 = x10590 + x10601;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10603 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10603 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10604 = x10603 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10605 = x10593 + x10604;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10606 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10606 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10607 = x10606 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10608 = x10596 + x10607;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10609 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10609 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10610 = x10609 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10611 = x10599 + x10610;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10612 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10612 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10613 = x10612 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10614 = x10602 + x10613;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10615 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10615 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10616 = x10615 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10617 = x10605 + x10616;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10618 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10618 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10619 = x10618 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10620 = x10608 + x10619;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10621 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10621 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10622 = x10621 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10623 = x10611 + x10622;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10624 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10624 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10625 = x10624 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10626 = x10614 + x10625;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10626);
            reg = x10626;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10623);
            reg = x10623;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10620);
            reg = x10620;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10617);
            reg = x10617;
          }
          {
            host_args.at(0) = x10538;
            host_args.at(1) = x10626;
            host_args.at(2) = x10623;
            host_args.at(3) = x10620;
            host_args.at(4) = x10617;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10627 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x10627 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10628 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10628 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10629 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10629 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10630 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10630 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10538);
            reg = x10538;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8457);
            reg = x8457;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10627);
            reg = x10627;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10628);
            reg = x10628;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10629);
            reg = x10629;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10630);
            reg = x10630;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10631 = x10537 + x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10632 = x10631 + x8469;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10633 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10633 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10634 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10634 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10635 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10635 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10636 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10636 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10637 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10637 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10638 = x10637 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10639 = x10633 + x10638;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10640 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10640 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10641 = x10640 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10642 = x10634 + x10641;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10643 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10643 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10644 = x10643 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10645 = x10635 + x10644;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10646 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10646 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10647 = x10646 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10648 = x10636 + x10647;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10649 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10649 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10650 = x10649 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10651 = x10639 + x10650;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10652 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10652 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10653 = x10652 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10654 = x10642 + x10653;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10655 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10655 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10656 = x10655 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10657 = x10645 + x10656;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10658 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10658 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10659 = x10658 * x75;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10660 = x10648 + x10659;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10661 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10661 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10662 = x10661 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10663 = x10651 + x10662;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10664 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10664 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10665 = x10664 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10666 = x10654 + x10665;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10667 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10667 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10668 = x10667 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10669 = x10657 + x10668;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10670 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10670 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10671 = x10670 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10672 = x10660 + x10671;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10673 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10673 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10674 = x10673 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10675 = x10663 + x10674;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10676 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10676 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10677 = x10676 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10678 = x10666 + x10677;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10679 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10679 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10680 = x10679 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10681 = x10669 + x10680;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10682 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10682 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10683 = x10682 * x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10684 = x10672 + x10683;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10685 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10685 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10686 = x10685 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10687 = x10675 + x10686;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10688 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10688 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10689 = x10688 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10690 = x10678 + x10689;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10691 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10691 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10692 = x10691 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10693 = x10681 + x10692;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10694 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10694 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10695 = x10694 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10696 = x10684 + x10695;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10697 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10697 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10698 = x10697 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10699 = x10687 + x10698;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10700 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10700 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10701 = x10700 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10702 = x10690 + x10701;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10703 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10703 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10704 = x10703 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10705 = x10693 + x10704;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10706 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10706 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10707 = x10706 * x53;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10708 = x10696 + x10707;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10709 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10709 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10710 = x10709 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10711 = x10699 + x10710;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10712 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10712 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10713 = x10712 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10714 = x10702 + x10713;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10715 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10715 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10716 = x10715 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10717 = x10705 + x10716;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10718 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10718 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10719 = x10718 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10720 = x10708 + x10719;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10720);
            reg = x10720;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10717);
            reg = x10717;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10714);
            reg = x10714;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10711);
            reg = x10711;
          }
          {
            host_args.at(0) = x10632;
            host_args.at(1) = x10720;
            host_args.at(2) = x10717;
            host_args.at(3) = x10714;
            host_args.at(4) = x10711;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10721 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10721 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10722 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10722 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10723 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10723 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10724 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10724 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10632);
            reg = x10632;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8457);
            reg = x8457;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10721);
            reg = x10721;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10722);
            reg = x10722;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10723);
            reg = x10723;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10724);
            reg = x10724;
          }
        }
      }
      if (x8486 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        if (x8477 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10725 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x10725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10726 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x10726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10727 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x10727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10728 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x10728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10729 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x10729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10730 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x10730 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10731 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x10731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10732 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x10732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10733 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x10733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10734 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x10734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10735 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x10735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10736 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x10736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10737 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x10737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10738 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x10738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10739 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x10739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10740 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x10740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10741 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x10741 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10742 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x10742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10743 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x10743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10744 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x10744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10745 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x10745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10746 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x10746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10747 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x10747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10748 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x10748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10749 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x10749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10750 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x10750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10751 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x10751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10752 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x10752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10753 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x10753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10754 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x10754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10755 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x10755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10756 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x10756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10757 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x10757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10758 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x10758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10759 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x10759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10760 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x10760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10761 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x10761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10762 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x10762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10763 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x10763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10764 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x10764 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10765 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x10765 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10766 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x10766 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10767 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x10767 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10768 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x10768 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10769 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x10769 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10770 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x10770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10771 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x10771 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10772 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x10772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10773 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x10773 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10774 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x10774 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10775 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x10775 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10776 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x10776 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10777 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x10777 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10778 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x10778 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10779 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x10779 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10780 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x10780 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10781 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x10781 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10782 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x10782 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10783 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x10783 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10784 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x10784 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10785 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x10785 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10786 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x10786 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10787 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x10787 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10788 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x10788 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10789 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x10789 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10790 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x10790 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10791 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x10791 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10792 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x10792 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10793 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x10793 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10794 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x10794 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10795 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x10795 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10796 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x10796 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10797 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x10797 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10798 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x10798 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10799 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x10799 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10800 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x10800 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10801 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x10801 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10802 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x10802 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10803 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x10803 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10804 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x10804 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10805 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x10805 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10806 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x10806 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10807 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x10807 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10808 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x10808 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10809 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x10809 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10810 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x10810 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10811 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x10811 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10812 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x10812 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10813 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x10813 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10814 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x10814 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10815 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x10815 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10816 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x10816 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10817 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x10817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10818 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x10818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10819 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x10819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10820 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x10820 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10821 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x10821 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10822 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x10822 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10823 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x10823 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10824 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x10824 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10825 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x10825 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10826 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x10826 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10827 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x10827 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10828 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x10828 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10829 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x10829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10830 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x10830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10831 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x10831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10832 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x10832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10833 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x10833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10834 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x10834 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10835 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x10835 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10836 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x10836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10837 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x10837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10838 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x10838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10839 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x10839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10840 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x10840 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10841 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x10841 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10842 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x10842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10843 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x10843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10844 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x10844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10845 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x10845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10846 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x10846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10847 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x10847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10848 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x10848 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10849 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x10849 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10850 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x10850 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10851 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x10851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10852 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x10852 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10853 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x10853 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10854 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x10854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10855 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x10855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10856 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x10856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10857 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x10857 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10858 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x10858 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10859 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x10859 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10860 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x10860 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10861 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x10861 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10862 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x10862 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10863 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x10863 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10864 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x10864 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10865 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x10865 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10866 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x10866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10867 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x10867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10868 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x10868 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10869 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x10869 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10870 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x10870 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10871 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x10871 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10872 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x10872 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10873 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x10873 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10874 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x10874 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10875 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x10875 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10876 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x10876 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10877 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x10877 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10878 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x10878 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10879 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x10879 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10880 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x10880 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10881 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x10881 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10882 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x10882 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10883 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x10883 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10884 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x10884 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10885 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x10885 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10886 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x10886 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10887 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x10887 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10888 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x10888 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10889 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x10889 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10890 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x10890 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10891 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x10891 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10892 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x10892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10893 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x10893 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10894 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x10894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10895 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x10895 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10896 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x10896 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10897 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x10897 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10898 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x10898 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10899 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x10899 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10900 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x10900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10901 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x10901 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10902 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x10902 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10903 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x10903 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10904 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x10904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10905 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x10905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10906 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x10906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10907 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x10907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10908 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x10908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10909 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x10909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10910 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x10910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10911 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x10911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10912 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x10912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10913 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x10913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10914 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x10914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10915 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x10915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10916 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x10916 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10917 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x10917 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10918 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x10918 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10919 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x10919 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10920 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x10920 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10921 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x10921 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10922 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x10922 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10923 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x10923 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10924 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x10924 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10925 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x10925 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10926 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x10926 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10927 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x10927 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10928 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x10928 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10929 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x10929 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10930 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x10930 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10931 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x10931 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10932 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x10932 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10933 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x10933 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10934 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x10934 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10935 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x10935 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10936 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x10936 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10937 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x10937 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10938 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x10938 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10939 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x10939 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10940 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x10940 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10941 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x10941 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10942 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x10942 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10943 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x10943 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10944 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x10944 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10945 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x10945 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10946 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x10946 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10947 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x10947 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10948 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x10948 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10949 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x10949 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10950 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x10950 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10951 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x10951 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10952 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x10952 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10953 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x10953 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10954 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x10954 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10955 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x10955 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10956 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x10956 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10957 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x10957 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10958 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x10958 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10959 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x10959 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10960 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x10960 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10961 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x10961 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10962 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x10962 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10963 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x10963 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10964 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x10964 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10965 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x10965 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10966 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x10966 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10967 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x10967 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10968 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x10968 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10969 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x10969 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10970 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x10970 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10971 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x10971 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10972 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x10972 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10973 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x10973 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10974 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x10974 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10975 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x10975 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10976 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x10976 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10977 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x10977 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10978 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x10978 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10979 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x10979 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10980 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x10980 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10981 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x10981 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10982 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x10982 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10983 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x10983 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10984 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x10984 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10985 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x10985 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10986 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x10986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10987 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x10987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10988 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x10988 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10989 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x10989 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10990 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x10990 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10991 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x10991 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10992 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x10992 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10993 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x10993 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10994 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x10994 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10995 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x10995 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10996 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x10996 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10997 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x10997 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10998 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x10998 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10999 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x10999 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11000 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11000 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11001 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11001 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11002 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11002 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11003 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11003 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11004 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11004 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11005 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11005 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11006 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x11006 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11007 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x11007 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11008 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x11008 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11009 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x11009 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11010 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x11010 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11011 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x11011 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11012 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x11012 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11013 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x11013 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11014 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x11014 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11015 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x11015 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11016 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x11016 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x11017 = x11014 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x11018 = x11013 + x11017;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x11019 = x11016 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x11020 = x11015 + x11019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11021 = x10738 + x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11022 = x10738 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11023 = x11022 * x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11024 = x11021 - x11023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11025 = x10739 + x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11026 = x10739 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11027 = x11026 * x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11028 = x11025 - x11027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11029 = x10740 + x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11030 = x10740 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11031 = x11030 * x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11032 = x11029 - x11031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11033 = x10741 + x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11034 = x10741 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11035 = x11034 * x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11036 = x11033 - x11035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11037 = x10742 + x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11038 = x10742 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11039 = x11038 * x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11040 = x11037 - x11039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11041 = x10743 + x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11042 = x10743 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11043 = x11042 * x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11044 = x11041 - x11043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11045 = x10744 + x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11046 = x10744 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11047 = x11046 * x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11048 = x11045 - x11047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11049 = x10745 + x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11050 = x10745 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11051 = x11050 * x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11052 = x11049 - x11051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11053 = x10746 + x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11054 = x10746 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11055 = x11054 * x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11056 = x11053 - x11055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11057 = x10747 + x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11058 = x10747 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11059 = x11058 * x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11060 = x11057 - x11059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11061 = x10748 + x10725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11062 = x10748 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11063 = x11062 * x10725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11064 = x11061 - x11063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11065 = x10749 + x10726;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11066 = x10749 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11067 = x11066 * x10726;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11068 = x11065 - x11067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11069 = x10750 + x10727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11070 = x10750 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11071 = x11070 * x10727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11072 = x11069 - x11071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11073 = x10751 + x10728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11074 = x10751 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11075 = x11074 * x10728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11076 = x11073 - x11075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11077 = x10752 + x10729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11078 = x10752 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11079 = x11078 * x10729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11080 = x11077 - x11079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11081 = x10753 + x10730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11082 = x10753 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11083 = x11082 * x10730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11084 = x11081 - x11083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11085 = x10754 + x10731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11086 = x10754 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11087 = x11086 * x10731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11088 = x11085 - x11087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11089 = x10755 + x10732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11090 = x10755 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11091 = x11090 * x10732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11092 = x11089 - x11091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11093 = x10756 + x10733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11094 = x10756 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11095 = x11094 * x10733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11096 = x11093 - x11095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11097 = x10725 + x10734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11098 = x10725 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11099 = x11098 * x10734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11100 = x11097 - x11099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11101 = x10726 + x10735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11102 = x10726 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11103 = x11102 * x10735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11104 = x11101 - x11103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11105 = x10727 + x10736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11106 = x10727 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11107 = x11106 * x10736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11108 = x11105 - x11107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11109 = x10728 + x10737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11110 = x10728 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11111 = x11110 * x10737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11112 = x11109 - x11111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11113 = x10729 + x10738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11114 = x10729 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11115 = x11114 * x10738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11116 = x11113 - x11115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11117 = x10730 + x10739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11118 = x10730 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11119 = x11118 * x10739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11120 = x11117 - x11119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11121 = x10731 + x10740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11122 = x10731 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11123 = x11122 * x10740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11124 = x11121 - x11123;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11125 = x10732 + x10741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11126 = x10732 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11127 = x11126 * x10741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11128 = x11125 - x11127;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11129 = x10733 + x10742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11130 = x10733 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11131 = x11130 * x10742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11132 = x11129 - x11131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11133 = x10734 + x10743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11134 = x10734 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11135 = x11134 * x10743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11136 = x11133 - x11135;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11137 = x10735 + x10744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11138 = x10735 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11139 = x11138 * x10744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11140 = x11137 - x11139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11141 = x10736 + x10745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11142 = x10736 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11143 = x11142 * x10745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11144 = x11141 - x11143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11145 = x10737 + x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11146 = x10737 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11147 = x11146 * x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11148 = x11145 - x11147;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11149 = x10727 + x11024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11150 = x11106 * x11024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11151 = x11149 - x11150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11152 = x10728 + x11028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11153 = x11110 * x11028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11154 = x11152 - x11153;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11155 = x10729 + x11032;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11156 = x11114 * x11032;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11157 = x11155 - x11156;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11158 = x10730 + x11036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11159 = x11118 * x11036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11160 = x11158 - x11159;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11161 = x10731 + x11040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11162 = x11122 * x11040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11163 = x11161 - x11162;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11164 = x10732 + x11044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11165 = x11126 * x11044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11166 = x11164 - x11165;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11167 = x10733 + x11048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11168 = x11130 * x11048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11169 = x11167 - x11168;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11170 = x10734 + x11052;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11171 = x11134 * x11052;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11172 = x11170 - x11171;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11173 = x10735 + x11056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11174 = x11138 * x11056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11175 = x11173 - x11174;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11176 = x10736 + x11060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11177 = x11142 * x11060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11178 = x11176 - x11177;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11179 = x10737 + x11064;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11180 = x11146 * x11064;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11181 = x11179 - x11180;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11182 = x10738 + x11068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11183 = x11022 * x11068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11184 = x11182 - x11183;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11185 = x10739 + x11072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11186 = x11026 * x11072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11187 = x11185 - x11186;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11188 = x10740 + x11076;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11189 = x11030 * x11076;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11190 = x11188 - x11189;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11191 = x10741 + x11080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11192 = x11034 * x11080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11193 = x11191 - x11192;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11194 = x10742 + x11084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11195 = x11038 * x11084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11196 = x11194 - x11195;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11197 = x10743 + x11088;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11198 = x11042 * x11088;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11199 = x11197 - x11198;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11200 = x10744 + x11092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11201 = x11046 * x11092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11202 = x11200 - x11201;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11203 = x10745 + x11096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11204 = x11050 * x11096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11205 = x11203 - x11204;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11206 = x10746 + x11100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11207 = x11054 * x11100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11208 = x11206 - x11207;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11209 = x10747 + x11104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11210 = x11058 * x11104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11211 = x11209 - x11210;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11212 = x10748 + x11108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11213 = x11062 * x11108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11214 = x11212 - x11213;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11215 = x10749 + x11112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11216 = x11066 * x11112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11217 = x11215 - x11216;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11218 = x10750 + x11116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11219 = x11070 * x11116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11220 = x11218 - x11219;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11221 = x10751 + x11120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11222 = x11074 * x11120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11223 = x11221 - x11222;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11224 = x10752 + x11124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11225 = x11078 * x11124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11226 = x11224 - x11225;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11227 = x10753 + x11128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11228 = x11082 * x11128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11229 = x11227 - x11228;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11230 = x10754 + x11132;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11231 = x11086 * x11132;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11232 = x11230 - x11231;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11233 = x10755 + x11136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11234 = x11090 * x11136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11235 = x11233 - x11234;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11236 = x10756 + x11140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11237 = x11094 * x11140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11238 = x11236 - x11237;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11239 = x10725 + x11144;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11240 = x11098 * x11144;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11241 = x11239 - x11240;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11242 = x10726 + x11148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11243 = x11102 * x11148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11244 = x11242 - x11243;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11245 = x10864 + x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11246 = x10864 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11247 = x11246 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11248 = x11245 - x11247;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11249 = x10865 + x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11250 = x10865 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11251 = x11250 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11252 = x11249 - x11251;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11253 = x10866 + x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11254 = x10866 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11255 = x11254 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11256 = x11253 - x11255;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11257 = x10867 + x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11258 = x10867 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11259 = x11258 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11260 = x11257 - x11259;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11261 = x10868 + x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11262 = x10868 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11263 = x11262 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11264 = x11261 - x11263;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11265 = x10869 + x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11266 = x10869 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11267 = x11266 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11268 = x11265 - x11267;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11269 = x10870 + x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11270 = x10870 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11271 = x11270 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11272 = x11269 - x11271;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11273 = x10871 + x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11274 = x10871 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11275 = x11274 * x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11276 = x11273 - x11275;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11277 = x10872 + x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11278 = x10872 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11279 = x11278 * x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11280 = x11277 - x11279;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11281 = x10873 + x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11282 = x10873 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11283 = x11282 * x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11284 = x11281 - x11283;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11285 = x10874 + x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11286 = x10874 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11287 = x11286 * x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11288 = x11285 - x11287;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11289 = x10875 + x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11290 = x10875 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11291 = x11290 * x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11292 = x11289 - x11291;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11293 = x10876 + x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11294 = x10876 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11295 = x11294 * x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11296 = x11293 - x11295;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11297 = x10877 + x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11298 = x10877 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11299 = x11298 * x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11300 = x11297 - x11299;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11301 = x10878 + x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11302 = x10878 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11303 = x11302 * x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11304 = x11301 - x11303;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11305 = x10879 + x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11306 = x10879 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11307 = x11306 * x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11308 = x11305 - x11307;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11309 = x10880 + x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11310 = x10880 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11311 = x11310 * x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11312 = x11309 - x11311;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11313 = x10881 + x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11314 = x10881 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11315 = x11314 * x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11316 = x11313 - x11315;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11317 = x10882 + x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11318 = x10882 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11319 = x11318 * x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11320 = x11317 - x11319;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11321 = x10883 + x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11322 = x10883 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11323 = x11322 * x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11324 = x11321 - x11323;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11325 = x10884 + x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11326 = x10884 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11327 = x11326 * x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11328 = x11325 - x11327;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11329 = x10853 + x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11330 = x10853 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11331 = x11330 * x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11332 = x11329 - x11331;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11333 = x10854 + x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11334 = x10854 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11335 = x11334 * x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11336 = x11333 - x11335;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11337 = x10855 + x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11338 = x10855 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11339 = x11338 * x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11340 = x11337 - x11339;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11341 = x10856 + x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11342 = x10856 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11343 = x11342 * x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11344 = x11341 - x11343;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11345 = x10857 + x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11346 = x10857 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11347 = x11346 * x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11348 = x11345 - x11347;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11349 = x10858 + x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11350 = x10858 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11351 = x11350 * x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11352 = x11349 - x11351;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11353 = x10859 + x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11354 = x10859 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11355 = x11354 * x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11356 = x11353 - x11355;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11357 = x10860 + x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11358 = x10860 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11359 = x11358 * x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11360 = x11357 - x11359;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11361 = x10861 + x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11362 = x10861 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11363 = x11362 * x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11364 = x11361 - x11363;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11365 = x10862 + x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11366 = x10862 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11367 = x11366 * x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11368 = x11365 - x11367;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11369 = x10863 + x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11370 = x10863 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11371 = x11370 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11372 = x11369 - x11371;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11373 = x10859 + x11248;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11374 = x11354 * x11248;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11375 = x11373 - x11374;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11376 = x10860 + x11252;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11377 = x11358 * x11252;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11378 = x11376 - x11377;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11379 = x10861 + x11256;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11380 = x11362 * x11256;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11381 = x11379 - x11380;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11382 = x10862 + x11260;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11383 = x11366 * x11260;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11384 = x11382 - x11383;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11385 = x10863 + x11264;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11386 = x11370 * x11264;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11387 = x11385 - x11386;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11388 = x10864 + x11268;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11389 = x11246 * x11268;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11390 = x11388 - x11389;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11391 = x10865 + x11272;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11392 = x11250 * x11272;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11393 = x11391 - x11392;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11394 = x10866 + x11276;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11395 = x11254 * x11276;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11396 = x11394 - x11395;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11397 = x10867 + x11280;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11398 = x11258 * x11280;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11399 = x11397 - x11398;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11400 = x10868 + x11284;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11401 = x11262 * x11284;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11402 = x11400 - x11401;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11403 = x10869 + x11288;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11404 = x11266 * x11288;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11405 = x11403 - x11404;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11406 = x10870 + x11292;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11407 = x11270 * x11292;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11408 = x11406 - x11407;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11409 = x10871 + x11296;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11410 = x11274 * x11296;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11411 = x11409 - x11410;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11412 = x10872 + x11300;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11413 = x11278 * x11300;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11414 = x11412 - x11413;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11415 = x10873 + x11304;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11416 = x11282 * x11304;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11417 = x11415 - x11416;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11418 = x10874 + x11308;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11419 = x11286 * x11308;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11420 = x11418 - x11419;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11421 = x10875 + x11312;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11422 = x11290 * x11312;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11423 = x11421 - x11422;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11424 = x10876 + x11316;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11425 = x11294 * x11316;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11426 = x11424 - x11425;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11427 = x10877 + x11320;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11428 = x11298 * x11320;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11429 = x11427 - x11428;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11430 = x10878 + x11324;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11431 = x11302 * x11324;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11432 = x11430 - x11431;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11433 = x10879 + x11328;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11434 = x11306 * x11328;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11435 = x11433 - x11434;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11436 = x10880 + x11332;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11437 = x11310 * x11332;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11438 = x11436 - x11437;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11439 = x10881 + x11336;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11440 = x11314 * x11336;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11441 = x11439 - x11440;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11442 = x10882 + x11340;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11443 = x11318 * x11340;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11444 = x11442 - x11443;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11445 = x10883 + x11344;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11446 = x11322 * x11344;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11447 = x11445 - x11446;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11448 = x10884 + x11348;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11449 = x11326 * x11348;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11450 = x11448 - x11449;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11451 = x10853 + x11352;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11452 = x11330 * x11352;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11453 = x11451 - x11452;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11454 = x10854 + x11356;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11455 = x11334 * x11356;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11456 = x11454 - x11455;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11457 = x10855 + x11360;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11458 = x11338 * x11360;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11459 = x11457 - x11458;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11460 = x10856 + x11364;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11461 = x11342 * x11364;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11462 = x11460 - x11461;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11463 = x10857 + x11368;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11464 = x11346 * x11368;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11465 = x11463 - x11464;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11466 = x10858 + x11372;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11467 = x11350 * x11372;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11468 = x11466 - x11467;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11469 = x10982 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11470 = x10981 + x11469;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11471 = x10983 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11472 = x11470 + x11471;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11473 = x10984 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11474 = x11472 + x11473;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11475 = x10985 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11476 = x11474 + x11475;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11477 = x10986 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11478 = x11476 + x11477;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11479 = x10987 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11480 = x11478 + x11479;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11481 = x10988 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11482 = x11480 + x11481;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11483 = x10989 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11484 = x11482 + x11483;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11485 = x10990 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11486 = x11484 + x11485;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11487 = x10991 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11488 = x11486 + x11487;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11489 = x10992 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11490 = x11488 + x11489;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11491 = x10993 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11492 = x11490 + x11491;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11493 = x10994 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11494 = x11492 + x11493;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11495 = x10995 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11496 = x11494 + x11495;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11497 = x10996 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11498 = x11496 + x11497;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11499 = x10998 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11500 = x10997 + x11499;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11501 = x10999 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11502 = x11500 + x11501;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11503 = x11000 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11504 = x11502 + x11503;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11505 = x11001 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11506 = x11504 + x11505;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11507 = x11002 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11508 = x11506 + x11507;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11509 = x11003 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11510 = x11508 + x11509;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11511 = x11004 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11512 = x11510 + x11511;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11513 = x11005 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11514 = x11512 + x11513;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11515 = x11006 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11516 = x11514 + x11515;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11517 = x11007 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11518 = x11516 + x11517;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11519 = x11008 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11520 = x11518 + x11519;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11521 = x11009 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11522 = x11520 + x11521;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11523 = x11010 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11524 = x11522 + x11523;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11525 = x11011 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11526 = x11524 + x11525;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11527 = x11012 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11528 = x11526 + x11527;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11529 = x10950 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11530 = x10949 + x11529;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11531 = x10951 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11532 = x11530 + x11531;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11533 = x10952 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11534 = x11532 + x11533;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11535 = x10953 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11536 = x11534 + x11535;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11537 = x10954 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11538 = x11536 + x11537;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11539 = x10955 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11540 = x11538 + x11539;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11541 = x10956 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11542 = x11540 + x11541;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11543 = x10957 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11544 = x11542 + x11543;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11545 = x10958 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11546 = x11544 + x11545;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11547 = x10959 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11548 = x11546 + x11547;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11549 = x10960 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11550 = x11548 + x11549;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11551 = x10961 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11552 = x11550 + x11551;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11553 = x10962 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11554 = x11552 + x11553;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11555 = x10963 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11556 = x11554 + x11555;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11557 = x10964 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11558 = x11556 + x11557;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11559 = x10966 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11560 = x10965 + x11559;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11561 = x10967 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11562 = x11560 + x11561;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11563 = x10968 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11564 = x11562 + x11563;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11565 = x10969 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11566 = x11564 + x11565;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11567 = x10970 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11568 = x11566 + x11567;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11569 = x10971 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11570 = x11568 + x11569;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11571 = x10972 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11572 = x11570 + x11571;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11573 = x10973 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11574 = x11572 + x11573;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11575 = x10974 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11576 = x11574 + x11575;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11577 = x10975 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11578 = x11576 + x11577;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11579 = x10976 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11580 = x11578 + x11579;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11581 = x10977 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11582 = x11580 + x11581;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11583 = x10978 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11584 = x11582 + x11583;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11585 = x10979 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11586 = x11584 + x11585;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11587 = x10980 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11588 = x11586 + x11587;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11589 = x10853 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11590 = x93 - x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11591 = x11590 * x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11592 = x11589 + x11591;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11593 = x10854 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11594 = x93 - x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11595 = x11594 * x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11596 = x11593 + x11595;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11597 = x10855 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11598 = x93 - x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11599 = x11598 * x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11600 = x11597 + x11599;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11601 = x10856 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11602 = x93 - x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11603 = x11602 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11604 = x11601 + x11603;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11605 = x10857 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11606 = x93 - x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11607 = x11606 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11608 = x11605 + x11607;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11609 = x10858 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11610 = x93 - x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11611 = x11610 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11612 = x11609 + x11611;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11613 = x10859 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11614 = x93 - x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11615 = x11614 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11616 = x11613 + x11615;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11617 = x10860 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11618 = x93 - x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11619 = x11618 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11620 = x11617 + x11619;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11621 = x10861 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11622 = x93 - x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11623 = x11622 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11624 = x11621 + x11623;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11625 = x10862 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11626 = x93 - x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11627 = x11626 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11628 = x11625 + x11627;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11629 = x10863 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11630 = x93 - x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11631 = x11630 * x10927;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11632 = x11629 + x11631;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11633 = x10864 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11634 = x93 - x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11635 = x11634 * x10928;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11636 = x11633 + x11635;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11637 = x10865 * x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11638 = x93 - x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11639 = x11638 * x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11640 = x11637 + x11639;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11641 = x10866 * x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11642 = x93 - x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11643 = x11642 * x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11644 = x11641 + x11643;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11645 = x10867 * x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11646 = x93 - x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11647 = x11646 * x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11648 = x11645 + x11647;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11649 = x10868 * x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11650 = x93 - x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11651 = x11650 * x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11652 = x11649 + x11651;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11653 = x10869 * x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11654 = x93 - x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11655 = x11654 * x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11656 = x11653 + x11655;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11657 = x10870 * x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11658 = x93 - x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11659 = x11658 * x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11660 = x11657 + x11659;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11661 = x10871 * x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11662 = x93 - x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11663 = x11662 * x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11664 = x11661 + x11663;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11665 = x10872 * x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11666 = x93 - x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11667 = x11666 * x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11668 = x11665 + x11667;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11669 = x10873 * x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11670 = x93 - x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11671 = x11670 * x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11672 = x11669 + x11671;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11673 = x10874 * x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11674 = x93 - x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11675 = x11674 * x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11676 = x11673 + x11675;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11677 = x10875 * x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11678 = x93 - x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11679 = x11678 * x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11680 = x11677 + x11679;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11681 = x10876 * x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11682 = x93 - x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11683 = x11682 * x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11684 = x11681 + x11683;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11685 = x10877 * x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11686 = x93 - x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11687 = x11686 * x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11688 = x11685 + x11687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11689 = x10878 * x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11690 = x93 - x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11691 = x11690 * x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11692 = x11689 + x11691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11693 = x10879 * x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11694 = x93 - x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11695 = x11694 * x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11696 = x11693 + x11695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11697 = x10880 * x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11698 = x93 - x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11699 = x11698 * x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11700 = x11697 + x11699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11701 = x10881 * x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11702 = x93 - x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11703 = x11702 * x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11704 = x11701 + x11703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11705 = x10882 * x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11706 = x93 - x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11707 = x11706 * x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11708 = x11705 + x11707;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11709 = x10883 * x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11710 = x93 - x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11711 = x11710 * x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11712 = x11709 + x11711;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11713 = x10884 * x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11714 = x93 - x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11715 = x11714 * x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11716 = x11713 + x11715;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11717 = x11596 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11718 = x11592 + x11717;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11719 = x11600 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11720 = x11718 + x11719;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11721 = x11604 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11722 = x11720 + x11721;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11723 = x11608 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11724 = x11722 + x11723;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11725 = x11612 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11726 = x11724 + x11725;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11727 = x11616 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11728 = x11726 + x11727;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11729 = x11620 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11730 = x11728 + x11729;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11731 = x11624 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11732 = x11730 + x11731;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11733 = x11628 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11734 = x11732 + x11733;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11735 = x11632 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11736 = x11734 + x11735;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11737 = x11636 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11738 = x11736 + x11737;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11739 = x11640 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11740 = x11738 + x11739;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11741 = x11644 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11742 = x11740 + x11741;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11743 = x11648 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11744 = x11742 + x11743;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11745 = x11652 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11746 = x11744 + x11745;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11747 = x11660 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11748 = x11656 + x11747;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11749 = x11664 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11750 = x11748 + x11749;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11751 = x11668 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11752 = x11750 + x11751;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11753 = x11672 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11754 = x11752 + x11753;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11755 = x11676 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11756 = x11754 + x11755;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11757 = x11680 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11758 = x11756 + x11757;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11759 = x11684 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11760 = x11758 + x11759;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11761 = x11688 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11762 = x11760 + x11761;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11763 = x11692 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11764 = x11762 + x11763;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11765 = x11696 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11766 = x11764 + x11765;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11767 = x11700 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11768 = x11766 + x11767;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11769 = x11704 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11770 = x11768 + x11769;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11771 = x11708 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11772 = x11770 + x11771;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11773 = x11712 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11774 = x11772 + x11773;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11775 = x11716 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11776 = x11774 + x11775;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11777 = x11378 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11778 = x11375 + x11777;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11779 = x11381 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11780 = x11778 + x11779;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11781 = x11384 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11782 = x11780 + x11781;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11783 = x11387 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11784 = x11782 + x11783;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11785 = x11390 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11786 = x11784 + x11785;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11787 = x11393 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11788 = x11786 + x11787;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11789 = x11396 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11790 = x11788 + x11789;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11791 = x11399 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11792 = x11790 + x11791;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11793 = x11402 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11794 = x11792 + x11793;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11795 = x11405 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11796 = x11794 + x11795;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11797 = x11408 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11798 = x11796 + x11797;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11799 = x11411 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11800 = x11798 + x11799;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11801 = x11414 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11802 = x11800 + x11801;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11803 = x11417 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11804 = x11802 + x11803;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11805 = x11420 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11806 = x11804 + x11805;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11807 = x11426 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11808 = x11423 + x11807;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11809 = x11429 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11810 = x11808 + x11809;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11811 = x11432 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11812 = x11810 + x11811;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11813 = x11435 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11814 = x11812 + x11813;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11815 = x11438 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11816 = x11814 + x11815;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11817 = x11441 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11818 = x11816 + x11817;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11819 = x11444 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11820 = x11818 + x11819;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11821 = x11447 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11822 = x11820 + x11821;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11823 = x11450 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11824 = x11822 + x11823;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11825 = x11453 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11826 = x11824 + x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11827 = x11456 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11828 = x11826 + x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11829 = x11459 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11830 = x11828 + x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11831 = x11462 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11832 = x11830 + x11831;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11833 = x11465 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11834 = x11832 + x11833;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11835 = x11468 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11836 = x11834 + x11835;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11837 = x11746 + x11806;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11838 = x11776 + x11836;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11839 = x11558 + x11837;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11840 = x11588 + x11838;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11841 = x11018 + x11839;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11842 = x11020 + x11840;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11843 = x11498 + x11841;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11844 = x11528 + x11842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11845 = x10725 * x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11846 = x93 - x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11847 = x11845 * x11846;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11848 = x93 - x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11849 = x10725 * x11848;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11850 = x11849 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11851 = x11847 + x11850;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11852 = x93 - x10725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11853 = x11852 * x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11854 = x11853 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11855 = x11851 + x11854;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11856 = x11845 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11857 = x11855 + x11856;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11858 = x10726 * x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11859 = x93 - x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11860 = x11858 * x11859;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11861 = x93 - x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11862 = x10726 * x11861;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11863 = x11862 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11864 = x11860 + x11863;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11865 = x93 - x10726;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11866 = x11865 * x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11867 = x11866 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11868 = x11864 + x11867;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11869 = x11858 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11870 = x11868 + x11869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11871 = x10727 * x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11872 = x93 - x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11873 = x11871 * x11872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11874 = x93 - x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11875 = x10727 * x11874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11876 = x11875 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11877 = x11873 + x11876;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11878 = x93 - x10727;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11879 = x11878 * x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11880 = x11879 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11881 = x11877 + x11880;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11882 = x11871 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11883 = x11881 + x11882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11884 = x10728 * x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11885 = x93 - x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11886 = x11884 * x11885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11887 = x93 - x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11888 = x10728 * x11887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11889 = x11888 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11890 = x11886 + x11889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11891 = x93 - x10728;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11892 = x11891 * x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11893 = x11892 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11894 = x11890 + x11893;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11895 = x11884 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11896 = x11894 + x11895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11897 = x10729 * x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11898 = x93 - x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11899 = x11897 * x11898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11900 = x93 - x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11901 = x10729 * x11900;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11902 = x11901 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11903 = x11899 + x11902;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11904 = x93 - x10729;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11905 = x11904 * x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11906 = x11905 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11907 = x11903 + x11906;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11908 = x11897 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11909 = x11907 + x11908;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11910 = x10730 * x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11911 = x93 - x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11912 = x11910 * x11911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11913 = x93 - x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11914 = x10730 * x11913;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11915 = x11914 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11916 = x11912 + x11915;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11917 = x93 - x10730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11918 = x11917 * x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11919 = x11918 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11920 = x11916 + x11919;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11921 = x11910 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11922 = x11920 + x11921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11923 = x10731 * x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11924 = x93 - x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11925 = x11923 * x11924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11926 = x93 - x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11927 = x10731 * x11926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11928 = x11927 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11929 = x11925 + x11928;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11930 = x93 - x10731;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11931 = x11930 * x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11932 = x11931 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11933 = x11929 + x11932;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11934 = x11923 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11935 = x11933 + x11934;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11936 = x10732 * x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11937 = x93 - x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11938 = x11936 * x11937;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11939 = x93 - x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11940 = x10732 * x11939;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11941 = x11940 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11942 = x11938 + x11941;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11943 = x93 - x10732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11944 = x11943 * x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11945 = x11944 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11946 = x11942 + x11945;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11947 = x11936 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11948 = x11946 + x11947;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11949 = x10733 * x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11950 = x93 - x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11951 = x11949 * x11950;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11952 = x93 - x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11953 = x10733 * x11952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11954 = x11953 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11955 = x11951 + x11954;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11956 = x93 - x10733;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11957 = x11956 * x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11958 = x11957 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11959 = x11955 + x11958;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11960 = x11949 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11961 = x11959 + x11960;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11962 = x10734 * x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11963 = x93 - x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11964 = x11962 * x11963;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11965 = x93 - x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11966 = x10734 * x11965;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11967 = x11966 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11968 = x11964 + x11967;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11969 = x93 - x10734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11970 = x11969 * x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11971 = x11970 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11972 = x11968 + x11971;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11973 = x11962 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11974 = x11972 + x11973;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11975 = x10735 * x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11976 = x93 - x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11977 = x11975 * x11976;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11978 = x93 - x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11979 = x10735 * x11978;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11980 = x11979 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11981 = x11977 + x11980;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11982 = x93 - x10735;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11983 = x11982 * x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11984 = x11983 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11985 = x11981 + x11984;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11986 = x11975 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11987 = x11985 + x11986;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11988 = x10736 * x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11989 = x93 - x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11990 = x11988 * x11989;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11991 = x93 - x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11992 = x10736 * x11991;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11993 = x11992 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11994 = x11990 + x11993;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11995 = x93 - x10736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11996 = x11995 * x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11997 = x11996 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11998 = x11994 + x11997;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11999 = x11988 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12000 = x11998 + x11999;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12001 = x10737 * x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12002 = x93 - x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12003 = x12001 * x12002;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12004 = x93 - x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12005 = x10737 * x12004;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12006 = x12005 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12007 = x12003 + x12006;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12008 = x93 - x10737;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12009 = x12008 * x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12010 = x12009 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12011 = x12007 + x12010;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12012 = x12001 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12013 = x12011 + x12012;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12014 = x10738 * x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12015 = x93 - x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12016 = x12014 * x12015;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12017 = x93 - x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12018 = x10738 * x12017;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12019 = x12018 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12020 = x12016 + x12019;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12021 = x93 - x10738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12022 = x12021 * x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12023 = x12022 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12024 = x12020 + x12023;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12025 = x12014 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12026 = x12024 + x12025;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12027 = x10739 * x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12028 = x93 - x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12029 = x12027 * x12028;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12030 = x93 - x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12031 = x10739 * x12030;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12032 = x12031 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12033 = x12029 + x12032;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12034 = x93 - x10739;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12035 = x12034 * x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12036 = x12035 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12037 = x12033 + x12036;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12038 = x12027 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12039 = x12037 + x12038;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12040 = x10740 * x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12041 = x93 - x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12042 = x12040 * x12041;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12043 = x93 - x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12044 = x10740 * x12043;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12045 = x12044 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12046 = x12042 + x12045;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12047 = x93 - x10740;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12048 = x12047 * x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12049 = x12048 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12050 = x12046 + x12049;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12051 = x12040 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12052 = x12050 + x12051;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12053 = x10741 * x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12054 = x93 - x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12055 = x12053 * x12054;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12056 = x93 - x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12057 = x10741 * x12056;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12058 = x12057 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12059 = x12055 + x12058;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12060 = x93 - x10741;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12061 = x12060 * x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12062 = x12061 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12063 = x12059 + x12062;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12064 = x12053 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12065 = x12063 + x12064;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12066 = x10742 * x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12067 = x93 - x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12068 = x12066 * x12067;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12069 = x93 - x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12070 = x10742 * x12069;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12071 = x12070 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12072 = x12068 + x12071;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12073 = x93 - x10742;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12074 = x12073 * x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12075 = x12074 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12076 = x12072 + x12075;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12077 = x12066 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12078 = x12076 + x12077;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12079 = x10743 * x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12080 = x93 - x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12081 = x12079 * x12080;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12082 = x93 - x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12083 = x10743 * x12082;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12084 = x12083 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12085 = x12081 + x12084;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12086 = x93 - x10743;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12087 = x12086 * x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12088 = x12087 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12089 = x12085 + x12088;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12090 = x12079 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12091 = x12089 + x12090;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12092 = x10744 * x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12093 = x93 - x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12094 = x12092 * x12093;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12095 = x93 - x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12096 = x10744 * x12095;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12097 = x12096 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12098 = x12094 + x12097;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12099 = x93 - x10744;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12100 = x12099 * x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12101 = x12100 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12102 = x12098 + x12101;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12103 = x12092 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12104 = x12102 + x12103;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12105 = x10745 * x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12106 = x93 - x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12107 = x12105 * x12106;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12108 = x93 - x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12109 = x10745 * x12108;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12110 = x12109 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12111 = x12107 + x12110;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12112 = x93 - x10745;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12113 = x12112 * x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12114 = x12113 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12115 = x12111 + x12114;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12116 = x12105 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12117 = x12115 + x12116;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12118 = x10746 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12119 = x93 - x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12120 = x12118 * x12119;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12121 = x93 - x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12122 = x10746 * x12121;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12123 = x12122 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12124 = x12120 + x12123;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12125 = x93 - x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12126 = x12125 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12127 = x12126 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12128 = x12124 + x12127;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12129 = x12118 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12130 = x12128 + x12129;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12131 = x10747 * x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12132 = x93 - x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12133 = x12131 * x12132;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12134 = x93 - x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12135 = x10747 * x12134;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12136 = x12135 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12137 = x12133 + x12136;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12138 = x93 - x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12139 = x12138 * x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12140 = x12139 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12141 = x12137 + x12140;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12142 = x12131 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12143 = x12141 + x12142;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12144 = x10748 * x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12145 = x93 - x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12146 = x12144 * x12145;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12147 = x93 - x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12148 = x10748 * x12147;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12149 = x12148 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12150 = x12146 + x12149;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12151 = x93 - x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12152 = x12151 * x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12153 = x12152 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12154 = x12150 + x12153;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12155 = x12144 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12156 = x12154 + x12155;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12157 = x10749 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12158 = x93 - x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12159 = x12157 * x12158;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12160 = x93 - x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12161 = x10749 * x12160;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12162 = x12161 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12163 = x12159 + x12162;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12164 = x93 - x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12165 = x12164 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12166 = x12165 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12167 = x12163 + x12166;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12168 = x12157 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12169 = x12167 + x12168;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12170 = x10750 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12171 = x93 - x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12172 = x12170 * x12171;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12173 = x93 - x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12174 = x10750 * x12173;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12175 = x12174 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12176 = x12172 + x12175;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12177 = x93 - x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12178 = x12177 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12179 = x12178 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12180 = x12176 + x12179;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12181 = x12170 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12182 = x12180 + x12181;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12183 = x10751 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12184 = x93 - x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12185 = x12183 * x12184;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12186 = x93 - x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12187 = x10751 * x12186;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12188 = x12187 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12189 = x12185 + x12188;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12190 = x93 - x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12191 = x12190 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12192 = x12191 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12193 = x12189 + x12192;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12194 = x12183 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12195 = x12193 + x12194;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12196 = x10752 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12197 = x93 - x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12198 = x12196 * x12197;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12199 = x93 - x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12200 = x10752 * x12199;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12201 = x12200 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12202 = x12198 + x12201;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12203 = x93 - x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12204 = x12203 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12205 = x12204 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12206 = x12202 + x12205;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12207 = x12196 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12208 = x12206 + x12207;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12209 = x10753 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12210 = x93 - x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12211 = x12209 * x12210;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12212 = x93 - x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12213 = x10753 * x12212;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12214 = x12213 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12215 = x12211 + x12214;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12216 = x93 - x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12217 = x12216 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12218 = x12217 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12219 = x12215 + x12218;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12220 = x12209 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12221 = x12219 + x12220;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12222 = x10754 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12223 = x93 - x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12224 = x12222 * x12223;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12225 = x93 - x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12226 = x10754 * x12225;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12227 = x12226 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12228 = x12224 + x12227;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12229 = x93 - x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12230 = x12229 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12231 = x12230 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12232 = x12228 + x12231;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12233 = x12222 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12234 = x12232 + x12233;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12235 = x10755 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12236 = x93 - x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12237 = x12235 * x12236;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12238 = x93 - x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12239 = x10755 * x12238;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12240 = x12239 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12241 = x12237 + x12240;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12242 = x93 - x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12243 = x12242 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12244 = x12243 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12245 = x12241 + x12244;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12246 = x12235 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12247 = x12245 + x12246;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12248 = x10756 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12249 = x93 - x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12250 = x12248 * x12249;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12251 = x93 - x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12252 = x10756 * x12251;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12253 = x12252 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12254 = x12250 + x12253;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12255 = x93 - x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12256 = x12255 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12257 = x12256 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12258 = x12254 + x12257;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12259 = x12248 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12260 = x12258 + x12259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12261 = x11870 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12262 = x11857 + x12261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12263 = x11883 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12264 = x12262 + x12263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12265 = x11896 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12266 = x12264 + x12265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12267 = x11909 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12268 = x12266 + x12267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12269 = x11922 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12270 = x12268 + x12269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12271 = x11935 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12272 = x12270 + x12271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12273 = x11948 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12274 = x12272 + x12273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12275 = x11961 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12276 = x12274 + x12275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12277 = x11974 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12278 = x12276 + x12277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12279 = x11987 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12280 = x12278 + x12279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12281 = x12000 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12282 = x12280 + x12281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12283 = x12013 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12284 = x12282 + x12283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12285 = x12026 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12286 = x12284 + x12285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12287 = x12039 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12288 = x12286 + x12287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12289 = x12052 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12290 = x12288 + x12289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12291 = x12078 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12292 = x12065 + x12291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12293 = x12091 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12294 = x12292 + x12293;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12295 = x12104 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12296 = x12294 + x12295;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12297 = x12117 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12298 = x12296 + x12297;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12299 = x12130 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12300 = x12298 + x12299;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12301 = x12143 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12302 = x12300 + x12301;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12303 = x12156 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12304 = x12302 + x12303;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12305 = x12169 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12306 = x12304 + x12305;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12307 = x12182 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12308 = x12306 + x12307;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12309 = x12195 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12310 = x12308 + x12309;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12311 = x12208 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12312 = x12310 + x12311;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12313 = x12221 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12314 = x12312 + x12313;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12315 = x12234 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12316 = x12314 + x12315;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12317 = x12247 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12318 = x12316 + x12317;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12319 = x12260 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12320 = x12318 + x12319;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12321 = x11154 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12322 = x11151 + x12321;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12323 = x11157 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12324 = x12322 + x12323;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12325 = x11160 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12326 = x12324 + x12325;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12327 = x11163 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12328 = x12326 + x12327;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12329 = x11166 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12330 = x12328 + x12329;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12331 = x11169 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12332 = x12330 + x12331;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12333 = x11172 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12334 = x12332 + x12333;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12335 = x11175 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12336 = x12334 + x12335;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12337 = x11178 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12338 = x12336 + x12337;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12339 = x11181 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12340 = x12338 + x12339;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12341 = x11184 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12342 = x12340 + x12341;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12343 = x11187 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12344 = x12342 + x12343;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12345 = x11190 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12346 = x12344 + x12345;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12347 = x11193 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12348 = x12346 + x12347;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12349 = x11196 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12350 = x12348 + x12349;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12351 = x11202 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12352 = x11199 + x12351;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12353 = x11205 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12354 = x12352 + x12353;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12355 = x11208 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12356 = x12354 + x12355;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12357 = x11211 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12358 = x12356 + x12357;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12359 = x11214 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12360 = x12358 + x12359;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12361 = x11217 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12362 = x12360 + x12361;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12363 = x11220 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12364 = x12362 + x12363;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12365 = x11223 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12366 = x12364 + x12365;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12367 = x11226 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12368 = x12366 + x12367;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12369 = x11229 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12370 = x12368 + x12369;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12371 = x11232 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12372 = x12370 + x12371;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12373 = x11235 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12374 = x12372 + x12373;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12375 = x11238 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12376 = x12374 + x12375;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12377 = x11241 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12378 = x12376 + x12377;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12379 = x11244 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12380 = x12378 + x12379;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12381 = x12290 + x12350;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12382 = x12320 + x12380;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12383 = x11843 + x12381;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12384 = x11844 + x12382;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12385 = x10822 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12386 = x10821 + x12385;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12387 = x10823 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12388 = x12386 + x12387;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12389 = x10824 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12390 = x12388 + x12389;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12391 = x10825 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12392 = x12390 + x12391;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12393 = x10826 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12394 = x12392 + x12393;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12395 = x10827 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12396 = x12394 + x12395;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12397 = x10828 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12398 = x12396 + x12397;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12399 = x10829 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12400 = x12398 + x12399;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12401 = x10830 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12402 = x12400 + x12401;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12403 = x10831 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12404 = x12402 + x12403;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12405 = x10832 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12406 = x12404 + x12405;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12407 = x10833 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12408 = x12406 + x12407;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12409 = x10834 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12410 = x12408 + x12409;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12411 = x10835 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12412 = x12410 + x12411;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12413 = x10836 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12414 = x12412 + x12413;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12415 = x10838 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12416 = x10837 + x12415;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12417 = x10839 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12418 = x12416 + x12417;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12419 = x10840 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12420 = x12418 + x12419;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12421 = x10841 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12422 = x12420 + x12421;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12423 = x10842 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12424 = x12422 + x12423;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12425 = x10843 * x53;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12426 = x12424 + x12425;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12427 = x10844 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12428 = x12426 + x12427;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12429 = x10845 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12430 = x12428 + x12429;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12431 = x10846 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12432 = x12430 + x12431;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12433 = x10847 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12434 = x12432 + x12433;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12435 = x10848 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12436 = x12434 + x12435;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12437 = x10849 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12438 = x12436 + x12437;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12439 = x10850 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12440 = x12438 + x12439;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12441 = x10851 * x34;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12442 = x12440 + x12441;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12443 = x10852 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12444 = x12442 + x12443;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12445 = x11843 + x12414;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12446 = x11844 + x12444;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12383);
        reg = x12383;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12445);
        reg = x12445;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12384);
        reg = x12384;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12446);
        reg = x12446;
      }
      if (x8478 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12447 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x12447 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12448 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x12448 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12449 = Fp(x12447.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12449);
            reg = x12449;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12450 = Fp(x12447.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12451 = x12450 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12451);
            reg = x12451;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12452 = Fp(x12447.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12453 = x12452 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12453);
            reg = x12453;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12454 = Fp(x12447.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12455 = x12454 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12455);
            reg = x12455;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12456 = Fp(x12447.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12457 = x12456 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12457);
            reg = x12457;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12458 = Fp(x12447.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12459 = x12458 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12459);
            reg = x12459;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12460 = Fp(x12447.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12461 = x12460 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12461);
            reg = x12461;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12462 = Fp(x12447.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12463 = x12462 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12463);
            reg = x12463;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12464 = Fp(x12447.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12465 = x12464 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12465);
            reg = x12465;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12466 = Fp(x12447.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12467 = x12466 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12467);
            reg = x12467;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12468 = Fp(x12447.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12469 = x12468 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12469);
            reg = x12469;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12470 = Fp(x12447.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12471 = x12470 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12471);
            reg = x12471;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12472 = Fp(x12447.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12473 = x12472 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12473);
            reg = x12473;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12474 = Fp(x12447.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12475 = x12474 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12475);
            reg = x12475;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12476 = Fp(x12447.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12477 = x12476 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12477);
            reg = x12477;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12478 = Fp(x12447.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12479 = x12478 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12479);
            reg = x12479;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12480 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x12480 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12481 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x12481 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12482 = x12481 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12483 = x12480 + x12482;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12484 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x12484 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12485 = x12484 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12486 = x12483 + x12485;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12487 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12487 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12488 = x12487 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12489 = x12486 + x12488;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12490 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12490 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12491 = x12490 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12492 = x12489 + x12491;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12493 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x12493 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12494 = x12493 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12495 = x12492 + x12494;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12496 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x12496 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12497 = x12496 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12498 = x12495 + x12497;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12499 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x12499 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12500 = x12499 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12501 = x12498 + x12500;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12502 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x12502 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12503 = x12502 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12504 = x12501 + x12503;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12505 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12505 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12506 = x12505 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12507 = x12504 + x12506;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12508 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12508 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12509 = x12508 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12510 = x12507 + x12509;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12511 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12511 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12512 = x12511 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12513 = x12510 + x12512;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12514 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12514 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12515 = x12514 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12516 = x12513 + x12515;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12517 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12517 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12518 = x12517 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12519 = x12516 + x12518;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12520 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12520 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12521 = x12520 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12522 = x12519 + x12521;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12523 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12523 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12524 = x12523 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12525 = x12522 + x12524;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12526 = x12447 - x12525;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12527 = x12526 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12528 = Fp(x12527.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12528);
            reg = x12528;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12529 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x12529 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12530 = x12527 - x12529;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12531 = x12530 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12532 = x93 - x12531;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12533 = x12531 * x12532;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12533 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12534 = x12448 + x12527;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12535 = Fp(x12534.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12535);
            reg = x12535;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12536 = Fp(x12534.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12537 = x12536 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12537);
            reg = x12537;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12538 = Fp(x12534.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12539 = x12538 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12539);
            reg = x12539;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12540 = Fp(x12534.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12541 = x12540 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12541);
            reg = x12541;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12542 = Fp(x12534.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12543 = x12542 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12543);
            reg = x12543;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12544 = Fp(x12534.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12545 = x12544 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12545);
            reg = x12545;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12546 = Fp(x12534.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12547 = x12546 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12547);
            reg = x12547;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12548 = Fp(x12534.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12549 = x12548 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12549);
            reg = x12549;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12550 = Fp(x12534.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12551 = x12550 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12551);
            reg = x12551;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12552 = Fp(x12534.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12553 = x12552 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12553);
            reg = x12553;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12554 = Fp(x12534.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12555 = x12554 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12555);
            reg = x12555;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12556 = Fp(x12534.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12557 = x12556 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12557);
            reg = x12557;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12558 = Fp(x12534.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12559 = x12558 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12559);
            reg = x12559;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12560 = Fp(x12534.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12561 = x12560 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12561);
            reg = x12561;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12562 = Fp(x12534.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12563 = x12562 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12563);
            reg = x12563;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12564 = Fp(x12534.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12565 = x12564 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12565);
            reg = x12565;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12566 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12566 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12567 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12567 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12568 = x12567 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12569 = x12566 + x12568;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12570 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12570 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12571 = x12570 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12572 = x12569 + x12571;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12573 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12573 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12574 = x12573 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12575 = x12572 + x12574;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12576 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12576 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12577 = x12576 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12578 = x12575 + x12577;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12579 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12579 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12580 = x12579 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12581 = x12578 + x12580;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12582 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12582 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12583 = x12582 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12584 = x12581 + x12583;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12585 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12585 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12586 = x12585 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12587 = x12584 + x12586;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12588 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12588 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12589 = x12588 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12590 = x12587 + x12589;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12591 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x12591 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12592 = x12591 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12593 = x12590 + x12592;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12594 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x12594 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12595 = x12594 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12596 = x12593 + x12595;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12597 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12597 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12598 = x12597 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12599 = x12596 + x12598;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12600 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x12600 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12601 = x12600 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12602 = x12599 + x12601;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12603 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x12603 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12604 = x12603 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12605 = x12602 + x12604;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12606 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x12606 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12607 = x12606 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12608 = x12605 + x12607;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12609 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x12609 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12610 = x12609 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12611 = x12608 + x12610;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12612 = x12534 - x12611;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12613 = x12612 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12614 = Fp(x12613.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12614);
            reg = x12614;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12615 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x12615 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12616 = x12613 - x12615;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12617 = x12616 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12618 = x93 - x12617;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12619 = x12617 * x12618;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12619 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12620 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x12620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12621 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x12621 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12622 = Fp(x12620.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12622);
            reg = x12622;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12623 = Fp(x12620.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12624 = x12623 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12624);
            reg = x12624;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12625 = Fp(x12620.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12626 = x12625 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12626);
            reg = x12626;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12627 = Fp(x12620.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12628 = x12627 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12628);
            reg = x12628;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12629 = Fp(x12620.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12630 = x12629 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12630);
            reg = x12630;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12631 = Fp(x12620.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12632 = x12631 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12632);
            reg = x12632;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12633 = Fp(x12620.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12634 = x12633 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12634);
            reg = x12634;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12635 = Fp(x12620.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12636 = x12635 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12636);
            reg = x12636;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12637 = Fp(x12620.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12638 = x12637 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12638);
            reg = x12638;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12639 = Fp(x12620.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12640 = x12639 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12640);
            reg = x12640;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12641 = Fp(x12620.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12642 = x12641 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12642);
            reg = x12642;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12643 = Fp(x12620.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12644 = x12643 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12644);
            reg = x12644;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12645 = Fp(x12620.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12646 = x12645 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12646);
            reg = x12646;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12647 = Fp(x12620.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12648 = x12647 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12648);
            reg = x12648;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12649 = Fp(x12620.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12650 = x12649 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12650);
            reg = x12650;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12651 = Fp(x12620.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12652 = x12651 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12652);
            reg = x12652;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12653 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x12653 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12654 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x12654 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12655 = x12654 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12656 = x12653 + x12655;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12657 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x12657 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12658 = x12657 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12659 = x12656 + x12658;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12660 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x12660 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12661 = x12660 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12662 = x12659 + x12661;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12663 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x12663 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12664 = x12663 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12665 = x12662 + x12664;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12666 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x12666 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12667 = x12666 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12668 = x12665 + x12667;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12669 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x12669 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12670 = x12669 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12671 = x12668 + x12670;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12672 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x12672 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12673 = x12672 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12674 = x12671 + x12673;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12675 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x12675 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12676 = x12675 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12677 = x12674 + x12676;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12678 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x12678 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12679 = x12678 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12680 = x12677 + x12679;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12681 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x12681 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12682 = x12681 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12683 = x12680 + x12682;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12684 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x12684 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12685 = x12684 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12686 = x12683 + x12685;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12687 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x12687 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12688 = x12687 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12689 = x12686 + x12688;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12690 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x12690 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12691 = x12690 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12692 = x12689 + x12691;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12693 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x12693 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12694 = x12693 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12695 = x12692 + x12694;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12696 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x12696 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12697 = x12696 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12698 = x12695 + x12697;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12699 = x12620 - x12698;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12700 = x12699 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12701 = Fp(x12700.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12701);
            reg = x12701;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12702 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x12702 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12703 = x12700 - x12702;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12704 = x12703 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12705 = x93 - x12704;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12706 = x12704 * x12705;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12706 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12707 = x12621 + x12700;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12708 = Fp(x12707.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12708);
            reg = x12708;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12709 = Fp(x12707.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12710 = x12709 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12710);
            reg = x12710;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12711 = Fp(x12707.asUInt32() & x75.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12712 = x12711 * x73;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12712);
            reg = x12712;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12713 = Fp(x12707.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12714 = x12713 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12714);
            reg = x12714;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12715 = Fp(x12707.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12716 = x12715 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12716);
            reg = x12716;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12717 = Fp(x12707.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12718 = x12717 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12718);
            reg = x12718;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12719 = Fp(x12707.asUInt32() & x53.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12720 = x12719 * x52;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12720);
            reg = x12720;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12721 = Fp(x12707.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12722 = x12721 * x61;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12722);
            reg = x12722;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12723 = Fp(x12707.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12724 = x12723 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12724);
            reg = x12724;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12725 = Fp(x12707.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12726 = x12725 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12726);
            reg = x12726;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12727 = Fp(x12707.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12728 = x12727 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12728);
            reg = x12728;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12729 = Fp(x12707.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12730 = x12729 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12730);
            reg = x12730;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12731 = Fp(x12707.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12732 = x12731 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12732);
            reg = x12732;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12733 = Fp(x12707.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12734 = x12733 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12734);
            reg = x12734;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12735 = Fp(x12707.asUInt32() & x34.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12736 = x12735 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12736);
            reg = x12736;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12737 = Fp(x12707.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12738 = x12737 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12738);
            reg = x12738;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12739 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x12739 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12740 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x12740 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12741 = x12740 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12742 = x12739 + x12741;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12743 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x12743 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12744 = x12743 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12745 = x12742 + x12744;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12746 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x12746 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12747 = x12746 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12748 = x12745 + x12747;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12749 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x12749 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12750 = x12749 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12751 = x12748 + x12750;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12752 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x12752 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12753 = x12752 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12754 = x12751 + x12753;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12755 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x12755 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12756 = x12755 * x53;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12757 = x12754 + x12756;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12758 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x12758 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12759 = x12758 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12760 = x12757 + x12759;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12761 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x12761 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12762 = x12761 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12763 = x12760 + x12762;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12764 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x12764 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12765 = x12764 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12766 = x12763 + x12765;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12767 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x12767 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12768 = x12767 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12769 = x12766 + x12768;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12770 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x12770 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12771 = x12770 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12772 = x12769 + x12771;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12773 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x12773 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12774 = x12773 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12775 = x12772 + x12774;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12776 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x12776 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12777 = x12776 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12778 = x12775 + x12777;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12779 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x12779 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12780 = x12779 * x34;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12781 = x12778 + x12780;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12782 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x12782 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12783 = x12782 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12784 = x12781 + x12783;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12785 = x12707 - x12784;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12786 = x12785 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12787 = Fp(x12786.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12787);
            reg = x12787;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12788 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x12788 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12789 = x12786 - x12788;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12790 = x12789 * x73;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12791 = x93 - x12790;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12792 = x12790 * x12791;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12792 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12793 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x12793 != Fp::invalid());
      if (x12793 != 0) {
        if (x8485 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":430:38))
          auto x12794 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12794 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":430:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12794);
            reg = x12794;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":431:38))
          auto x12795 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12795 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":431:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12795);
            reg = x12795;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":432:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        if (x8486 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":436:51))
          auto x12796 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12796 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":436:51)
          auto x12797 = x12796 + x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":436:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12797);
            reg = x12797;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":437:51))
          auto x12798 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12798 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":437:51)
          auto x12799 = x12798 + x57;
          // loc("cirgen/circuit/rv32im/sha.cpp":437:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12799);
            reg = x12799;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":438:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x66);
            reg = x66;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":441:27)
      auto x12800 = x93 - x12793;
      if (x12800 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":442:36))
        auto x12801 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12801 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":442:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12801);
          reg = x12801;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":443:36))
        auto x12802 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12802 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":443:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12802);
          reg = x12802;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":444:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/components/mux.h":39:25))
    auto x12803 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x12803 != Fp::invalid());
    if (x12803 != 0) {
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x12804 = x596 + x75;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12805 = Fp(x12804.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12805);
          reg = x12805;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12806 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x12806 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12807 = x12804 - x12806;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12808 = x12807 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12809 = Fp(x12808.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12809);
          reg = x12809;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12810 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x12810 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12811 = x12808 - x12810;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12812 = x12811 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12813 = Fp(x12812.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12813);
          reg = x12813;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12814 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x12814 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12815 = x12812 - x12814;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12816 = x12815 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x12817 = Fp(x12816.asUInt32() & x74.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12817);
          reg = x12817;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12818 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x12818 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x12819 = x12816 - x12818;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x12820 = x12819 * x73;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12820);
        reg = x12820;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12821 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x12821 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x12822 = x93 - x12821;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x12823 = x12821 * x12822;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12823);
        reg = x12823;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12824 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x12824 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x12825 = x90 - x12821;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x12826 = x12824 * x12825;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x12826 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x596;
      host(ctx, "log", "  PageFault: PC = 0x%x", host_args.data(), 1, host_outs.data(), 0);
      {
        host_args.at(0) = x596;
        host(ctx, "pageRead", "", host_args.data(), 1, host_outs.data(), 1);
        auto x12827 = host_outs.at(0);
        // loc("cirgen/circuit/rv32im/page_fault.cpp":76:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12827);
          reg = x12827;
        }
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12828 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x12828 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":81:20)
      auto x12829 = x12828 - x2;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x12830 = (x12829 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12830);
          reg = x12830;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x12831 = inv(x12829);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12831);
          reg = x12831;
        }
      }
      // loc("Top/Mux/4/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12832 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x12832 != Fp::invalid());
      if (x12832 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x12829 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x12833 = x93 - x12832;
      if (x12833 != 0) {
        // loc("Top/Mux/4/Mux/12/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12834 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x12834 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12835 = x12829 * x12834;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12836 = x12835 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x12836 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x12832 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":83:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":84:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      if (x12833 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":87:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":88:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":100:15)
      auto x12837 = x12828 - x93;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12838 = Fp(x12837.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12838);
          reg = x12838;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12839 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x12839 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12840 = x12837 - x12839;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12841 = x12840 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12842 = Fp(x12841.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12842);
          reg = x12842;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12843 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x12843 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12844 = x12841 - x12843;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12845 = x12844 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12845);
        reg = x12845;
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":101:15)
      auto x12846 = x2 - x12828;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12847 = Fp(x12846.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12847);
          reg = x12847;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12848 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x12848 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12849 = x12846 - x12848;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12850 = x12849 * x87;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12851 = Fp(x12850.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12851);
          reg = x12851;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12852 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x12852 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12853 = x12850 - x12852;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12854 = x12853 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12854);
        reg = x12854;
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12855 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x12855 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":103:24)
      auto x12856 = x12828 + x12855;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":104:36)
      auto x12857 = x12856 * x68;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":104:19)
      auto x12858 = x12857 + x1;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":105:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12858);
        reg = x12858;
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":106:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x0);
        reg = x0;
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":107:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x67);
        reg = x67;
      }
    }
    // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/components/mux.h":39:25))
    auto x12859 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x12859 != Fp::invalid());
    if (x12859 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12860 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x12860 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/ecall.cpp":153:70))
      auto x12861 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x12861 != Fp::invalid());
      if (x12861 != 0) {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12862 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x12862 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12863 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x12863 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12864 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x12864 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12865 = args[2][128 * steps + ((cycle - 1) & mask)];
        assert(x12865 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x12866 = x12863 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12867 = x12862 + x12866;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12868 = x12864 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12869 = x12867 + x12868;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12870 = x12865 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12871 = x12869 + x12870;
        // loc("cirgen/circuit/rv32im/ecall.cpp":163:98)
        auto x12872 = x12871 * x73;
        // loc("Top/Mux/4/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12873 = args[2][79 * steps + ((cycle - 1) & mask)];
        assert(x12873 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":163:98)
        auto x12874 = x12873 + x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":163:98)
        auto x12875 = x12872 + x12874;
        // loc("cirgen/circuit/rv32im/ecall.cpp":163:98)
        auto x12876 = x12875 - x75;
        // loc("cirgen/circuit/rv32im/ecall.cpp":161:5)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12876);
          reg = x12876;
        }
        // loc("Top/Mux/4/Mux/8/Mux/2/Reg"("cirgen/circuit/rv32im/ecall.cpp":164:63))
        auto x12877 = args[2][180 * steps + ((cycle - 1) & mask)];
        assert(x12877 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":164:5)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12877);
          reg = x12877;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":167:22)
      auto x12878 = x93 - x12861;
      if (x12878 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/ecall.cpp":168:56))
        auto x12879 = args[2][161 * steps + ((cycle - 1) & mask)];
        assert(x12879 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":168:56)
        auto x12880 = x12879 - x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":168:5)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/ecall.cpp":169:46))
        auto x12881 = args[2][162 * steps + ((cycle - 1) & mask)];
        assert(x12881 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":169:46)
        auto x12882 = x12881 + x75;
        // loc("cirgen/circuit/rv32im/ecall.cpp":169:5)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12882);
          reg = x12882;
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12883 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x12883 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x12884 = (x12883 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12884);
          reg = x12884;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x12885 = inv(x12883);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12885);
          reg = x12885;
        }
      }
      // loc("Top/Mux/4/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12886 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x12886 != Fp::invalid());
      if (x12886 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x12883 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x12887 = x93 - x12886;
      if (x12887 != 0) {
        // loc("Top/Mux/4/Mux/13/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12888 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12888 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12889 = x12883 * x12888;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12890 = x12889 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x12890 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x12861 != 0) {
        // loc("Top/Mux/4/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12891 = args[2][79 * steps + ((cycle - 1) & mask)];
        assert(x12891 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":177:80)
        auto x12892 = x12891 + x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":177:80)
        auto x12893 = x12892 * x12887;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12894 = (x12893 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12894);
            reg = x12894;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12895 = x12893 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12896 = (x12895 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12896);
            reg = x12896;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12897 = x12893 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12898 = (x12897 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12898);
            reg = x12898;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12899 = x12893 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12900 = (x12899 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12900);
            reg = x12900;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12901 = x12893 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12902 = (x12901 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12902);
            reg = x12902;
          }
        }
        // loc("Top/Mux/4/Mux/13/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12903 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12903 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12904 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12904 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12905 = x12904 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12906 = x12903 + x12905;
        // loc("Top/Mux/4/Mux/13/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12907 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12907 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12908 = x12907 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12909 = x12906 + x12908;
        // loc("Top/Mux/4/Mux/13/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12910 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12910 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12911 = x12910 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12912 = x12909 + x12911;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x12913 = x12912 - x12893;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x12913 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12914 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12914 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":180:10)
        auto x12915 = x12914 * x75;
        host_args.at(0) = x12915;
        host_args.at(1) = x12883;
        host_args.at(2) = x12912;
        host(ctx, "log", "  COPYIN INIT: dest=%x, remaining=%u first chunk words=%u", host_args.data(), 3, host_outs.data(), 0);
      }
      if (x12878 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":185:43)
        auto x12916 = x12887 * x75;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12917 = (x12916 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12917);
            reg = x12917;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12918 = x12916 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12919 = (x12918 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12919);
            reg = x12919;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12920 = x12916 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12921 = (x12920 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12921);
            reg = x12921;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12922 = x12916 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12923 = (x12922 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12923);
            reg = x12923;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12924 = x12916 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x12925 = (x12924 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12925);
            reg = x12925;
          }
        }
        // loc("Top/Mux/4/Mux/13/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12926 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12926 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12927 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12927 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12928 = x12927 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12929 = x12926 + x12928;
        // loc("Top/Mux/4/Mux/13/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12930 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12930 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12931 = x12930 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12932 = x12929 + x12931;
        // loc("Top/Mux/4/Mux/13/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12933 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12933 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12934 = x12933 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12935 = x12932 + x12934;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x12936 = x12935 - x12916;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x12936 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/Mux/4/Mux/13/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":187:24))
      auto x12937 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x12937 != Fp::invalid());
      if (x12937 != 0) {
        {
          host(ctx, "syscallFini", "", host_args.data(), 0, host_outs.data(), 8);
          auto x12938 = host_outs.at(0);
          auto x12939 = host_outs.at(1);
          auto x12940 = host_outs.at(2);
          auto x12941 = host_outs.at(3);
          auto x12942 = host_outs.at(4);
          auto x12943 = host_outs.at(5);
          auto x12944 = host_outs.at(6);
          auto x12945 = host_outs.at(7);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12938);
            reg = x12938;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12939);
            reg = x12939;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12940);
            reg = x12940;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12941);
            reg = x12941;
          }
          {
            host_args.at(0) = x25;
            host_args.at(1) = x12938;
            host_args.at(2) = x12939;
            host_args.at(3) = x12940;
            host_args.at(4) = x12941;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12946 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x12946 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12947 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x12947 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12948 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x12948 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12949 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x12949 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x25);
            reg = x25;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12860);
            reg = x12860;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12946);
            reg = x12946;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12947);
            reg = x12947;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12948);
            reg = x12948;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12949);
            reg = x12949;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12942);
            reg = x12942;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12943);
            reg = x12943;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12944);
            reg = x12944;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12945);
            reg = x12945;
          }
          {
            host_args.at(0) = x24;
            host_args.at(1) = x12942;
            host_args.at(2) = x12943;
            host_args.at(3) = x12944;
            host_args.at(4) = x12945;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12950 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x12950 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12951 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x12951 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12952 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x12952 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12953 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x12953 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x24);
            reg = x24;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12860);
            reg = x12860;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12950);
            reg = x12950;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12951);
            reg = x12951;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12952);
            reg = x12952;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12953);
            reg = x12953;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x12954 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x12954 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":196:8)
        auto x12955 = x12954 - x12860;
        // loc("cirgen/circuit/rv32im/ecall.cpp":196:8)
        if (x12955 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:196");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x12956 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x12956 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":197:8)
        auto x12957 = x12956 - x12860;
        // loc("cirgen/circuit/rv32im/ecall.cpp":197:8)
        if (x12957 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:197");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x12958 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x12958 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":199:8)
        auto x12959 = x12958 - x25;
        // loc("cirgen/circuit/rv32im/ecall.cpp":199:8)
        if (x12959 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:199");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x12960 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x12960 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":200:8)
        auto x12961 = x12960 - x24;
        // loc("cirgen/circuit/rv32im/ecall.cpp":200:8)
        if (x12961 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:200");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12962 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x12962 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12963 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x12963 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12964 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x12964 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12965 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x12965 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12966 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x12966 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12967 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x12967 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12968 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x12968 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12969 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x12969 != Fp::invalid());
        host_args.at(0) = x12962;
        host_args.at(1) = x12963;
        host_args.at(2) = x12964;
        host_args.at(3) = x12965;
        host_args.at(4) = x12966;
        host_args.at(5) = x12967;
        host_args.at(6) = x12968;
        host_args.at(7) = x12969;
        host(ctx, "log", "  COPYIN FINI: a0=%w a1=%w", host_args.data(), 8, host_outs.data(), 0);
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":207:19)
        auto x12970 = x596 + x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x12971 = x12970 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12972 = Fp(x12971.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12972);
            reg = x12972;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x12973 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x12973 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12974 = x12971 - x12973;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x12975 = x12974 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12976 = Fp(x12975.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12976);
            reg = x12976;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x12977 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x12977 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12978 = x12975 - x12977;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x12979 = x12978 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12980 = Fp(x12979.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12980);
            reg = x12980;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x12981 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x12981 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12982 = x12979 - x12981;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x12983 = x12982 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x12984 = Fp(x12983.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12984);
            reg = x12984;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12985 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x12985 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x12986 = x12983 - x12985;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x12987 = x12986 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12987);
          reg = x12987;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12988 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x12988 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x12989 = x93 - x12988;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x12990 = x12988 * x12989;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12990);
          reg = x12990;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12991 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x12991 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x12992 = x90 - x12988;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x12993 = x12991 * x12992;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x12993 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":208:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":210:28)
      auto x12994 = x93 - x12937;
      if (x12994 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x12995 = x596 + x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12996 = Fp(x12995.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12996);
            reg = x12996;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x12997 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x12997 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12998 = x12995 - x12997;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x12999 = x12998 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13000 = Fp(x12999.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13000);
            reg = x13000;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13001 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13001 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13002 = x12999 - x13001;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13003 = x13002 * x87;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13004 = Fp(x13003.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13004);
            reg = x13004;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13005 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13005 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13006 = x13003 - x13005;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13007 = x13006 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13008 = Fp(x13007.asUInt32() & x74.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13008);
            reg = x13008;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13009 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13009 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13010 = x13007 - x13009;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13011 = x13010 * x73;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13011);
          reg = x13011;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13012 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13012 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13013 = x93 - x13012;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13014 = x13012 * x13013;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13014);
          reg = x13014;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13015 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13015 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13016 = x90 - x13012;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13017 = x13015 * x13016;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13017 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":212:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
      }
      // loc("Top/Mux/4/Mux/13/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/ecall.cpp":222:35))
      auto x13018 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x13018 != Fp::invalid());
      // loc("Top/Mux/4/Mux/13/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/ecall.cpp":222:35))
      auto x13019 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x13019 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":222:22)
      auto x13020 = x13018 + x13019;
      // loc("Top/Mux/4/Mux/13/OneHot/hot[3](Reg)"("cirgen/circuit/rv32im/ecall.cpp":222:35))
      auto x13021 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x13021 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":222:22)
      auto x13022 = x13020 + x13021;
      // loc("Top/Mux/4/Mux/13/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/ecall.cpp":220:35))
      auto x13023 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x13023 != Fp::invalid());
      if (x13023 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13024 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13024 != Fp::invalid());
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13025 = host_outs.at(0);
          auto x13026 = host_outs.at(1);
          auto x13027 = host_outs.at(2);
          auto x13028 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13025);
            reg = x13025;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13026);
            reg = x13026;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13027);
            reg = x13027;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13028);
            reg = x13028;
          }
          {
            host_args.at(0) = x13024;
            host_args.at(1) = x13025;
            host_args.at(2) = x13026;
            host_args.at(3) = x13027;
            host_args.at(4) = x13028;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13029 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x13029 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13030 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x13030 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13031 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x13031 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13032 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x13032 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13024);
            reg = x13024;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12860);
            reg = x12860;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13029);
            reg = x13029;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13030);
            reg = x13030;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13031);
            reg = x13031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13032);
            reg = x13032;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":231:41)
          auto x13033 = x13024 * x75;
          host_args.at(0) = x13033;
          host_args.at(1) = x13029;
          host_args.at(2) = x13030;
          host_args.at(3) = x13031;
          host_args.at(4) = x13032;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13034 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13034 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        auto x13035 = x13034 - x12860;
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        if (x13035 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:234");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13036 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13036 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        auto x13037 = x13036 - x13024;
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        if (x13037 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:235");
      }
      if (x13022 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":220:22)
      auto x13038 = x13021 + x13023;
      if (x13038 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13039 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13039 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:23)
        auto x13040 = x13039 + x93;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13041 = host_outs.at(0);
          auto x13042 = host_outs.at(1);
          auto x13043 = host_outs.at(2);
          auto x13044 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13041);
            reg = x13041;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13042);
            reg = x13042;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13043);
            reg = x13043;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13044);
            reg = x13044;
          }
          {
            host_args.at(0) = x13040;
            host_args.at(1) = x13041;
            host_args.at(2) = x13042;
            host_args.at(3) = x13043;
            host_args.at(4) = x13044;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13045 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13045 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13046 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13046 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13047 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13047 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13048 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13048 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13040);
            reg = x13040;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12860);
            reg = x12860;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13045);
            reg = x13045;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13046);
            reg = x13046;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13047);
            reg = x13047;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13048);
            reg = x13048;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":231:41)
          auto x13049 = x13040 * x75;
          host_args.at(0) = x13049;
          host_args.at(1) = x13045;
          host_args.at(2) = x13046;
          host_args.at(3) = x13047;
          host_args.at(4) = x13048;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13050 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13050 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        auto x13051 = x13050 - x12860;
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        if (x13051 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:234");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13052 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13052 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        auto x13053 = x13052 - x13040;
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        if (x13053 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:235");
      }
      if (x13020 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":220:22)
      auto x13054 = x13019 + x13021;
      // loc("cirgen/circuit/rv32im/ecall.cpp":220:22)
      auto x13055 = x13054 + x13023;
      if (x13055 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13056 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13056 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:23)
        auto x13057 = x13056 + x90;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13058 = host_outs.at(0);
          auto x13059 = host_outs.at(1);
          auto x13060 = host_outs.at(2);
          auto x13061 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13058);
            reg = x13058;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13059);
            reg = x13059;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13060);
            reg = x13060;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13061);
            reg = x13061;
          }
          {
            host_args.at(0) = x13057;
            host_args.at(1) = x13058;
            host_args.at(2) = x13059;
            host_args.at(3) = x13060;
            host_args.at(4) = x13061;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13062 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13062 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13063 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13063 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13064 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13064 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13065 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13065 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13057);
            reg = x13057;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12860);
            reg = x12860;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13062);
            reg = x13062;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13063);
            reg = x13063;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13064);
            reg = x13064;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13065);
            reg = x13065;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":231:41)
          auto x13066 = x13057 * x75;
          host_args.at(0) = x13066;
          host_args.at(1) = x13062;
          host_args.at(2) = x13063;
          host_args.at(3) = x13064;
          host_args.at(4) = x13065;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13067 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13067 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        auto x13068 = x13067 - x12860;
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        if (x13068 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:234");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13069 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13069 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        auto x13070 = x13069 - x13057;
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        if (x13070 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:235");
      }
      if (x13018 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":220:22)
      auto x13071 = x13022 + x13023;
      if (x13071 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13072 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13072 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:23)
        auto x13073 = x13072 + x74;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13074 = host_outs.at(0);
          auto x13075 = host_outs.at(1);
          auto x13076 = host_outs.at(2);
          auto x13077 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13074);
            reg = x13074;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13075);
            reg = x13075;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13076);
            reg = x13076;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13077);
            reg = x13077;
          }
          {
            host_args.at(0) = x13073;
            host_args.at(1) = x13074;
            host_args.at(2) = x13075;
            host_args.at(3) = x13076;
            host_args.at(4) = x13077;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13078 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13078 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13079 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13079 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13080 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13080 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13081 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13081 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13073);
            reg = x13073;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12860);
            reg = x12860;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13078);
            reg = x13078;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13079);
            reg = x13079;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13080);
            reg = x13080;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13081);
            reg = x13081;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":231:41)
          auto x13082 = x13073 * x75;
          host_args.at(0) = x13082;
          host_args.at(1) = x13078;
          host_args.at(2) = x13079;
          host_args.at(3) = x13080;
          host_args.at(4) = x13081;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13083 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13083 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        auto x13084 = x13083 - x12860;
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        if (x13084 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:234");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13085 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13085 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        auto x13086 = x13085 - x13073;
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        if (x13086 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:235");
      }
      if (x92 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
  }
  // loc("Top/Code/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":39:25))
  auto x13087 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x13087 != Fp::invalid());
  if (x13087 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x13088 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13088 != Fp::invalid());
    host_args.at(0) = x13088;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
    // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13089 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x13089 != Fp::invalid());
    // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13090 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x13090 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13091 = x13090 * x90;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13092 = x13089 + x13091;
    // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13093 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x13093 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13094 = x13093 * x74;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13095 = x13092 + x13094;
    // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13096 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x13096 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13097 = x13096 * x75;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13098 = x13095 + x13097;
    // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13099 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x13099 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13100 = x13099 * x71;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13101 = x13098 + x13100;
    // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13102 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x13102 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13103 = x13102 * x70;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13104 = x13101 + x13103;
    // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13105 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x13105 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13106 = x13105 * x69;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13107 = x13104 + x13106;
    // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13108 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x13108 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13109 = x13108 * x68;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13110 = x13107 + x13109;
    // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13111 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x13111 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13112 = x13111 * x67;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13113 = x13110 + x13112;
    // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13114 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x13114 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13115 = x13114 * x66;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13116 = x13113 + x13115;
    // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13117 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x13117 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13118 = x13117 * x65;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13119 = x13116 + x13118;
    // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13120 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x13120 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13121 = x13120 * x64;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13122 = x13119 + x13121;
    // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13123 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x13123 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13124 = x13123 * x63;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13125 = x13122 + x13124;
    // loc("cirgen/circuit/rv32im/top.cpp":48:38)
    auto x13126 = x13125 - x68;
    // loc("cirgen/circuit/rv32im/top.cpp":48:38)
    if (x13126 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:48");
    // loc("Top/Mux/4/Mux/8/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13127 = args[2][177 * steps + ((cycle - 1) & mask)];
    assert(x13127 != Fp::invalid());
    // loc("Top/Mux/4/Mux/8/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13128 = args[2][178 * steps + ((cycle - 1) & mask)];
    assert(x13128 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13129 = x13128 * x90;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13130 = x13127 + x13129;
    // loc("Top/Mux/4/Mux/8/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13131 = args[2][179 * steps + ((cycle - 1) & mask)];
    assert(x13131 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13132 = x13131 * x74;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13133 = x13130 + x13132;
    // loc("cirgen/circuit/rv32im/top.cpp":50:39)
    if (x13133 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:50");
  }
  // loc("Top/Code/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":39:25))
  auto x13134 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x13134 != Fp::invalid());
  if (x13134 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x13135 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13135 != Fp::invalid());
    host_args.at(0) = x13135;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/top.cpp":71:27))
  auto x13136 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x13136 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13137 = x13136 + x94;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13138 = x13137 + x419;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13139 = x13138 + x472;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13140 = x13139 + x582;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13141 = x13140 + x13087;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13142 = x13141 + x13134;
  if (x582 != 0) {
    // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/top.cpp":79:19))
    auto x13143 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13143 != Fp::invalid());
    if (x13143 != 0) {
      // loc("Top/Mux/4/Mux/8/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/top.cpp":82:20))
      auto x13144 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13144 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/top.cpp":83:7)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13144);
        reg = x13144;
      }
    }
    // loc("cirgen/circuit/rv32im/top.cpp":85:19)
    auto x13145 = x93 - x13143;
    if (x13145 != 0) {
      // loc("cirgen/circuit/rv32im/top.cpp":85:23)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":87:23)
  auto x13146 = x13142 - x582;
  if (x13146 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":87:27)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
  }
  // loc("Top/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
  auto x13147 = args[2][9 * steps + ((cycle - 0) & mask)];
  assert(x13147 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":88:10)
  auto x13148 = x93 - x13147;
  if (x419 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/ram.cpp":43:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/ram.cpp":44:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/ram.cpp":45:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
  }
  if (x472 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
  }
  if (x582 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13149 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x13149 != Fp::invalid());
    if (x13149 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13150 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x13150 != Fp::invalid());
    if (x13150 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13151 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x13151 != Fp::invalid());
    if (x13151 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13152 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x13152 != Fp::invalid());
    if (x13152 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13153 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x13153 != Fp::invalid());
    if (x13153 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13154 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x13154 != Fp::invalid());
    if (x13154 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13155 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x13155 != Fp::invalid());
    if (x13155 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13156 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x13156 != Fp::invalid());
    if (x13156 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13157 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13157 != Fp::invalid());
    if (x13157 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13158 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13158 != Fp::invalid());
      if (x13158 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13159 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13159 != Fp::invalid());
      if (x13159 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13160 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13160 != Fp::invalid());
      if (x13160 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13161 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13161 != Fp::invalid());
      if (x13161 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13162 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13162 != Fp::invalid());
    if (x13162 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13163 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13163 != Fp::invalid());
    if (x13163 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13164 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13164 != Fp::invalid());
    if (x13164 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13165 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x13165 != Fp::invalid());
    if (x13165 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13166 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13166 != Fp::invalid());
    if (x13166 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
  }
  if (x13087 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
  }
  if (x419 != 0) {
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13167 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x13167 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13168 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x13168 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13169 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x13169 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13170 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x13170 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13171 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x13171 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13172 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x13172 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13173 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x13173 != Fp::invalid());
      host_args.at(0) = x13167;
      host_args.at(1) = x13168;
      host_args.at(2) = x13169;
      host_args.at(3) = x13170;
      host_args.at(4) = x13171;
      host_args.at(5) = x13172;
      host_args.at(6) = x13173;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13174 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x13174 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13175 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x13175 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13176 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x13176 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13177 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13177 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13178 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13178 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13179 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13179 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13180 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x13180 != Fp::invalid());
      host_args.at(0) = x13174;
      host_args.at(1) = x13175;
      host_args.at(2) = x13176;
      host_args.at(3) = x13177;
      host_args.at(4) = x13178;
      host_args.at(5) = x13179;
      host_args.at(6) = x13180;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13181 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13181 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13182 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13182 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13183 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x13183 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13184 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x13184 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13185 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x13185 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13186 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x13186 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13187 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x13187 != Fp::invalid());
      host_args.at(0) = x13181;
      host_args.at(1) = x13182;
      host_args.at(2) = x13183;
      host_args.at(3) = x13184;
      host_args.at(4) = x13185;
      host_args.at(5) = x13186;
      host_args.at(6) = x13187;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13188 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x13188 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13189 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x13189 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13190 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x13190 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13191 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x13191 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13192 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x13192 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13193 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x13193 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13194 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x13194 != Fp::invalid());
      host_args.at(0) = x13188;
      host_args.at(1) = x13189;
      host_args.at(2) = x13190;
      host_args.at(3) = x13191;
      host_args.at(4) = x13192;
      host_args.at(5) = x13193;
      host_args.at(6) = x13194;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x472 != 0) {
    {
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13195 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x13195 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13196 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x13196 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13197 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x13197 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13198 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x13198 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13199 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x13199 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13200 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x13200 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13201 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x13201 != Fp::invalid());
      host_args.at(0) = x13195;
      host_args.at(1) = x13196;
      host_args.at(2) = x13197;
      host_args.at(3) = x13198;
      host_args.at(4) = x13199;
      host_args.at(5) = x13200;
      host_args.at(6) = x13201;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13202 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x13202 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13203 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x13203 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13204 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x13204 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13205 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13205 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13206 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13206 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13207 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13207 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13208 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x13208 != Fp::invalid());
      host_args.at(0) = x13202;
      host_args.at(1) = x13203;
      host_args.at(2) = x13204;
      host_args.at(3) = x13205;
      host_args.at(4) = x13206;
      host_args.at(5) = x13207;
      host_args.at(6) = x13208;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13209 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13209 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13210 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13210 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13211 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x13211 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13212 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x13212 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13213 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x13213 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13214 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x13214 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13215 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x13215 != Fp::invalid());
      host_args.at(0) = x13209;
      host_args.at(1) = x13210;
      host_args.at(2) = x13211;
      host_args.at(3) = x13212;
      host_args.at(4) = x13213;
      host_args.at(5) = x13214;
      host_args.at(6) = x13215;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13216 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x13216 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13217 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x13217 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13218 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x13218 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13219 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x13219 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13220 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x13220 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13221 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x13221 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13222 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x13222 != Fp::invalid());
      host_args.at(0) = x13216;
      host_args.at(1) = x13217;
      host_args.at(2) = x13218;
      host_args.at(3) = x13219;
      host_args.at(4) = x13220;
      host_args.at(5) = x13221;
      host_args.at(6) = x13222;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x582 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13223 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x13223 != Fp::invalid());
    if (x13223 != 0) {
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13224 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13224 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13225 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13225 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13226 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13226 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13227 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13227 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13228 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13228 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13229 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13229 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13230 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13230 != Fp::invalid());
        host_args.at(0) = x13224;
        host_args.at(1) = x13225;
        host_args.at(2) = x13226;
        host_args.at(3) = x13227;
        host_args.at(4) = x13228;
        host_args.at(5) = x13229;
        host_args.at(6) = x13230;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13231 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13231 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13232 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13232 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13233 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13233 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13234 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13234 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13235 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13235 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13236 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13236 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13237 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13237 != Fp::invalid());
        host_args.at(0) = x13231;
        host_args.at(1) = x13232;
        host_args.at(2) = x13233;
        host_args.at(3) = x13234;
        host_args.at(4) = x13235;
        host_args.at(5) = x13236;
        host_args.at(6) = x13237;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13238 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13238 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13239 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13239 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13240 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13240 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13241 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13241 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13242 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13242 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13243 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13243 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13244 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13244 != Fp::invalid());
        host_args.at(0) = x13238;
        host_args.at(1) = x13239;
        host_args.at(2) = x13240;
        host_args.at(3) = x13241;
        host_args.at(4) = x13242;
        host_args.at(5) = x13243;
        host_args.at(6) = x13244;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13245 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13245 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13246 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13246 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13247 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13247 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13248 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13248 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13249 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13249 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13250 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13250 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13251 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13251 != Fp::invalid());
        host_args.at(0) = x13245;
        host_args.at(1) = x13246;
        host_args.at(2) = x13247;
        host_args.at(3) = x13248;
        host_args.at(4) = x13249;
        host_args.at(5) = x13250;
        host_args.at(6) = x13251;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13252 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x13252 != Fp::invalid());
    if (x13252 != 0) {
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13253 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13253 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13254 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13254 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13255 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13255 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13256 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13256 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13257 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13257 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13258 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13258 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13259 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13259 != Fp::invalid());
        host_args.at(0) = x13253;
        host_args.at(1) = x13254;
        host_args.at(2) = x13255;
        host_args.at(3) = x13256;
        host_args.at(4) = x13257;
        host_args.at(5) = x13258;
        host_args.at(6) = x13259;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13260 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13260 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13261 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13261 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13262 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13262 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13263 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13263 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13264 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13264 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13265 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13265 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13266 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13266 != Fp::invalid());
        host_args.at(0) = x13260;
        host_args.at(1) = x13261;
        host_args.at(2) = x13262;
        host_args.at(3) = x13263;
        host_args.at(4) = x13264;
        host_args.at(5) = x13265;
        host_args.at(6) = x13266;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13267 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13267 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13268 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13268 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13269 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13269 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13270 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13270 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13271 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13271 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13272 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13272 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13273 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13273 != Fp::invalid());
        host_args.at(0) = x13267;
        host_args.at(1) = x13268;
        host_args.at(2) = x13269;
        host_args.at(3) = x13270;
        host_args.at(4) = x13271;
        host_args.at(5) = x13272;
        host_args.at(6) = x13273;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13274 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13274 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13275 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13275 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13276 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13276 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13277 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13277 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13278 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13278 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13279 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13280 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13280 != Fp::invalid());
        host_args.at(0) = x13274;
        host_args.at(1) = x13275;
        host_args.at(2) = x13276;
        host_args.at(3) = x13277;
        host_args.at(4) = x13278;
        host_args.at(5) = x13279;
        host_args.at(6) = x13280;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13281 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x13281 != Fp::invalid());
    if (x13281 != 0) {
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13282 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13282 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13283 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13283 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13284 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13284 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13285 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13285 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13286 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13286 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13287 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13287 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13288 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13288 != Fp::invalid());
        host_args.at(0) = x13282;
        host_args.at(1) = x13283;
        host_args.at(2) = x13284;
        host_args.at(3) = x13285;
        host_args.at(4) = x13286;
        host_args.at(5) = x13287;
        host_args.at(6) = x13288;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13289 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13289 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13290 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13290 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13291 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13291 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13292 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13292 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13293 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13293 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13294 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13294 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13295 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13295 != Fp::invalid());
        host_args.at(0) = x13289;
        host_args.at(1) = x13290;
        host_args.at(2) = x13291;
        host_args.at(3) = x13292;
        host_args.at(4) = x13293;
        host_args.at(5) = x13294;
        host_args.at(6) = x13295;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13296 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13296 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13297 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13297 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13298 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13298 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13299 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13299 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13300 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13300 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13301 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13301 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13302 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13302 != Fp::invalid());
        host_args.at(0) = x13296;
        host_args.at(1) = x13297;
        host_args.at(2) = x13298;
        host_args.at(3) = x13299;
        host_args.at(4) = x13300;
        host_args.at(5) = x13301;
        host_args.at(6) = x13302;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13303 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13303 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13304 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13304 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13305 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13305 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13306 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13306 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13307 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13307 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13308 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13308 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13309 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13309 != Fp::invalid());
        host_args.at(0) = x13303;
        host_args.at(1) = x13304;
        host_args.at(2) = x13305;
        host_args.at(3) = x13306;
        host_args.at(4) = x13307;
        host_args.at(5) = x13308;
        host_args.at(6) = x13309;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13310 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x13310 != Fp::invalid());
    if (x13310 != 0) {
      {
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13311 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13311 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13312 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13313 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13313 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13314 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13314 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13315 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13315 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13316 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13316 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13317 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13317 != Fp::invalid());
        host_args.at(0) = x13311;
        host_args.at(1) = x13312;
        host_args.at(2) = x13313;
        host_args.at(3) = x13314;
        host_args.at(4) = x13315;
        host_args.at(5) = x13316;
        host_args.at(6) = x13317;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13318 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13318 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13319 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13319 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13320 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13320 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13321 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13321 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13322 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13322 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13323 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13323 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13324 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13324 != Fp::invalid());
        host_args.at(0) = x13318;
        host_args.at(1) = x13319;
        host_args.at(2) = x13320;
        host_args.at(3) = x13321;
        host_args.at(4) = x13322;
        host_args.at(5) = x13323;
        host_args.at(6) = x13324;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13325 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13325 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13326 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13326 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13327 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13327 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13328 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13328 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13329 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13329 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13330 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13330 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13331 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13331 != Fp::invalid());
        host_args.at(0) = x13325;
        host_args.at(1) = x13326;
        host_args.at(2) = x13327;
        host_args.at(3) = x13328;
        host_args.at(4) = x13329;
        host_args.at(5) = x13330;
        host_args.at(6) = x13331;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13332 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13333 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13333 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13334 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13334 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13335 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13335 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13336 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13336 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13337 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13337 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13338 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13338 != Fp::invalid());
        host_args.at(0) = x13332;
        host_args.at(1) = x13333;
        host_args.at(2) = x13334;
        host_args.at(3) = x13335;
        host_args.at(4) = x13336;
        host_args.at(5) = x13337;
        host_args.at(6) = x13338;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13339 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13339 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13340 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13340 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13341 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13341 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13342 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13342 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13343 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13343 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13344 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13344 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13345 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13345 != Fp::invalid());
        host_args.at(0) = x13339;
        host_args.at(1) = x13340;
        host_args.at(2) = x13341;
        host_args.at(3) = x13342;
        host_args.at(4) = x13343;
        host_args.at(5) = x13344;
        host_args.at(6) = x13345;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13346 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x13346 != Fp::invalid());
    if (x13346 != 0) {
      {
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13347 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13348 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13348 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13349 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13349 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13350 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13350 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13351 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13351 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13352 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13352 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13353 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13353 != Fp::invalid());
        host_args.at(0) = x13347;
        host_args.at(1) = x13348;
        host_args.at(2) = x13349;
        host_args.at(3) = x13350;
        host_args.at(4) = x13351;
        host_args.at(5) = x13352;
        host_args.at(6) = x13353;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13354 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13354 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13355 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13355 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13356 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13356 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13357 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13357 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13358 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13358 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13359 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13359 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13360 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13360 != Fp::invalid());
        host_args.at(0) = x13354;
        host_args.at(1) = x13355;
        host_args.at(2) = x13356;
        host_args.at(3) = x13357;
        host_args.at(4) = x13358;
        host_args.at(5) = x13359;
        host_args.at(6) = x13360;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13361 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13361 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13362 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13362 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13363 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13363 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13364 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13364 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13365 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13365 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13366 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13366 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13367 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13367 != Fp::invalid());
        host_args.at(0) = x13361;
        host_args.at(1) = x13362;
        host_args.at(2) = x13363;
        host_args.at(3) = x13364;
        host_args.at(4) = x13365;
        host_args.at(5) = x13366;
        host_args.at(6) = x13367;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13368 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13368 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13369 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13369 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13370 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13370 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13371 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13371 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13372 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13372 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13373 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13373 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13374 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13374 != Fp::invalid());
        host_args.at(0) = x13368;
        host_args.at(1) = x13369;
        host_args.at(2) = x13370;
        host_args.at(3) = x13371;
        host_args.at(4) = x13372;
        host_args.at(5) = x13373;
        host_args.at(6) = x13374;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13375 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x13375 != Fp::invalid());
    if (x13375 != 0) {
      {
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13376 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13376 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13377 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13377 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13378 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13378 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13379 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13379 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13380 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13380 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13381 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13381 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13382 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13382 != Fp::invalid());
        host_args.at(0) = x13376;
        host_args.at(1) = x13377;
        host_args.at(2) = x13378;
        host_args.at(3) = x13379;
        host_args.at(4) = x13380;
        host_args.at(5) = x13381;
        host_args.at(6) = x13382;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13383 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13383 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13384 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13384 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13385 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13385 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13386 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13386 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13387 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13387 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13388 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13388 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13389 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13389 != Fp::invalid());
        host_args.at(0) = x13383;
        host_args.at(1) = x13384;
        host_args.at(2) = x13385;
        host_args.at(3) = x13386;
        host_args.at(4) = x13387;
        host_args.at(5) = x13388;
        host_args.at(6) = x13389;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13390 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13390 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13391 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13391 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13392 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13392 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13393 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13393 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13394 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13394 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13395 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13395 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13396 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13396 != Fp::invalid());
        host_args.at(0) = x13390;
        host_args.at(1) = x13391;
        host_args.at(2) = x13392;
        host_args.at(3) = x13393;
        host_args.at(4) = x13394;
        host_args.at(5) = x13395;
        host_args.at(6) = x13396;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13397 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13397 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13398 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13398 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13399 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13399 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13400 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13400 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13401 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13401 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13402 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13402 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13403 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13403 != Fp::invalid());
        host_args.at(0) = x13397;
        host_args.at(1) = x13398;
        host_args.at(2) = x13399;
        host_args.at(3) = x13400;
        host_args.at(4) = x13401;
        host_args.at(5) = x13402;
        host_args.at(6) = x13403;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13404 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13404 != Fp::invalid());
    if (x13404 != 0) {
      {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13405 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13405 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13406 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13406 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13407 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13407 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13408 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13408 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13409 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13409 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13410 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13410 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13411 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13411 != Fp::invalid());
        host_args.at(0) = x13405;
        host_args.at(1) = x13406;
        host_args.at(2) = x13407;
        host_args.at(3) = x13408;
        host_args.at(4) = x13409;
        host_args.at(5) = x13410;
        host_args.at(6) = x13411;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13412 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13412 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13413 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13413 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13414 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13414 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13415 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13416 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13416 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13417 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13417 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13418 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13418 != Fp::invalid());
        host_args.at(0) = x13412;
        host_args.at(1) = x13413;
        host_args.at(2) = x13414;
        host_args.at(3) = x13415;
        host_args.at(4) = x13416;
        host_args.at(5) = x13417;
        host_args.at(6) = x13418;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13419 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13419 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13420 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13420 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13421 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13421 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13422 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13422 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13423 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13423 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13424 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13424 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13425 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13425 != Fp::invalid());
        host_args.at(0) = x13419;
        host_args.at(1) = x13420;
        host_args.at(2) = x13421;
        host_args.at(3) = x13422;
        host_args.at(4) = x13423;
        host_args.at(5) = x13424;
        host_args.at(6) = x13425;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13426 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13426 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13427 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13427 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13428 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13428 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13429 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13429 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13430 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13430 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13431 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13431 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13432 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13432 != Fp::invalid());
        host_args.at(0) = x13426;
        host_args.at(1) = x13427;
        host_args.at(2) = x13428;
        host_args.at(3) = x13429;
        host_args.at(4) = x13430;
        host_args.at(5) = x13431;
        host_args.at(6) = x13432;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13433 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13433 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13434 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13434 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13435 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13435 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13436 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13436 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13437 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13437 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13438 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13438 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13439 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13439 != Fp::invalid());
        host_args.at(0) = x13433;
        host_args.at(1) = x13434;
        host_args.at(2) = x13435;
        host_args.at(3) = x13436;
        host_args.at(4) = x13437;
        host_args.at(5) = x13438;
        host_args.at(6) = x13439;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13440 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13440 != Fp::invalid());
    if (x13440 != 0) {
      {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13441 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13441 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13442 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13442 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13443 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13443 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13444 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13444 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13445 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13445 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13446 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13446 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13447 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13447 != Fp::invalid());
        host_args.at(0) = x13441;
        host_args.at(1) = x13442;
        host_args.at(2) = x13443;
        host_args.at(3) = x13444;
        host_args.at(4) = x13445;
        host_args.at(5) = x13446;
        host_args.at(6) = x13447;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13448 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13448 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13449 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13449 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13450 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13450 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13451 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13451 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13452 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13452 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13453 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13453 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13454 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13454 != Fp::invalid());
        host_args.at(0) = x13448;
        host_args.at(1) = x13449;
        host_args.at(2) = x13450;
        host_args.at(3) = x13451;
        host_args.at(4) = x13452;
        host_args.at(5) = x13453;
        host_args.at(6) = x13454;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13455 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13455 != Fp::invalid());
    if (x13455 != 0) {
      {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13456 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13456 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13457 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13457 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13458 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13458 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13459 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13459 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13460 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13460 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13461 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13461 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13462 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13462 != Fp::invalid());
        host_args.at(0) = x13456;
        host_args.at(1) = x13457;
        host_args.at(2) = x13458;
        host_args.at(3) = x13459;
        host_args.at(4) = x13460;
        host_args.at(5) = x13461;
        host_args.at(6) = x13462;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13463 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13463 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13464 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13464 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13465 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13465 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13466 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13466 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13467 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13467 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13468 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13468 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13469 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13469 != Fp::invalid());
        host_args.at(0) = x13463;
        host_args.at(1) = x13464;
        host_args.at(2) = x13465;
        host_args.at(3) = x13466;
        host_args.at(4) = x13467;
        host_args.at(5) = x13468;
        host_args.at(6) = x13469;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13470 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13470 != Fp::invalid());
    if (x13470 != 0) {
      {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13471 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13471 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13472 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13472 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13473 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13473 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13474 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13474 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13475 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13475 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13476 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13476 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13477 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13477 != Fp::invalid());
        host_args.at(0) = x13471;
        host_args.at(1) = x13472;
        host_args.at(2) = x13473;
        host_args.at(3) = x13474;
        host_args.at(4) = x13475;
        host_args.at(5) = x13476;
        host_args.at(6) = x13477;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13478 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13478 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13479 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13479 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13480 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13480 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13481 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13481 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13482 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13482 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13483 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13483 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13484 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13484 != Fp::invalid());
        host_args.at(0) = x13478;
        host_args.at(1) = x13479;
        host_args.at(2) = x13480;
        host_args.at(3) = x13481;
        host_args.at(4) = x13482;
        host_args.at(5) = x13483;
        host_args.at(6) = x13484;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13485 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13485 != Fp::invalid());
    if (x13485 != 0) {
      {
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13486 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13486 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13487 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13487 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13488 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13488 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13489 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13489 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13490 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13491 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13491 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13492 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13492 != Fp::invalid());
        host_args.at(0) = x13486;
        host_args.at(1) = x13487;
        host_args.at(2) = x13488;
        host_args.at(3) = x13489;
        host_args.at(4) = x13490;
        host_args.at(5) = x13491;
        host_args.at(6) = x13492;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13493 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13493 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13494 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13494 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13495 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13495 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13496 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13496 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13497 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13497 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13498 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13498 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13499 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13499 != Fp::invalid());
        host_args.at(0) = x13493;
        host_args.at(1) = x13494;
        host_args.at(2) = x13495;
        host_args.at(3) = x13496;
        host_args.at(4) = x13497;
        host_args.at(5) = x13498;
        host_args.at(6) = x13499;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13500 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13500 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13501 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13502 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13502 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13503 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13504 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13504 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13505 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13506 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13506 != Fp::invalid());
        host_args.at(0) = x13500;
        host_args.at(1) = x13501;
        host_args.at(2) = x13502;
        host_args.at(3) = x13503;
        host_args.at(4) = x13504;
        host_args.at(5) = x13505;
        host_args.at(6) = x13506;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13507 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13508 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13509 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13509 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13510 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13510 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13511 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13511 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13512 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13512 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13513 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13513 != Fp::invalid());
        host_args.at(0) = x13507;
        host_args.at(1) = x13508;
        host_args.at(2) = x13509;
        host_args.at(3) = x13510;
        host_args.at(4) = x13511;
        host_args.at(5) = x13512;
        host_args.at(6) = x13513;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x13148;
}

} // namespace risc0::circuit::rv32im
// clang-format on
