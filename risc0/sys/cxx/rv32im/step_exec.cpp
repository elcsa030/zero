// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/ffpu.cpp":51:20)
  Fp x0(943718400);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":47:25)
  Fp x1(268435454);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":143:20)
  Fp x2(56361024);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":141:23)
  Fp x3(54525952);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":134:18)
  Fp x4(63);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":123:68)
  Fp x5(218806);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":109:32)
  Fp x6(218805);
  // loc("cirgen/components/u32.cpp":56:26)
  Fp x7(2013265801);
  // loc("cirgen/components/u32.cpp":49:17)
  Fp x8(16711680);
  // loc("cirgen/components/u32.cpp":48:17)
  Fp x9(65280);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
  Fp x10(2013265910);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
  Fp x11(62914560);
  // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
  Fp x12(56361023);
  // loc("cirgen/circuit/rv32im/sha.cpp":342:18)
  Fp x13(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
  Fp x14(56360975);
  // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
  Fp x15(56360967);
  // loc("cirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x16(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x17(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x18(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x19(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x20(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x21(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x22(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x23(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x24(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x25(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x26(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x27(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x28(512);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":54:24)
  Fp x29(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x30(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x31(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":115:25)
  Fp x32(50331662);
  // loc("cirgen/circuit/rv32im/ecall.cpp":38:45)
  Fp x33(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":36:43)
  Fp x34(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":154:49)
  Fp x35(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":149:21)
  Fp x36(115);
  // loc("cirgen/components/u32.cpp":238:19)
  Fp x37(131070);
  // loc("cirgen/components/u32.cpp":234:19)
  Fp x38(131072);
  // loc("cirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x39(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x40(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
  Fp x41(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:79)
  Fp x42(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:56)
  Fp x43(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
  Fp x44(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x45(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x46(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x47(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
  Fp x48(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x49(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
  Fp x50(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
  Fp x51(51);
  // loc("cirgen/components/u32.cpp":65:36)
  Fp x52(1996488705);
  // loc("cirgen/components/u32.cpp":65:28)
  Fp x53(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x54(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x55(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x56(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x57(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x58(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x59(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x60(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x61(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x62(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x63(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x64(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:32)
  Fp x65(16);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x66(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x67(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x68(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x69(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x70(128);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x71(14);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x72(13);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x73(12);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x74(11);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x75(10);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x76(9);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x77(8);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x78(7);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x79(6);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x80(5);
  // loc("cirgen/circuit/rv32im/body.cpp":31:21)
  Fp x81(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":18:43)
  Fp x82(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":17:32)
  Fp x83(3);
  // loc("cirgen/circuit/rv32im/body.cpp":14:29)
  Fp x84(4);
  // loc("./cirgen/components/u32.h":27:12)
  Fp x85(16777216);
  // loc("./cirgen/components/u32.h":26:12)
  Fp x86(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":56:18)
  Fp x87(15);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x88(56014263);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x89(56014262);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x90(56014261);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x91(56014260);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x92(56014259);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x93(56014258);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x94(56014257);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x95(56014256);
  // loc("cirgen/components/bytes.cpp":90:30)
  Fp x96(2005401601);
  // loc("cirgen/components/bytes.cpp":90:30)
  Fp x97(256);
  // loc("cirgen/components/bytes.cpp":89:26)
  Fp x98(255);
  // loc("cirgen/components/bytes.cpp":37:25)
  Fp x99(2);
  // loc("cirgen/components/bytes.cpp":34:29)
  Fp x100(254);
  // loc("cirgen/components/bytes.cpp":21:13)
  Fp x101(0);
  // loc("cirgen/circuit/rv32im/top.cpp":18:17)
  Fp x102(1);
  // loc("Top/Code/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":39:25))
  auto x103 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x103 != Fp::invalid());
  if (x103 != 0) {
    // loc("Top/Code/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/top.cpp":18:69))
    auto x104 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x104 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":18:17)
    auto x105 = x102 - x104;
    // loc("Top/Code/Mux/1/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x106 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x106 != Fp::invalid());
    if (x105 != 0) {
      // loc("cirgen/components/bytes.cpp":21:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":22:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
    // loc("cirgen/components/bytes.cpp":110:17)
    auto x107 = x102 - x105;
    if (x107 != 0) {
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x108 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x108 != Fp::invalid());
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x109 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x109 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x110 = x109 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x111 = (x110 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x112 = x102 - x111;
        if (x112 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x108);
            reg = x108;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x113 = x109 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x113);
            reg = x113;
          }
        }
        if (x111 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x114 = x108 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x114);
            reg = x114;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x115 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x115 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x116 = x115 - x108;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x117 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x117 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x118 = x117 - x109;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x119 = x116 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x120 = x116 * x119;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x120 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x121 = x118 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x122 = x116 * x121;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x122 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x123 = x118 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x124 = x119 * x123;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x124 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x125 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x125 != Fp::invalid());
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x126 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x126 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x127 = x126 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x128 = (x127 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x129 = x102 - x128;
      if (x129 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x125);
          reg = x125;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x130 = x126 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x130);
          reg = x130;
        }
      }
      if (x128 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x131 = x125 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x131);
          reg = x131;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x132 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x132 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x133 = x132 - x125;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x134 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x134 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x135 = x134 - x126;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x136 = x133 - x102;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x137 = x133 * x136;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x137 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x138 = x135 + x100;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x139 = x133 * x138;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x139 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x140 = x135 - x99;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x141 = x136 * x140;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x141 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x142 = x134 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x143 = (x142 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x144 = x102 - x143;
      if (x144 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x132);
          reg = x132;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x145 = x134 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x145);
          reg = x145;
        }
      }
      if (x143 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x146 = x132 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x146);
          reg = x146;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x147 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x147 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x148 = x147 - x132;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x149 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x149 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x150 = x149 - x134;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x151 = x148 - x102;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x152 = x148 * x151;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x152 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x153 = x150 + x100;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x154 = x148 * x153;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x154 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x155 = x150 - x99;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x156 = x151 * x155;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x156 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x157 = x149 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x158 = (x157 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x159 = x102 - x158;
      if (x159 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x147);
          reg = x147;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x160 = x149 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x160);
          reg = x160;
        }
      }
      if (x158 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x161 = x147 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x161);
          reg = x161;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x162 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x162 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x163 = x162 - x147;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x164 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x164 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x165 = x164 - x149;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x166 = x163 - x102;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x167 = x163 * x166;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x167 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x168 = x165 + x100;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x169 = x163 * x168;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x169 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x170 = x165 - x99;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x171 = x166 * x170;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x171 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x172 = x164 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x173 = (x172 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x174 = x102 - x173;
      if (x174 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x162);
          reg = x162;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x175 = x164 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x175);
          reg = x175;
        }
      }
      if (x173 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x176 = x162 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x176);
          reg = x176;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x177 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x177 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x178 = x177 - x162;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x179 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x179 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x180 = x179 - x164;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x181 = x178 - x102;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x182 = x178 * x181;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x182 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x183 = x180 + x100;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x184 = x178 * x183;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x184 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x185 = x180 - x99;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x186 = x181 * x185;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x186 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x187 = x179 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x188 = (x187 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x189 = x102 - x188;
      if (x189 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x177);
          reg = x177;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x190 = x179 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x190);
          reg = x190;
        }
      }
      if (x188 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x191 = x177 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x191);
          reg = x191;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x192 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x192 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x193 = x192 - x177;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x194 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x194 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x195 = x194 - x179;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x196 = x193 - x102;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x197 = x193 * x196;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x197 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x198 = x195 + x100;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x199 = x193 * x198;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x199 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x200 = x195 - x99;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x201 = x196 * x200;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x201 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x202 = x194 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x203 = (x202 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x204 = x102 - x203;
      if (x204 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x192);
          reg = x192;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x205 = x194 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x205);
          reg = x205;
        }
      }
      if (x203 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x206 = x192 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x206);
          reg = x206;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x207 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x207 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x208 = x207 - x192;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x209 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x209 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x210 = x209 - x194;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x211 = x208 - x102;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x212 = x208 * x211;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x212 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x213 = x210 + x100;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x214 = x208 * x213;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x214 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x215 = x210 - x99;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x216 = x211 * x215;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x216 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x217 = x209 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x218 = (x217 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x219 = x102 - x218;
      if (x219 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x207);
          reg = x207;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x220 = x209 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x220);
          reg = x220;
        }
      }
      if (x218 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x221 = x207 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x221);
          reg = x221;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x222 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x222 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x223 = x222 - x207;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x224 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x224 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x225 = x224 - x209;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x226 = x223 - x102;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x227 = x223 * x226;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x227 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x228 = x225 + x100;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x229 = x223 * x228;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x229 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x230 = x225 - x99;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x231 = x226 * x230;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x231 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    if (x106 != 0) {
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][50 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][51 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
    // loc("cirgen/components/bytes.cpp":123:16)
    auto x232 = x102 - x106;
    if (x232 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x233 = x224 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x234 = (x233 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x235 = x102 - x234;
        if (x235 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x222);
            reg = x222;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x236 = x224 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x236);
            reg = x236;
          }
        }
        if (x234 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x237 = x222 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x237);
            reg = x237;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x238 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x238 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x239 = x238 - x222;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x240 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x240 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x241 = x240 - x224;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x242 = x239 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x243 = x239 * x242;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x243 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x244 = x241 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x245 = x239 * x244;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x245 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x246 = x241 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x247 = x242 * x246;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x247 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x248 = x240 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x249 = (x248 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x250 = x102 - x249;
        if (x250 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x238);
            reg = x238;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x251 = x240 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x251);
            reg = x251;
          }
        }
        if (x249 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x252 = x238 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x252);
            reg = x252;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x253 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x253 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x254 = x253 - x238;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x255 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x255 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x256 = x255 - x240;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x257 = x254 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x258 = x254 * x257;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x258 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x259 = x256 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x260 = x254 * x259;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x260 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x261 = x256 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x262 = x257 * x261;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x262 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x263 = x255 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x264 = (x263 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x265 = x102 - x264;
        if (x265 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x253);
            reg = x253;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x266 = x255 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x266);
            reg = x266;
          }
        }
        if (x264 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x267 = x253 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x267);
            reg = x267;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x268 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x268 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x269 = x268 - x253;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x270 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x270 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x271 = x270 - x255;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x272 = x269 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x273 = x269 * x272;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x273 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x274 = x271 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x275 = x269 * x274;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x275 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x276 = x271 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x277 = x272 * x276;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x277 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x278 = x270 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x279 = (x278 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x280 = x102 - x279;
        if (x280 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x268);
            reg = x268;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x281 = x270 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x281);
            reg = x281;
          }
        }
        if (x279 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x282 = x268 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x282);
            reg = x282;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x283 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x283 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x284 = x283 - x268;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x285 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x285 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x286 = x285 - x270;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x287 = x284 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x288 = x284 * x287;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x288 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x289 = x286 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x290 = x284 * x289;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x290 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x291 = x286 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x292 = x287 * x291;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x292 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x293 = x285 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x294 = (x293 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x295 = x102 - x294;
        if (x295 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x283);
            reg = x283;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x296 = x285 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x296);
            reg = x296;
          }
        }
        if (x294 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x297 = x283 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x297);
            reg = x297;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x298 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x298 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x299 = x298 - x283;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x300 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x300 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x301 = x300 - x285;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x302 = x299 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x303 = x299 * x302;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x303 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x304 = x301 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x305 = x299 * x304;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x305 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x306 = x301 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x307 = x302 * x306;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x307 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x308 = x300 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x309 = (x308 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x310 = x102 - x309;
        if (x310 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x298);
            reg = x298;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x311 = x300 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x311);
            reg = x311;
          }
        }
        if (x309 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x312 = x298 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x312);
            reg = x312;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x313 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x313 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x314 = x313 - x298;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x315 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x315 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x316 = x315 - x300;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x317 = x314 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x318 = x314 * x317;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x318 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x319 = x316 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x320 = x314 * x319;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x320 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x321 = x316 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x322 = x317 * x321;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x322 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x323 = x315 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x324 = (x323 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x325 = x102 - x324;
        if (x325 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x313);
            reg = x313;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x326 = x315 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x326);
            reg = x326;
          }
        }
        if (x324 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x327 = x313 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x327);
            reg = x327;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x328 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x328 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x329 = x328 - x313;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x330 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x330 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x331 = x330 - x315;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x332 = x329 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x333 = x329 * x332;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x333 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x334 = x331 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x335 = x329 * x334;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x335 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x336 = x331 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x337 = x332 * x336;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x337 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x338 = x330 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x339 = (x338 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x340 = x102 - x339;
        if (x340 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x328);
            reg = x328;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x341 = x330 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x341);
            reg = x341;
          }
        }
        if (x339 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x342 = x328 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x342);
            reg = x342;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x343 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x343 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x344 = x343 - x328;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x345 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x345 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x346 = x345 - x330;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x347 = x344 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x348 = x344 * x347;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x348 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x349 = x346 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x350 = x344 * x349;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x350 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x351 = x346 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x352 = x347 * x351;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x352 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x353 = x345 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x354 = (x353 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x355 = x102 - x354;
        if (x355 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x343);
            reg = x343;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x356 = x345 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x356);
            reg = x356;
          }
        }
        if (x354 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x357 = x343 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x357);
            reg = x357;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x358 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x358 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x359 = x358 - x343;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x360 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x360 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x361 = x360 - x345;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x362 = x359 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x363 = x359 * x362;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x363 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x364 = x361 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x365 = x359 * x364;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x365 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x366 = x361 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x367 = x362 * x366;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x367 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x368 = x360 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x369 = (x368 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x370 = x102 - x369;
        if (x370 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x358);
            reg = x358;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x371 = x360 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x371);
            reg = x371;
          }
        }
        if (x369 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x372 = x358 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x372);
            reg = x372;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x373 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x373 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x374 = x373 - x358;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x375 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x375 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x376 = x375 - x360;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x377 = x374 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x378 = x374 * x377;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x378 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x379 = x376 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x380 = x374 * x379;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x380 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x381 = x376 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x382 = x377 * x381;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x382 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x383 = x375 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x384 = (x383 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x385 = x102 - x384;
        if (x385 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x373);
            reg = x373;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x386 = x375 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x386);
            reg = x386;
          }
        }
        if (x384 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x387 = x373 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x387);
            reg = x387;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x388 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x388 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x389 = x388 - x373;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x390 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x390 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x391 = x390 - x375;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x392 = x389 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x393 = x389 * x392;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x393 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x394 = x391 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x395 = x389 * x394;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x395 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x396 = x391 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x397 = x392 * x396;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x397 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x398 = x390 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x399 = (x398 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x400 = x102 - x399;
        if (x400 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x388);
            reg = x388;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x401 = x390 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x401);
            reg = x401;
          }
        }
        if (x399 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x402 = x388 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x402);
            reg = x402;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x403 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x403 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x404 = x403 - x388;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x405 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x405 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x406 = x405 - x390;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x407 = x404 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x408 = x404 * x407;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x408 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x409 = x406 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x410 = x404 * x409;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x410 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x411 = x406 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x412 = x407 * x411;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x412 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x413 = x405 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x414 = (x413 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x415 = x102 - x414;
        if (x415 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x403);
            reg = x403;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x416 = x405 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x416);
            reg = x416;
          }
        }
        if (x414 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x417 = x403 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x417);
            reg = x417;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x418 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x418 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x419 = x418 - x403;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x420 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x420 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x421 = x420 - x405;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x422 = x419 - x102;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x423 = x419 * x422;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x423 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x424 = x421 + x100;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x425 = x419 * x424;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x425 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x426 = x421 - x99;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x427 = x422 * x426;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x427 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
  }
  // loc("Top/Code/OneHot/hot[2](Reg)"("./cirgen/components/mux.h":39:25))
  auto x428 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x428 != Fp::invalid());
  if (x428 != 0) {
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x429 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x429 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x430 = Fp(x429.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x430);
        reg = x430;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x431 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x431 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x432 = x429 - x431;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x433 = x432 * x96;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][23 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x434 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x435 = Fp(x434.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x435);
        reg = x435;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x436 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x437 = x434 - x436;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x438 = x437 * x96;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x438);
      reg = x438;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x439 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x439 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x440 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x441 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x441 != Fp::invalid());
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x442 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x442 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x431);
      reg = x431;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x439);
      reg = x439;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    {
      host_args.at(0) = x442;
      host_args.at(1) = x431;
      host_args.at(2) = x439;
      host_args.at(3) = x436;
      host_args.at(4) = x440;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x443 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x443 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x444 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x444 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x445 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x445 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x446 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x446 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x442);
      reg = x442;
    }
    // loc("cirgen/components/ram.cpp":131:3)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x441);
      reg = x441;
    }
    // loc("cirgen/components/ram.cpp":132:3)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x443);
      reg = x443;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x444);
      reg = x444;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x445);
      reg = x445;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x446);
      reg = x446;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x447 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x447 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x448 = Fp(x447.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x448);
        reg = x448;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x449 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x449 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x450 = x447 - x449;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x451 = x450 * x96;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][27 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x451);
      reg = x451;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x452 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x452 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x453 = Fp(x452.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x453);
        reg = x453;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x454 = args[2][28 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x455 = x452 - x454;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x456 = x455 * x96;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][29 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x457 = args[2][27 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x458 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x458 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":37:44)
    auto x459 = x442 + x102;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x449);
      reg = x449;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x457);
      reg = x457;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x458);
      reg = x458;
    }
    {
      host_args.at(0) = x459;
      host_args.at(1) = x449;
      host_args.at(2) = x457;
      host_args.at(3) = x454;
      host_args.at(4) = x458;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x460 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x460 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x461 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x461 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x462 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x462 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x463 = args[2][121 * steps + ((cycle - 0) & mask)];
    assert(x463 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    {
      auto& reg = args[2][115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x459);
      reg = x459;
    }
    // loc("cirgen/components/ram.cpp":131:3)
    {
      auto& reg = args[2][116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x441);
      reg = x441;
    }
    // loc("cirgen/components/ram.cpp":132:3)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x460);
      reg = x460;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x461);
      reg = x461;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x462);
      reg = x462;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x463);
      reg = x463;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x464 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x464 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x465 = Fp(x464.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x465);
        reg = x465;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x466 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x466 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x467 = x464 - x466;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x468 = x467 * x96;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][31 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x469 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x469 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x470 = Fp(x469.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x470);
        reg = x470;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x471 = args[2][32 * steps + ((cycle - 0) & mask)];
    assert(x471 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x472 = x469 - x471;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x473 = x472 * x96;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][33 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x473);
      reg = x473;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x474 = args[2][31 * steps + ((cycle - 0) & mask)];
    assert(x474 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x475 = args[2][33 * steps + ((cycle - 0) & mask)];
    assert(x475 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":37:44)
    auto x476 = x442 + x99;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x466);
      reg = x466;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x474);
      reg = x474;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x471);
      reg = x471;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x475);
      reg = x475;
    }
    {
      host_args.at(0) = x476;
      host_args.at(1) = x466;
      host_args.at(2) = x474;
      host_args.at(3) = x471;
      host_args.at(4) = x475;
      host_args.at(5) = x101;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x477 = args[2][125 * steps + ((cycle - 0) & mask)];
    assert(x477 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x478 = args[2][126 * steps + ((cycle - 0) & mask)];
    assert(x478 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x479 = args[2][127 * steps + ((cycle - 0) & mask)];
    assert(x479 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x480 = args[2][128 * steps + ((cycle - 0) & mask)];
    assert(x480 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    {
      auto& reg = args[2][122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x476);
      reg = x476;
    }
    // loc("cirgen/components/ram.cpp":131:3)
    {
      auto& reg = args[2][123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x441);
      reg = x441;
    }
    // loc("cirgen/components/ram.cpp":132:3)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x477);
      reg = x477;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x478);
      reg = x478;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x479);
      reg = x479;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x480);
      reg = x480;
    }
  }
  // loc("Top/Code/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":39:25))
  auto x481 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x481 != Fp::invalid());
  if (x481 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x482 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x482 != Fp::invalid());
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x483 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x483 != Fp::invalid());
    if (x483 != 0) {
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x484 = args[1][4];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x485 = args[1][5];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x486 = args[1][6];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x487 = args[1][7];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x484);
        reg = x484;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x485);
        reg = x485;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x486);
        reg = x486;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x487);
        reg = x487;
      }
      {
        host_args.at(0) = x95;
        host_args.at(1) = x484;
        host_args.at(2) = x485;
        host_args.at(3) = x486;
        host_args.at(4) = x487;
        host_args.at(5) = x101;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x488 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x488 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x489 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x489 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x490 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x490 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x491 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x491 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x488);
        reg = x488;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x489);
        reg = x489;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x490);
        reg = x490;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x491);
        reg = x491;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x492 = args[1][8];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x493 = args[1][9];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x494 = args[1][10];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x495 = args[1][11];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x492);
        reg = x492;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x493);
        reg = x493;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x494);
        reg = x494;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x495);
        reg = x495;
      }
      {
        host_args.at(0) = x94;
        host_args.at(1) = x492;
        host_args.at(2) = x493;
        host_args.at(3) = x494;
        host_args.at(4) = x495;
        host_args.at(5) = x101;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x496 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x496 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x497 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x497 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x498 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x498 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x499 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x499 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x496);
        reg = x496;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x497);
        reg = x497;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x498);
        reg = x498;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x499);
        reg = x499;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x500 = args[1][12];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x501 = args[1][13];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x502 = args[1][14];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x503 = args[1][15];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x500);
        reg = x500;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x501);
        reg = x501;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x502);
        reg = x502;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x503);
        reg = x503;
      }
      {
        host_args.at(0) = x93;
        host_args.at(1) = x500;
        host_args.at(2) = x501;
        host_args.at(3) = x502;
        host_args.at(4) = x503;
        host_args.at(5) = x101;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x504 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x504 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x505 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x505 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x506 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x506 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x507 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x507 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x504);
        reg = x504;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x505);
        reg = x505;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x506);
        reg = x506;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x507);
        reg = x507;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x508 = args[1][16];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x509 = args[1][17];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x510 = args[1][18];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x511 = args[1][19];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x508);
        reg = x508;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x509);
        reg = x509;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x510);
        reg = x510;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x511);
        reg = x511;
      }
      {
        host_args.at(0) = x92;
        host_args.at(1) = x508;
        host_args.at(2) = x509;
        host_args.at(3) = x510;
        host_args.at(4) = x511;
        host_args.at(5) = x101;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x512 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x512 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x513 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x513 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x514 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x514 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x515 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x515 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x512);
        reg = x512;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x513);
        reg = x513;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x514);
        reg = x514;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x515);
        reg = x515;
      }
    }
    // loc("cirgen/circuit/rv32im/body.cpp":50:15)
    auto x516 = x102 - x483;
    if (x516 != 0) {
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x517 = args[1][20];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x518 = args[1][21];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x519 = args[1][22];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x520 = args[1][23];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x517);
        reg = x517;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x518);
        reg = x518;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x519);
        reg = x519;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x520);
        reg = x520;
      }
      {
        host_args.at(0) = x91;
        host_args.at(1) = x517;
        host_args.at(2) = x518;
        host_args.at(3) = x519;
        host_args.at(4) = x520;
        host_args.at(5) = x101;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x521 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x521 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x522 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x522 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x523 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x523 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x524 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x524 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x91);
        reg = x91;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x521);
        reg = x521;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x522);
        reg = x522;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x523);
        reg = x523;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x524);
        reg = x524;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x525 = args[1][24];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x526 = args[1][25];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x527 = args[1][26];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x528 = args[1][27];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x525);
        reg = x525;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x526);
        reg = x526;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x527);
        reg = x527;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x528);
        reg = x528;
      }
      {
        host_args.at(0) = x90;
        host_args.at(1) = x525;
        host_args.at(2) = x526;
        host_args.at(3) = x527;
        host_args.at(4) = x528;
        host_args.at(5) = x101;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x529 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x529 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x530 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x530 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x531 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x531 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x532 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x532 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x90);
        reg = x90;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x529);
        reg = x529;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x530);
        reg = x530;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x531);
        reg = x531;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x532);
        reg = x532;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x533 = args[1][28];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x534 = args[1][29];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x535 = args[1][30];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x536 = args[1][31];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x533);
        reg = x533;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x534);
        reg = x534;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x535);
        reg = x535;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x536);
        reg = x536;
      }
      {
        host_args.at(0) = x89;
        host_args.at(1) = x533;
        host_args.at(2) = x534;
        host_args.at(3) = x535;
        host_args.at(4) = x536;
        host_args.at(5) = x101;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x537 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x537 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x538 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x538 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x539 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x539 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x540 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x540 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x89);
        reg = x89;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x537);
        reg = x537;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x538);
        reg = x538;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x539);
        reg = x539;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x540);
        reg = x540;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x541 = args[1][32];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x542 = args[1][33];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x543 = args[1][34];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x544 = args[1][35];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x541);
        reg = x541;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x542);
        reg = x542;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x543);
        reg = x543;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x544);
        reg = x544;
      }
      {
        host_args.at(0) = x88;
        host_args.at(1) = x541;
        host_args.at(2) = x542;
        host_args.at(3) = x543;
        host_args.at(4) = x544;
        host_args.at(5) = x101;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x545 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x545 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x546 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x546 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x547 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x547 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x548 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x548 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x88);
        reg = x88;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x545);
        reg = x545;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x546);
        reg = x546;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x547);
        reg = x547;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x548);
        reg = x548;
      }
    }
    // loc("cirgen/circuit/rv32im/body.cpp":56:3)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x87);
      reg = x87;
    }
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x549 = args[1][0];
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x550 = args[1][1];
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x551 = args[1][2];
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x552 = args[1][3];
    // loc("./cirgen/components/u32.h":25:12)
    auto x553 = x550 * x97;
    // loc("./cirgen/components/u32.h":24:12)
    auto x554 = x549 + x553;
    // loc("./cirgen/components/u32.h":26:12)
    auto x555 = x551 * x86;
    // loc("./cirgen/components/u32.h":24:12)
    auto x556 = x554 + x555;
    // loc("./cirgen/components/u32.h":27:12)
    auto x557 = x552 * x85;
    // loc("./cirgen/components/u32.h":24:12)
    auto x558 = x556 + x557;
    // loc("cirgen/circuit/rv32im/body.cpp":14:23)
    auto x559 = x558 + x84;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x560 = Fp(x559.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x560);
        reg = x560;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x561 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x561 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x562 = x559 - x561;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x563 = x562 * x96;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x564 = Fp(x563.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x564);
        reg = x564;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x565 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x565 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x566 = x563 - x565;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x567 = x566 * x96;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x568 = Fp(x567.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x568);
        reg = x568;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x569 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x569 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x570 = x567 - x569;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x571 = x570 * x96;
    {
      // loc("cirgen/circuit/rv32im/body.cpp":17:26)
      auto x572 = Fp(x571.asUInt32() & x83.asUInt32());
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x572);
        reg = x572;
      }
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x573 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x573 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":18:18)
    auto x574 = x571 - x573;
    // loc("cirgen/circuit/rv32im/body.cpp":18:17)
    auto x575 = x574 * x82;
    // loc("./cirgen/components/bits.h":61:23)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x575);
      reg = x575;
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x576 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x576 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":22:23)
    auto x577 = x102 - x576;
    // loc("cirgen/circuit/rv32im/body.cpp":22:15)
    auto x578 = x576 * x577;
    // loc("cirgen/circuit/rv32im/body.cpp":22:3)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x578);
      reg = x578;
    }
    // loc("Top/Mux/3/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x579 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x579 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":23:17)
    auto x580 = x99 - x576;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    auto x581 = x579 * x580;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    if (x581 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x582 = x565 * x97;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x583 = x561 + x582;
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x584 = x569 * x86;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x585 = x583 + x584;
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x586 = x573 * x85;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x587 = x585 + x586;
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x588 = x576 * x81;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x589 = x587 + x588;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x590 = x589 - x84;
    host_args.at(0) = x482;
    host_args.at(1) = x590;
    host(ctx, "log", "%u: Reset: PC = 0x%x", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":39:25))
  auto x591 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x591 != Fp::invalid());
  if (x591 != 0) {
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x592 = args[2][10 * steps + ((cycle - 1) & mask)];
    assert(x592 != Fp::invalid());
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x593 = args[2][11 * steps + ((cycle - 1) & mask)];
    assert(x593 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x594 = x593 * x97;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x595 = x592 + x594;
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x596 = args[2][12 * steps + ((cycle - 1) & mask)];
    assert(x596 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x597 = x596 * x86;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x598 = x595 + x597;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x599 = args[2][72 * steps + ((cycle - 1) & mask)];
    assert(x599 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x600 = x599 * x85;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x601 = x598 + x600;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x602 = args[2][73 * steps + ((cycle - 1) & mask)];
    assert(x602 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x603 = x602 * x81;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x604 = x601 + x603;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x605 = x604 - x84;
    {
      // loc("Top/Mux/4/Reg"("cirgen/circuit/rv32im/body.cpp":68:45))
      auto x606 = args[2][93 * steps + ((cycle - 1) & mask)];
      assert(x606 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":69:24)
      auto x607 = x606 - x87;
      // loc("cirgen/circuit/rv32im/body.cpp":69:24)
      auto x608 = (x607 == 0) ? Fp(1) : Fp(0);
      if (x608 != 0) {
        // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x609 = args[0][0 * steps + ((cycle - 0) & mask)];
        assert(x609 != Fp::invalid());
        host_args.at(0) = x609;
        host_args.at(1) = x605;
        host(ctx, "log", "%u: BODY pc: 0x%x", host_args.data(), 2, host_outs.data(), 0);
        host_args.at(0) = x605;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x605;
        host(ctx, "getMajor", "", host_args.data(), 1, host_outs.data(), 1);
        auto x610 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x611 = (x610 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x611);
            reg = x611;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x612 = x610 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x613 = (x612 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x613);
            reg = x613;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x614 = x610 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x615 = (x614 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x615);
            reg = x615;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x616 = x610 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x617 = (x616 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x617);
            reg = x617;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x618 = x610 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x619 = (x618 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x619);
            reg = x619;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x620 = x610 - x80;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x621 = (x620 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x621);
            reg = x621;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x622 = x610 - x79;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x623 = (x622 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x623);
            reg = x623;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x624 = x610 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x625 = (x624 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x625);
            reg = x625;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x626 = x610 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x627 = (x626 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x627);
            reg = x627;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x628 = x610 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x629 = (x628 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x629);
            reg = x629;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x630 = x610 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x631 = (x630 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x631);
            reg = x631;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x632 = x610 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x633 = (x632 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x633);
            reg = x633;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x634 = x610 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x635 = (x634 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x635);
            reg = x635;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x636 = x610 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x637 = (x636 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x637);
            reg = x637;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x638 = x610 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x639 = (x638 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x639);
            reg = x639;
          }
        }
        // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x640 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x640 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x641 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x641 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x642 = x641 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x643 = x640 + x642;
        // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x644 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x644 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x645 = x644 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x646 = x643 + x645;
        // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x647 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x647 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x648 = x647 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x649 = x646 + x648;
        // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x650 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x650 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x651 = x650 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x652 = x649 + x651;
        // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x653 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x653 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x654 = x653 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x655 = x652 + x654;
        // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x656 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x656 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x657 = x656 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x658 = x655 + x657;
        // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x659 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x659 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x660 = x659 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x661 = x658 + x660;
        // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x662 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x662 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x663 = x662 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x664 = x661 + x663;
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x665 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x665 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x666 = x665 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x667 = x664 + x666;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x668 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x668 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x669 = x668 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x670 = x667 + x669;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x671 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x671 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x672 = x671 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x673 = x670 + x672;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x674 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x674 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x675 = x674 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x676 = x673 + x675;
        // loc("Top/Mux/4/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x677 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x677 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x678 = x677 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x679 = x676 + x678;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x680 = x679 - x610;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x680 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":76:20)
      auto x681 = x102 - x608;
      if (x681 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":77:48)
        auto x682 = x606 - x77;
        // loc("cirgen/circuit/rv32im/body.cpp":77:48)
        auto x683 = (x682 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":77:48)
        auto x684 = x102 - x683;
        if (x684 != 0) {
          // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x685 = args[0][0 * steps + ((cycle - 0) & mask)];
          assert(x685 != Fp::invalid());
          host_args.at(0) = x685;
          host_args.at(1) = x605;
          host_args.at(2) = x606;
          host(ctx, "log", "%u: BODY pc: 0x%x, major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x686 = (x606 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x686);
            reg = x686;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x687 = x606 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x688 = (x687 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x688);
            reg = x688;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x689 = x606 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x690 = (x689 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x690);
            reg = x690;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x691 = x606 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x692 = (x691 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x692);
            reg = x692;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x693 = x606 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x694 = (x693 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x694);
            reg = x694;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x695 = x606 - x80;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x696 = (x695 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x696);
            reg = x696;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x697 = x606 - x79;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x698 = (x697 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x698);
            reg = x698;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x699 = x606 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x700 = (x699 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x700);
            reg = x700;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x683);
            reg = x683;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x701 = x606 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x702 = (x701 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x702);
            reg = x702;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x703 = x606 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x704 = (x703 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x704);
            reg = x704;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x705 = x606 - x74;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x706 = (x705 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x706);
            reg = x706;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x707 = x606 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x708 = (x707 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x708);
            reg = x708;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x709 = x606 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x710 = (x709 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x710);
            reg = x710;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x711 = x606 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x712 = (x711 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x712);
            reg = x712;
          }
        }
        // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x713 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x713 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x714 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x714 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x715 = x714 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x716 = x713 + x715;
        // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x717 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x717 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x718 = x717 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x719 = x716 + x718;
        // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x720 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x720 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x721 = x720 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x722 = x719 + x721;
        // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x723 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x723 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x724 = x723 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x725 = x722 + x724;
        // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x726 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x726 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x727 = x726 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x728 = x725 + x727;
        // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x729 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x729 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x730 = x729 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x731 = x728 + x730;
        // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x732 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x732 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x733 = x732 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x734 = x731 + x733;
        // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x735 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x735 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x736 = x735 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x737 = x734 + x736;
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x738 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x738 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x739 = x738 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x740 = x737 + x739;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x741 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x741 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x742 = x741 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x743 = x740 + x742;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x744 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x744 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x745 = x744 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x746 = x743 + x745;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x747 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x747 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x748 = x747 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x749 = x746 + x748;
        // loc("Top/Mux/4/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x750 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x750 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x751 = x750 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x752 = x749 + x751;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x753 = x752 - x606;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x753 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":39:25))
    auto x754 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x754 != Fp::invalid());
    if (x754 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x755 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x755 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x756 = x605 * x82;
      {
        host_args.at(0) = x756;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x757 = host_outs.at(0);
        auto x758 = host_outs.at(1);
        auto x759 = host_outs.at(2);
        auto x760 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x757);
          reg = x757;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x758);
          reg = x758;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x759);
          reg = x759;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x760);
          reg = x760;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x761 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x762 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x763 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x764 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x764 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x756);
        reg = x756;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x755);
        reg = x755;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x761);
        reg = x761;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x762);
        reg = x762;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x763);
        reg = x763;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x764);
        reg = x764;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x765 = Fp(x764.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x766 = x765 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x766);
          reg = x766;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x767 = Fp(x764.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x768 = x767 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x768);
          reg = x768;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x769 = Fp(x764.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x770 = x769 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x770);
          reg = x770;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x771 = Fp(x764.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x772 = x771 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x772);
          reg = x772;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x773 = Fp(x764.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x774 = x773 * x62;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x774);
          reg = x774;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x775 = Fp(x764.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x775);
          reg = x775;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x776 = Fp(x763.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x777 = x776 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x777);
          reg = x777;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x778 = Fp(x763.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x779 = x778 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x779);
          reg = x779;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x780 = Fp(x763.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x781 = x780 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x781);
          reg = x781;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x782 = Fp(x763.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x783 = x782 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x783);
          reg = x783;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x784 = Fp(x763.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x784);
          reg = x784;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x785 = Fp(x762.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x786 = x785 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x786);
          reg = x786;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x787 = Fp(x762.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x788 = x787 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x788);
          reg = x788;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x789 = Fp(x762.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x790 = x789 * x64;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x790);
          reg = x790;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x791 = Fp(x762.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x792 = x791 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x792);
          reg = x792;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x793 = Fp(x762.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x793);
          reg = x793;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x794 = Fp(x761.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x795 = x794 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x795);
          reg = x795;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x796 = Fp(x761.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x796);
          reg = x796;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x797 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x797 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x798 = x797 * x61;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x799 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x799 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x800 = x799 * x65;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x801 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x801 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x802 = x801 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x803 = x800 + x802;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x804 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x804 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x805 = x804 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x806 = x803 + x805;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x807 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x807 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x808 = x806 + x807;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x809 = x798 + x808;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x810 = x809 * x99;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x811 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x811 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x812 = x810 + x811;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x813 = x764 - x812;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x813 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x814 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x814 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x815 = x814 * x77;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x816 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x816 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x817 = x816 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x818 = x815 + x817;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x819 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x819 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x820 = x818 + x819;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x821 = x820 * x65;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x822 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x822 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x823 = x822 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x824 = x821 + x823;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x825 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x825 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x826 = x824 + x825;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x827 = x763 - x826;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x827 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x828 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x828 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x829 = x828 * x70;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x830 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x830 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x831 = x830 * x84;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x832 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x832 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x833 = x831 + x832;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x834 = x833 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x835 = x829 + x834;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x836 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x836 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x837 = x836 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x838 = x835 + x837;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x839 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x839 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x840 = x838 + x839;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x841 = x762 - x840;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x841 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x842 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x842 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x843 = x842 * x70;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x844 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x844 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x845 = x843 + x844;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x846 = x761 - x845;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x846 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x761;
        host_args.at(1) = x762;
        host_args.at(2) = x763;
        host_args.at(3) = x764;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x847 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x848 = (x847 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x848);
            reg = x848;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x849 = x847 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x850 = (x849 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x850);
            reg = x850;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x851 = x847 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x852 = (x851 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x852);
            reg = x852;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x853 = x847 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x854 = (x853 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x854);
            reg = x854;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x855 = x847 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x856 = (x855 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x856);
            reg = x856;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x857 = x847 - x80;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x858 = (x857 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x858);
            reg = x858;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x859 = x847 - x79;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x860 = (x859 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x860);
            reg = x860;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x861 = x847 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x862 = (x861 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x862);
            reg = x862;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x863 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x863 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x864 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x864 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x865 = x864 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x866 = x863 + x865;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x867 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x867 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x868 = x867 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x869 = x866 + x868;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x870 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x870 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x871 = x870 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x872 = x869 + x871;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x873 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x873 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x874 = x873 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x875 = x872 + x874;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x876 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x876 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x877 = x876 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x878 = x875 + x877;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x879 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x879 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x880 = x879 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x881 = x878 + x880;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x882 = x881 - x847;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x882 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x883 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x883 != Fp::invalid());
        if (x883 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
        auto x884 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x884 != Fp::invalid());
        if (x884 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x885 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x885 != Fp::invalid());
        if (x885 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x56);
            reg = x56;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x886 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x886 != Fp::invalid());
        if (x886 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
        auto x887 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x887 != Fp::invalid());
        if (x887 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x888 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x888 != Fp::invalid());
        if (x888 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x889 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x889 != Fp::invalid());
        if (x889 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
        auto x890 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x890 != Fp::invalid());
        if (x890 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x891 = x804 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x892 = x807 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x893 = x891 + x892;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x894 = x811 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x895 = x894 + x820;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x896 = x893 + x895;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x897 = x797 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x898 = x799 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x899 = x897 + x898;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x900 = x899 + x801;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x901 = x797 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x896);
            reg = x896;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x900);
            reg = x900;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x901);
            reg = x901;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x901);
            reg = x901;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x902 = x822 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x903 = x825 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x904 = x902 + x903;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x905 = x904 + x828;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x906 = x905 + x54;
      {
        host_args.at(0) = x906;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x907 = host_outs.at(0);
        auto x908 = host_outs.at(1);
        auto x909 = host_outs.at(2);
        auto x910 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x907);
          reg = x907;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x908);
          reg = x908;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x909);
          reg = x909;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x910);
          reg = x910;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x911 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x912 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x913 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x914 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x914 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x906);
        reg = x906;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x755);
        reg = x755;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x911);
        reg = x911;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x912);
        reg = x912;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x913);
        reg = x913;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x914);
        reg = x914;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x915 = x811 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x916 = x915 + x820;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x917 = x916 + x54;
      {
        host_args.at(0) = x917;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x918 = host_outs.at(0);
        auto x919 = host_outs.at(1);
        auto x920 = host_outs.at(2);
        auto x921 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x918);
          reg = x918;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x919);
          reg = x919;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x920);
          reg = x920;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x921);
          reg = x921;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x922 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x922 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x923 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x923 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x924 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x924 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x925 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x925 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x917);
        reg = x917;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x755);
        reg = x755;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x922);
        reg = x922;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x923);
        reg = x923;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x924);
        reg = x924;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x925);
        reg = x925;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x926 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x926 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x927 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x927 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x928 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x928 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x929 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x929 != Fp::invalid());
      host_args.at(0) = x926;
      host_args.at(1) = x927;
      host_args.at(2) = x928;
      host_args.at(3) = x929;
      host_args.at(4) = x905;
      host_args.at(5) = x911;
      host_args.at(6) = x912;
      host_args.at(7) = x913;
      host_args.at(8) = x914;
      host_args.at(9) = x916;
      host_args.at(10) = x922;
      host_args.at(11) = x923;
      host_args.at(12) = x924;
      host_args.at(13) = x925;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x930 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x930 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x931 = x102 - x930;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x932 = x931 * x911;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x933 = x931 * x912;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x934 = x931 * x913;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x935 = x931 * x914;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x936 = x602 * x84;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x937 = x599 + x936;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x938 = x592 - x84;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x939 = x930 * x938;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x940 = x930 * x593;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x941 = x930 * x596;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x942 = x930 * x937;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x943 = x932 + x939;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x944 = x933 + x940;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x945 = x934 + x941;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x946 = x935 + x942;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x947 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x947 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x948 = x102 - x947;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x949 = x948 * x922;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x950 = x948 * x923;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x951 = x948 * x924;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x952 = x948 * x925;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x953 = x947 * x926;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x954 = x947 * x927;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x955 = x947 * x928;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x956 = x947 * x929;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x957 = x949 + x953;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x958 = x950 + x954;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x959 = x951 + x955;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x960 = x952 + x956;
      host_args.at(0) = x943;
      host_args.at(1) = x944;
      host_args.at(2) = x945;
      host_args.at(3) = x946;
      host_args.at(4) = x957;
      host_args.at(5) = x958;
      host_args.at(6) = x959;
      host_args.at(7) = x960;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x961 = Fp(x946.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x962 = x961 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x962);
          reg = x962;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x963 = Fp(x946.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x964 = x963 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x964);
          reg = x964;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x965 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x965 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x966 = x965 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x967 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x967 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x968 = x967 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x969 = x966 + x968;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x970 = x946 - x969;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x970 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x971 = Fp(x960.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x972 = x971 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x972);
          reg = x972;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x973 = Fp(x960.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x974 = x973 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x974);
          reg = x974;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x975 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x975 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x976 = x975 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x977 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x977 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x978 = x977 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x979 = x976 + x978;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x980 = x960 - x979;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x980 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x957);
        reg = x957;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x958);
        reg = x958;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x959);
        reg = x959;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][195 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x960);
        reg = x960;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x981 = Fp(x943.asUInt32() & x957.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x982 = Fp(x944.asUInt32() & x958.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x983 = Fp(x945.asUInt32() & x959.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x984 = Fp(x946.asUInt32() & x960.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x981);
          reg = x981;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x982);
          reg = x982;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x983);
          reg = x983;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x984);
          reg = x984;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x985 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x985 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x986 = x985 * x943;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x987 = x985 * x944;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x988 = x985 * x945;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x989 = x985 * x946;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x990 = x986 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x991 = x987 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x992 = x988 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x993 = x989 + x98;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x994 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x994 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x995 = x994 * x957;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x996 = x994 * x958;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x997 = x994 * x959;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x998 = x994 * x960;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x999 = x990 + x995;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1000 = x991 + x996;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1001 = x992 + x997;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1002 = x993 + x998;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1003 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x1003 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1004 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1004 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1005 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1005 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1006 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1006 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1007 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1007 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1008 = x1003 * x1004;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1009 = x1003 * x1005;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1010 = x1003 * x1006;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1011 = x1003 * x1007;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1012 = x999 + x1008;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1013 = x1000 + x1009;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1014 = x1001 + x1010;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1015 = x1002 + x1011;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1016 = x1013 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1017 = x1012 + x1016;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1018 = Fp(x1017.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1018);
          reg = x1018;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1019 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1019 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1020 = x1017 - x1019;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1021 = x1020 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1022 = Fp(x1021.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1022);
          reg = x1022;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1023 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1023 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1024 = x1021 - x1023;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1025 = x1024 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1025);
        reg = x1025;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1026 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1026 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1027 = x1026 + x1014;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1028 = x1015 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1029 = x1027 + x1028;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1030 = Fp(x1029.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1030);
          reg = x1030;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1031 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1031 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1032 = x1029 - x1031;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1033 = x1032 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1034 = Fp(x1033.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1034);
          reg = x1034;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1035 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1035 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1036 = x1033 - x1035;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1037 = x1036 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1037);
        reg = x1037;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1038 = Fp(x1035.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1039 = x1038 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1039);
          reg = x1039;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1040 = Fp(x1035.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1041 = x1040 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1041);
          reg = x1041;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1042 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1042 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1043 = x1042 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1044 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1044 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1045 = x1044 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1046 = x1043 + x1045;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1047 = x1035 - x1046;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1047 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1048 = x102 - x975;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1049 = x965 * x1048;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1050 = x102 - x1042;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1051 = x1049 * x1050;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1052 = x102 - x965;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1053 = x1052 * x975;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1054 = x1053 * x1042;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1055 = x1051 + x1054;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1055);
        reg = x1055;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1056 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1056 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1057 = x1056 + x1042;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1058 = x1056 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1059 = x1058 * x1042;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1060 = x1057 - x1059;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1060);
        reg = x1060;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1061 = x1023 * x97;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1062 = x1019 + x1061;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1063 = (x1062 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1063);
          reg = x1063;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1064 = inv(x1062);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1064);
          reg = x1064;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1065 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x1065 != Fp::invalid());
      if (x1065 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1062 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1066 = x102 - x1065;
      if (x1066 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1067 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x1067 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1068 = x1062 * x1067;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1069 = x1068 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1069 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1070 = x1035 * x97;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1071 = x1031 + x1070;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1072 = x1066 * x86;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1073 = x1071 + x1072;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1074 = (x1073 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1074);
          reg = x1074;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1075 = inv(x1073);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1075);
          reg = x1075;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1076 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1076 != Fp::invalid());
      if (x1076 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1073 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1077 = x102 - x1076;
      if (x1077 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1078 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x1078 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1079 = x1073 * x1078;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1080 = x1079 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1080 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1081 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1081 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1082 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1082 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1083 = x102 - x1082;
      host_args.at(0) = x1019;
      host_args.at(1) = x1023;
      host_args.at(2) = x1031;
      host_args.at(3) = x1035;
      host_args.at(4) = x1076;
      host_args.at(5) = x1081;
      host_args.at(6) = x1083;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1084 = x836 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1085 = x839 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1086 = x1084 + x1085;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1087 = x1086 + x842;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1088 = (x1087 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1088);
          reg = x1088;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1089 = inv(x1087);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1089);
          reg = x1089;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1090 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x1090 != Fp::invalid());
      if (x1090 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1087 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1091 = x102 - x1090;
      if (x1091 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1092 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x1092 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1093 = x1087 * x1092;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1094 = x1093 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1094 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1095 = x605 + x84;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1096 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1096 != Fp::invalid());
      if (x1096 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1097 = x844 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1097 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x833 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x809 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1098 = x1095 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1099 = Fp(x1098.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1099);
            reg = x1099;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1100 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1100 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1101 = x1098 - x1100;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1102 = x1101 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1103 = Fp(x1102.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1103);
            reg = x1103;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1104 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1104 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1105 = x1102 - x1104;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1106 = x1105 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1107 = Fp(x1106.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1107);
            reg = x1107;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1108 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1108 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1109 = x1106 - x1108;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1110 = x1109 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1111 = Fp(x1110.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1111);
            reg = x1111;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1112 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1112 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1113 = x1110 - x1112;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1114 = x1113 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1114);
          reg = x1114;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1115 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1115 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1116 = x102 - x1115;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1117 = x1115 * x1116;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1117);
          reg = x1117;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1118 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1118 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1119 = x99 - x1115;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1120 = x1118 * x1119;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1120 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1121 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1121 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1121);
          reg = x1121;
        }
        if (x1091 != 0) {
          host_args.at(0) = x1087;
          host_args.at(1) = x1019;
          host_args.at(2) = x1023;
          host_args.at(3) = x1031;
          host_args.at(4) = x1035;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1122 = x1087 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1031);
            reg = x1031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1035);
            reg = x1035;
          }
          {
            host_args.at(0) = x1122;
            host_args.at(1) = x1019;
            host_args.at(2) = x1023;
            host_args.at(3) = x1031;
            host_args.at(4) = x1035;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1123 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1123 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1124 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1124 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1125 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1125 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1126 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1126 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1122);
            reg = x1122;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x755);
            reg = x755;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1123);
            reg = x1123;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1124);
            reg = x1124;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1125);
            reg = x1125;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1126);
            reg = x1126;
          }
        }
        if (x1090 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
      auto x1127 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1127 != Fp::invalid());
      if (x1127 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1128 = x844 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1128 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x833 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1129 = x809 - x67;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1129 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1130 = x1095 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1131 = Fp(x1130.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1131);
            reg = x1131;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1132 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1132 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1133 = x1130 - x1132;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1134 = x1133 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1135 = Fp(x1134.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1135);
            reg = x1135;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1136 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1136 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1137 = x1134 - x1136;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1138 = x1137 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1139 = Fp(x1138.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1139);
            reg = x1139;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1140 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1140 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1141 = x1138 - x1140;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1142 = x1141 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1143 = Fp(x1142.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1143);
            reg = x1143;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1144 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1144 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1145 = x1142 - x1144;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1146 = x1145 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1146);
          reg = x1146;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1147 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1147 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1148 = x102 - x1147;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1149 = x1147 * x1148;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1149);
          reg = x1149;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1150 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1150 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1151 = x99 - x1147;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1152 = x1150 * x1151;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1152 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1153 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1153 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1153);
          reg = x1153;
        }
        if (x1091 != 0) {
          host_args.at(0) = x1087;
          host_args.at(1) = x1019;
          host_args.at(2) = x1023;
          host_args.at(3) = x1031;
          host_args.at(4) = x1035;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
          auto x1154 = x1087 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1031);
            reg = x1031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1035);
            reg = x1035;
          }
          {
            host_args.at(0) = x1154;
            host_args.at(1) = x1019;
            host_args.at(2) = x1023;
            host_args.at(3) = x1031;
            host_args.at(4) = x1035;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1155 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1155 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1156 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1156 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1157 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1157 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1158 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1158 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1154);
            reg = x1154;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x755);
            reg = x755;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1155);
            reg = x1155;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1156);
            reg = x1156;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1157);
            reg = x1157;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1158);
            reg = x1158;
          }
        }
        if (x1090 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1159 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1159 != Fp::invalid());
      if (x1159 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1160 = x844 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1160 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1161 = x833 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1161 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x809 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x56);
          reg = x56;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1162 = x1095 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1163 = Fp(x1162.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1163);
            reg = x1163;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1164 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1164 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1165 = x1162 - x1164;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1166 = x1165 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1167 = Fp(x1166.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1167);
            reg = x1167;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1168 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1168 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1169 = x1166 - x1168;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1170 = x1169 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1171 = Fp(x1170.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1171);
            reg = x1171;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1172 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1172 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1173 = x1170 - x1172;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1174 = x1173 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1175 = Fp(x1174.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1175);
            reg = x1175;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1176 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1176 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1177 = x1174 - x1176;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1178 = x1177 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1178);
          reg = x1178;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1179 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1179 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1180 = x102 - x1179;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1181 = x1179 * x1180;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1181);
          reg = x1181;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1182 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1182 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1183 = x99 - x1179;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1184 = x1182 * x1183;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1184 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1185 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1185 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1185);
          reg = x1185;
        }
        if (x1091 != 0) {
          host_args.at(0) = x1087;
          host_args.at(1) = x1019;
          host_args.at(2) = x1023;
          host_args.at(3) = x1031;
          host_args.at(4) = x1035;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1186 = x1087 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1031);
            reg = x1031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1035);
            reg = x1035;
          }
          {
            host_args.at(0) = x1186;
            host_args.at(1) = x1019;
            host_args.at(2) = x1023;
            host_args.at(3) = x1031;
            host_args.at(4) = x1035;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1187 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1187 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1188 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1188 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1189 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1189 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1190 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1190 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1186);
            reg = x1186;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x755);
            reg = x755;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1187);
            reg = x1187;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1188);
            reg = x1188;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1189);
            reg = x1189;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1190);
            reg = x1190;
          }
        }
        if (x1090 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1191 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1191 != Fp::invalid());
      if (x1191 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1192 = x844 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1192 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1193 = x833 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1193 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x809 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1194 = x1095 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1195 = Fp(x1194.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1195);
            reg = x1195;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1196 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1196 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1197 = x1194 - x1196;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1198 = x1197 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1199 = Fp(x1198.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1199);
            reg = x1199;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1200 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1200 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1201 = x1198 - x1200;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1202 = x1201 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1203 = Fp(x1202.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1203);
            reg = x1203;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1204 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1204 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1205 = x1202 - x1204;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1206 = x1205 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1207 = Fp(x1206.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1207);
            reg = x1207;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1208 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1208 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1209 = x1206 - x1208;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1210 = x1209 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1210);
          reg = x1210;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1211 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1211 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1212 = x102 - x1211;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1213 = x1211 * x1212;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1213);
          reg = x1213;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1214 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1214 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1215 = x99 - x1211;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1216 = x1214 * x1215;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1216 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1217 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1217 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1217);
          reg = x1217;
        }
        if (x1091 != 0) {
          host_args.at(0) = x1087;
          host_args.at(1) = x1019;
          host_args.at(2) = x1023;
          host_args.at(3) = x1031;
          host_args.at(4) = x1035;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1218 = x1087 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1031);
            reg = x1031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1035);
            reg = x1035;
          }
          {
            host_args.at(0) = x1218;
            host_args.at(1) = x1019;
            host_args.at(2) = x1023;
            host_args.at(3) = x1031;
            host_args.at(4) = x1035;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1219 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1219 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1220 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1220 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1221 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1221 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1222 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1222 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1218);
            reg = x1218;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x755);
            reg = x755;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1219);
            reg = x1219;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1220);
            reg = x1220;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1221);
            reg = x1221;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1222);
            reg = x1222;
          }
        }
        if (x1090 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
      auto x1223 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1223 != Fp::invalid());
      if (x1223 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1224 = x844 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1224 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1225 = x833 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1225 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x809 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1226 = x1095 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1227 = Fp(x1226.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1227);
            reg = x1227;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1228 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1228 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1229 = x1226 - x1228;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1230 = x1229 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1231 = Fp(x1230.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1231);
            reg = x1231;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1232 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1232 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1233 = x1230 - x1232;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1234 = x1233 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1235 = Fp(x1234.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1235);
            reg = x1235;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1236 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1236 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1237 = x1234 - x1236;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1238 = x1237 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1239 = Fp(x1238.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1239);
            reg = x1239;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1240 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1240 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1241 = x1238 - x1240;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1242 = x1241 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1242);
          reg = x1242;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1243 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1243 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1244 = x102 - x1243;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1245 = x1243 * x1244;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1245);
          reg = x1245;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1246 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1246 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1247 = x99 - x1243;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1248 = x1246 * x1247;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1248 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1249 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1249 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1249);
          reg = x1249;
        }
        if (x1091 != 0) {
          host_args.at(0) = x1087;
          host_args.at(1) = x1019;
          host_args.at(2) = x1023;
          host_args.at(3) = x1031;
          host_args.at(4) = x1035;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
          auto x1250 = x1087 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1031);
            reg = x1031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1035);
            reg = x1035;
          }
          {
            host_args.at(0) = x1250;
            host_args.at(1) = x1019;
            host_args.at(2) = x1023;
            host_args.at(3) = x1031;
            host_args.at(4) = x1035;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1251 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1251 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1252 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1252 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1253 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1253 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1254 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1254 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1250);
            reg = x1250;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x755);
            reg = x755;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1251);
            reg = x1251;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1252);
            reg = x1252;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1253);
            reg = x1253;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1254);
            reg = x1254;
          }
        }
        if (x1090 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1255 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1255 != Fp::invalid());
      if (x1255 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1256 = x844 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1256 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1257 = x833 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1257 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x809 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1258 = x1095 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1259 = Fp(x1258.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1259);
            reg = x1259;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1260 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1260 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1261 = x1258 - x1260;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1262 = x1261 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1263 = Fp(x1262.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1263);
            reg = x1263;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1264 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1264 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1265 = x1262 - x1264;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1266 = x1265 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1267 = Fp(x1266.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1267);
            reg = x1267;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1268 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1268 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1269 = x1266 - x1268;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1270 = x1269 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1271 = Fp(x1270.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1271);
            reg = x1271;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1272 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1272 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1273 = x1270 - x1272;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1274 = x1273 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1274);
          reg = x1274;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1275 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1275 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1276 = x102 - x1275;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1277 = x1275 * x1276;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1277);
          reg = x1277;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1278 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1278 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1279 = x99 - x1275;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1280 = x1278 * x1279;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1280 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1281 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1281 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1281);
          reg = x1281;
        }
        if (x1091 != 0) {
          host_args.at(0) = x1087;
          host_args.at(1) = x1081;
          host_args.at(2) = x101;
          host_args.at(3) = x101;
          host_args.at(4) = x101;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1282 = x1087 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1081);
            reg = x1081;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          {
            host_args.at(0) = x1282;
            host_args.at(1) = x1081;
            host_args.at(2) = x101;
            host_args.at(3) = x101;
            host_args.at(4) = x101;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1283 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1283 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1284 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1284 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1285 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1285 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1286 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1286 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1282);
            reg = x1282;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x755);
            reg = x755;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1283);
            reg = x1283;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1284);
            reg = x1284;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1285);
            reg = x1285;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1286);
            reg = x1286;
          }
        }
        if (x1090 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1287 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1287 != Fp::invalid());
      if (x1287 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1288 = x844 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1288 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1289 = x833 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1289 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x809 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1290 = x1095 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1291 = Fp(x1290.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1291);
            reg = x1291;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1292 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1292 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1293 = x1290 - x1292;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1294 = x1293 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1295 = Fp(x1294.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1295);
            reg = x1295;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1296 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1296 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1297 = x1294 - x1296;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1298 = x1297 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1299 = Fp(x1298.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1300 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1300 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1301 = x1298 - x1300;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1302 = x1301 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1303 = Fp(x1302.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1303);
            reg = x1303;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1304 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1304 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1305 = x1302 - x1304;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1306 = x1305 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1306);
          reg = x1306;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1307 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1307 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1308 = x102 - x1307;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1309 = x1307 * x1308;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1309);
          reg = x1309;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1310 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1310 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1311 = x99 - x1307;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1312 = x1310 * x1311;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1312 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1313 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1313 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1313);
          reg = x1313;
        }
        if (x1091 != 0) {
          host_args.at(0) = x1087;
          host_args.at(1) = x1083;
          host_args.at(2) = x101;
          host_args.at(3) = x101;
          host_args.at(4) = x101;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1314 = x1087 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1083);
            reg = x1083;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          {
            host_args.at(0) = x1314;
            host_args.at(1) = x1083;
            host_args.at(2) = x101;
            host_args.at(3) = x101;
            host_args.at(4) = x101;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1315 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1315 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1316 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1316 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1317 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1317 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1318 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1318 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1314);
            reg = x1314;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x755);
            reg = x755;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1315);
            reg = x1315;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1316);
            reg = x1316;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1317);
            reg = x1317;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1318);
            reg = x1318;
          }
        }
        if (x1090 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
      auto x1319 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1319 != Fp::invalid());
      if (x1319 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        auto x1320 = x844 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1320 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x833 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1321 = x804 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1322 = x807 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1323 = x1321 + x1322;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1324 = x1323 + x916;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1325 = x797 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1326 = x799 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1327 = x1325 + x1326;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1328 = x1327 + x801;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1329 = x797 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1324);
          reg = x1324;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1328);
          reg = x1328;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1329);
          reg = x1329;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1329);
          reg = x1329;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1330 = x1095 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1331 = Fp(x1330.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1331);
            reg = x1331;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1332 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1332 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1333 = x1330 - x1332;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1334 = x1333 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1335 = Fp(x1334.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1335);
            reg = x1335;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1336 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1336 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1337 = x1334 - x1336;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1338 = x1337 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1339 = Fp(x1338.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1339);
            reg = x1339;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1340 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1340 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1341 = x1338 - x1340;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1342 = x1341 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1343 = Fp(x1342.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1344 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1344 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1345 = x1342 - x1344;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1346 = x1345 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1346);
          reg = x1346;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1347 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1347 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1348 = x102 - x1347;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1349 = x1347 * x1348;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1349);
          reg = x1349;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1350 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1350 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1351 = x99 - x1347;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1352 = x1350 * x1351;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1352 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1353 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1353 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1353);
          reg = x1353;
        }
        if (x1091 != 0) {
          host_args.at(0) = x1087;
          host_args.at(1) = x1019;
          host_args.at(2) = x1023;
          host_args.at(3) = x1031;
          host_args.at(4) = x1035;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
          auto x1354 = x1087 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1031);
            reg = x1031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1035);
            reg = x1035;
          }
          {
            host_args.at(0) = x1354;
            host_args.at(1) = x1019;
            host_args.at(2) = x1023;
            host_args.at(3) = x1031;
            host_args.at(4) = x1035;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1355 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1355 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1356 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1356 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1357 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1357 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1358 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1358 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1354);
            reg = x1354;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x755);
            reg = x755;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1355);
            reg = x1355;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1356);
            reg = x1356;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1357);
            reg = x1357;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1358);
            reg = x1358;
          }
        }
        if (x1090 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":39:25))
    auto x1359 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x1359 != Fp::invalid());
    if (x1359 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1360 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x1360 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1361 = x605 * x82;
      {
        host_args.at(0) = x1361;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1362 = host_outs.at(0);
        auto x1363 = host_outs.at(1);
        auto x1364 = host_outs.at(2);
        auto x1365 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1362);
          reg = x1362;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1363);
          reg = x1363;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1364);
          reg = x1364;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1365);
          reg = x1365;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1366 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x1366 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1367 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x1367 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1368 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x1368 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1369 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x1369 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1361);
        reg = x1361;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1360);
        reg = x1360;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1366);
        reg = x1366;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1367);
        reg = x1367;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1368);
        reg = x1368;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1369);
        reg = x1369;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1370 = Fp(x1369.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1371 = x1370 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1371);
          reg = x1371;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1372 = Fp(x1369.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1373 = x1372 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1373);
          reg = x1373;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1374 = Fp(x1369.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1375 = x1374 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1375);
          reg = x1375;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1376 = Fp(x1369.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1377 = x1376 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1377);
          reg = x1377;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1378 = Fp(x1369.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1379 = x1378 * x62;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1379);
          reg = x1379;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1380 = Fp(x1369.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1380);
          reg = x1380;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1381 = Fp(x1368.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1382 = x1381 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1382);
          reg = x1382;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1383 = Fp(x1368.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1384 = x1383 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1384);
          reg = x1384;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1385 = Fp(x1368.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1386 = x1385 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1386);
          reg = x1386;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1387 = Fp(x1368.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1388 = x1387 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1388);
          reg = x1388;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1389 = Fp(x1368.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1389);
          reg = x1389;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1390 = Fp(x1367.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1391 = x1390 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1391);
          reg = x1391;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1392 = Fp(x1367.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1393 = x1392 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1393);
          reg = x1393;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1394 = Fp(x1367.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1395 = x1394 * x64;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1395);
          reg = x1395;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1396 = Fp(x1367.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1397 = x1396 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1397);
          reg = x1397;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1398 = Fp(x1367.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1398);
          reg = x1398;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1399 = Fp(x1366.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1400 = x1399 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1400);
          reg = x1400;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1401 = Fp(x1366.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1401);
          reg = x1401;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1402 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x1402 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1403 = x1402 * x61;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1404 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1404 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1405 = x1404 * x65;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1406 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x1406 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1407 = x1406 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1408 = x1405 + x1407;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1409 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x1409 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1410 = x1409 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1411 = x1408 + x1410;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1412 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1412 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1413 = x1411 + x1412;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1414 = x1403 + x1413;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1415 = x1414 * x99;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1416 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x1416 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1417 = x1415 + x1416;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1418 = x1369 - x1417;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1418 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1419 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x1419 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1420 = x1419 * x77;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1421 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1421 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1422 = x1421 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1423 = x1420 + x1422;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1424 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x1424 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1425 = x1423 + x1424;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1426 = x1425 * x65;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1427 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1427 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1428 = x1427 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1429 = x1426 + x1428;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1430 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1430 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1431 = x1429 + x1430;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1432 = x1368 - x1431;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1432 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1433 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x1433 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1434 = x1433 * x70;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1435 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x1435 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1436 = x1435 * x84;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1437 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1437 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1438 = x1436 + x1437;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1439 = x1438 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1440 = x1434 + x1439;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1441 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1441 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1442 = x1441 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1443 = x1440 + x1442;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1444 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1444 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1445 = x1443 + x1444;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1446 = x1367 - x1445;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1446 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1447 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1447 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1448 = x1447 * x70;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1449 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1449 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1450 = x1448 + x1449;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1451 = x1366 - x1450;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1451 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1366;
        host_args.at(1) = x1367;
        host_args.at(2) = x1368;
        host_args.at(3) = x1369;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1452 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1453 = (x1452 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1453);
            reg = x1453;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1454 = x1452 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1455 = (x1454 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1455);
            reg = x1455;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1456 = x1452 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1457 = (x1456 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1457);
            reg = x1457;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1458 = x1452 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1459 = (x1458 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1459);
            reg = x1459;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1460 = x1452 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1461 = (x1460 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1461);
            reg = x1461;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1462 = x1452 - x80;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1463 = (x1462 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1463);
            reg = x1463;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1464 = x1452 - x79;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1465 = (x1464 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1465);
            reg = x1465;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1466 = x1452 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1467 = (x1466 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1467);
            reg = x1467;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1468 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1468 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1469 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1469 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1470 = x1469 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1471 = x1468 + x1470;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1472 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1472 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1473 = x1472 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1474 = x1471 + x1473;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1475 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1475 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1476 = x1475 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1477 = x1474 + x1476;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1478 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1478 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1479 = x1478 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1480 = x1477 + x1479;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1481 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1481 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1482 = x1481 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1483 = x1480 + x1482;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1484 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x1484 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1485 = x1484 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1486 = x1483 + x1485;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x1487 = x1486 - x1452;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x1487 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1488 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1488 != Fp::invalid());
        if (x1488 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1489 = x1409 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1490 = x1412 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1491 = x1489 + x1490;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1492 = x1416 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1493 = x1492 + x1425;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1494 = x1491 + x1493;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1495 = x1402 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1496 = x1404 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1497 = x1495 + x1496;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1498 = x1497 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1499 = x1402 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1494);
            reg = x1494;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1498);
            reg = x1498;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1499);
            reg = x1499;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1499);
            reg = x1499;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x56);
            reg = x56;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1500 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1500 != Fp::invalid());
        if (x1500 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1501 = x1409 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1502 = x1412 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1503 = x1501 + x1502;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1504 = x1416 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1505 = x1504 + x1425;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1506 = x1503 + x1505;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1507 = x1402 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1508 = x1404 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1509 = x1507 + x1508;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1510 = x1509 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1511 = x1402 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1506);
            reg = x1506;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1510);
            reg = x1510;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1511);
            reg = x1511;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1511);
            reg = x1511;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
        auto x1512 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1512 != Fp::invalid());
        if (x1512 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1513 = x1409 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1514 = x1412 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1515 = x1513 + x1514;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1516 = x1416 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1517 = x1516 + x1425;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1518 = x1515 + x1517;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1519 = x1402 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1520 = x1404 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1521 = x1519 + x1520;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1522 = x1521 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1523 = x1402 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1518);
            reg = x1518;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1522);
            reg = x1522;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1523);
            reg = x1523;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1523);
            reg = x1523;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1524 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1524 != Fp::invalid());
        if (x1524 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1525 = x1409 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1526 = x1412 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1527 = x1525 + x1526;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1528 = x1416 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1529 = x1528 + x1425;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1530 = x1527 + x1529;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1531 = x1402 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1532 = x1404 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1533 = x1531 + x1532;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1534 = x1533 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1535 = x1402 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1530);
            reg = x1530;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1534);
            reg = x1534;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1535);
            reg = x1535;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1535);
            reg = x1535;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1536 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1536 != Fp::invalid());
        if (x1536 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1537 = x1409 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1538 = x1412 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1539 = x1537 + x1538;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1540 = x1416 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1541 = x1540 + x1425;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1542 = x1539 + x1541;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1543 = x1402 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1544 = x1404 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1545 = x1543 + x1544;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1546 = x1545 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1547 = x1402 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1542);
            reg = x1542;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1546);
            reg = x1546;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1547);
            reg = x1547;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1547);
            reg = x1547;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1548 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1548 != Fp::invalid());
        if (x1548 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1549 = x1409 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1550 = x1412 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1551 = x1549 + x1550;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1552 = x1441 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1553 = x1551 + x1552;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1554 = x1444 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1555 = x1553 + x1554;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1556 = x1402 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1557 = x1447 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1558 = x1556 + x1557;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1559 = x1404 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1560 = x1558 + x1559;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1561 = x1560 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1562 = x1402 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1555);
            reg = x1555;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1561);
            reg = x1561;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1562);
            reg = x1562;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1562);
            reg = x1562;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1563 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1563 != Fp::invalid());
        if (x1563 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1564 = x1409 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1565 = x1412 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1566 = x1564 + x1565;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1567 = x1441 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1568 = x1566 + x1567;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1569 = x1444 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1570 = x1568 + x1569;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1571 = x1402 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1572 = x1447 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1573 = x1571 + x1572;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1574 = x1404 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1575 = x1573 + x1574;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1576 = x1575 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1577 = x1402 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1570);
            reg = x1570;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1576);
            reg = x1576;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1577);
            reg = x1577;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1577);
            reg = x1577;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x1578 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x1578 != Fp::invalid());
        if (x1578 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1579 = x1409 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1580 = x1412 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1581 = x1579 + x1580;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1582 = x1441 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1583 = x1581 + x1582;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1584 = x1444 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1585 = x1583 + x1584;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1586 = x1402 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1587 = x1447 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1588 = x1586 + x1587;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1589 = x1404 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1590 = x1588 + x1589;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1591 = x1590 + x1406;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1592 = x1402 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1585);
            reg = x1585;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1591);
            reg = x1591;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1592);
            reg = x1592;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1592);
            reg = x1592;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1593 = x1427 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1594 = x1430 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1595 = x1593 + x1594;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1596 = x1595 + x1433;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1597 = x1596 + x54;
      {
        host_args.at(0) = x1597;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1598 = host_outs.at(0);
        auto x1599 = host_outs.at(1);
        auto x1600 = host_outs.at(2);
        auto x1601 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1598);
          reg = x1598;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1599);
          reg = x1599;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1600);
          reg = x1600;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1601);
          reg = x1601;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1602 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1603 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1604 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1605 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x1605 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1597);
        reg = x1597;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1360);
        reg = x1360;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1602);
        reg = x1602;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1603);
        reg = x1603;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1604);
        reg = x1604;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1605);
        reg = x1605;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1606 = x1416 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1607 = x1606 + x1425;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1608 = x1607 + x54;
      {
        host_args.at(0) = x1608;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1609 = host_outs.at(0);
        auto x1610 = host_outs.at(1);
        auto x1611 = host_outs.at(2);
        auto x1612 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1609);
          reg = x1609;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1610);
          reg = x1610;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1611);
          reg = x1611;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1612);
          reg = x1612;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1613 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1614 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1615 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1616 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x1616 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1608);
        reg = x1608;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1360);
        reg = x1360;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1613);
        reg = x1613;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1614);
        reg = x1614;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1615);
        reg = x1615;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1616);
        reg = x1616;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1617 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1618 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1619 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1620 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1620 != Fp::invalid());
      host_args.at(0) = x1617;
      host_args.at(1) = x1618;
      host_args.at(2) = x1619;
      host_args.at(3) = x1620;
      host_args.at(4) = x1596;
      host_args.at(5) = x1602;
      host_args.at(6) = x1603;
      host_args.at(7) = x1604;
      host_args.at(8) = x1605;
      host_args.at(9) = x1607;
      host_args.at(10) = x1613;
      host_args.at(11) = x1614;
      host_args.at(12) = x1615;
      host_args.at(13) = x1616;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1621 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1621 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x1622 = x102 - x1621;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1623 = x1622 * x1602;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1624 = x1622 * x1603;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1625 = x1622 * x1604;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1626 = x1622 * x1605;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1627 = x602 * x84;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1628 = x599 + x1627;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1629 = x592 - x84;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1630 = x1621 * x1629;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1631 = x1621 * x593;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1632 = x1621 * x596;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1633 = x1621 * x1628;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1634 = x1623 + x1630;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1635 = x1624 + x1631;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1636 = x1625 + x1632;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1637 = x1626 + x1633;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1638 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1638 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x1639 = x102 - x1638;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1640 = x1639 * x1613;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1641 = x1639 * x1614;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1642 = x1639 * x1615;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1643 = x1639 * x1616;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1644 = x1638 * x1617;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1645 = x1638 * x1618;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1646 = x1638 * x1619;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1647 = x1638 * x1620;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1648 = x1640 + x1644;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1649 = x1641 + x1645;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1650 = x1642 + x1646;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1651 = x1643 + x1647;
      host_args.at(0) = x1634;
      host_args.at(1) = x1635;
      host_args.at(2) = x1636;
      host_args.at(3) = x1637;
      host_args.at(4) = x1648;
      host_args.at(5) = x1649;
      host_args.at(6) = x1650;
      host_args.at(7) = x1651;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1652 = Fp(x1637.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1653 = x1652 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1653);
          reg = x1653;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1654 = Fp(x1637.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1655 = x1654 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1655);
          reg = x1655;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1656 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1656 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1657 = x1656 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1658 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x1658 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1659 = x1658 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1660 = x1657 + x1659;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1661 = x1637 - x1660;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1661 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1662 = Fp(x1651.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1663 = x1662 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1663);
          reg = x1663;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1664 = Fp(x1651.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1665 = x1664 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1665);
          reg = x1665;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1666 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x1666 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1667 = x1666 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1668 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x1668 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1669 = x1668 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1670 = x1667 + x1669;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1671 = x1651 - x1670;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1671 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1648);
        reg = x1648;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1649);
        reg = x1649;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1650);
        reg = x1650;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][195 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1651);
        reg = x1651;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1672 = Fp(x1634.asUInt32() & x1648.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1673 = Fp(x1635.asUInt32() & x1649.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1674 = Fp(x1636.asUInt32() & x1650.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1675 = Fp(x1637.asUInt32() & x1651.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1672);
          reg = x1672;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1673);
          reg = x1673;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1674);
          reg = x1674;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1675);
          reg = x1675;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1676 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1676 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1677 = x1676 * x1634;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1678 = x1676 * x1635;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1679 = x1676 * x1636;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1680 = x1676 * x1637;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1681 = x1677 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1682 = x1678 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1683 = x1679 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1684 = x1680 + x98;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1685 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x1685 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1686 = x1685 * x1648;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1687 = x1685 * x1649;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1688 = x1685 * x1650;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1689 = x1685 * x1651;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1690 = x1681 + x1686;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1691 = x1682 + x1687;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1692 = x1683 + x1688;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1693 = x1684 + x1689;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1694 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x1694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1695 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1696 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1696 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1697 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1698 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1698 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1699 = x1694 * x1695;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1700 = x1694 * x1696;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1701 = x1694 * x1697;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1702 = x1694 * x1698;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1703 = x1690 + x1699;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1704 = x1691 + x1700;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1705 = x1692 + x1701;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1706 = x1693 + x1702;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1707 = x1704 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1708 = x1703 + x1707;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1709 = Fp(x1708.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1709);
          reg = x1709;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1710 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1710 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1711 = x1708 - x1710;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1712 = x1711 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1713 = Fp(x1712.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1713);
          reg = x1713;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1714 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1714 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1715 = x1712 - x1714;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1716 = x1715 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1716);
        reg = x1716;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1717 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1717 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1718 = x1717 + x1705;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1719 = x1706 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1720 = x1718 + x1719;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1721 = Fp(x1720.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1721);
          reg = x1721;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1722 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1722 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1723 = x1720 - x1722;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1724 = x1723 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1725 = Fp(x1724.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1725);
          reg = x1725;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1726 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1726 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1727 = x1724 - x1726;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1728 = x1727 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1728);
        reg = x1728;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1729 = Fp(x1726.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1730 = x1729 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1730);
          reg = x1730;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1731 = Fp(x1726.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1732 = x1731 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1732);
          reg = x1732;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1733 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1733 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1734 = x1733 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1735 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1735 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1736 = x1735 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1737 = x1734 + x1736;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1738 = x1726 - x1737;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1738 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1739 = x102 - x1666;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1740 = x1656 * x1739;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1741 = x102 - x1733;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1742 = x1740 * x1741;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1743 = x102 - x1656;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1744 = x1743 * x1666;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1745 = x1744 * x1733;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1746 = x1742 + x1745;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1746);
        reg = x1746;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1747 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1747 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1748 = x1747 + x1733;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1749 = x1747 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1750 = x1749 * x1733;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1751 = x1748 - x1750;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1751);
        reg = x1751;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1752 = x1714 * x97;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1753 = x1710 + x1752;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1754 = (x1753 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1754);
          reg = x1754;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1755 = inv(x1753);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1755);
          reg = x1755;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1756 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x1756 != Fp::invalid());
      if (x1756 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1753 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1757 = x102 - x1756;
      if (x1757 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1758 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x1758 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1759 = x1753 * x1758;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1760 = x1759 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1760 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1761 = x1726 * x97;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1762 = x1722 + x1761;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1763 = x1757 * x86;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1764 = x1762 + x1763;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1765 = (x1764 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1765);
          reg = x1765;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1766 = inv(x1764);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1766);
          reg = x1766;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1767 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1767 != Fp::invalid());
      if (x1767 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1764 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1768 = x102 - x1767;
      if (x1768 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1769 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x1769 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1770 = x1764 * x1769;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1771 = x1770 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1771 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1772 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1773 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1773 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1774 = x102 - x1773;
      host_args.at(0) = x1710;
      host_args.at(1) = x1714;
      host_args.at(2) = x1722;
      host_args.at(3) = x1726;
      host_args.at(4) = x1767;
      host_args.at(5) = x1772;
      host_args.at(6) = x1774;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1775 = x1441 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1776 = x1444 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1777 = x1775 + x1776;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1778 = x1777 + x1447;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1779 = (x1778 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1779);
          reg = x1779;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1780 = inv(x1778);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1780);
          reg = x1780;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1781 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x1781 != Fp::invalid());
      if (x1781 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1778 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1782 = x102 - x1781;
      if (x1782 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1783 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x1783 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1784 = x1778 * x1783;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1785 = x1784 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1785 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1786 = x605 + x84;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x1787 = x1618 * x97;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1788 = x1617 + x1787;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x1789 = x1619 * x86;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1790 = x1788 + x1789;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x1791 = x1620 * x53;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x1792 = x1791 * x52;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x1793 = x1790 + x1792;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x1794 = x605 + x1793;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1795 = x1767 * x1794;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:35)
      auto x1796 = x1768 * x1786;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1797 = x1795 + x1796;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1798 = x1767 * x1786;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:34)
      auto x1799 = x1768 * x1794;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1800 = x1798 + x1799;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1801 = x1772 * x1794;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:36)
      auto x1802 = x102 - x1772;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:35)
      auto x1803 = x1802 * x1786;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1804 = x1801 + x1803;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x1805 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1805 != Fp::invalid());
      if (x1805 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1806 = x1449 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1806 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1807 = x1438 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1807 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1808 = x1409 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1809 = x1412 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1810 = x1808 + x1809;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1811 = x1810 + x1607;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1812 = x1402 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1813 = x1404 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1814 = x1812 + x1813;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1815 = x1814 + x1406;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1816 = x1402 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1811);
          reg = x1811;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1815);
          reg = x1815;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1816);
          reg = x1816;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1816);
          reg = x1816;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x56);
          reg = x56;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1817 = x1786 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1818 = Fp(x1817.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1818);
            reg = x1818;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1819 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1819 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1820 = x1817 - x1819;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1821 = x1820 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1822 = Fp(x1821.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1822);
            reg = x1822;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1823 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1823 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1824 = x1821 - x1823;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1825 = x1824 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1826 = Fp(x1825.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1826);
            reg = x1826;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1827 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1827 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1828 = x1825 - x1827;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1829 = x1828 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1830 = Fp(x1829.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1830);
            reg = x1830;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1831 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1831 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1832 = x1829 - x1831;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1833 = x1832 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1833);
          reg = x1833;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1834 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1834 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1835 = x102 - x1834;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1836 = x1834 * x1835;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1836);
          reg = x1836;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1837 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1837 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1838 = x99 - x1834;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1839 = x1837 * x1838;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1839 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1840 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1840 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1840);
          reg = x1840;
        }
        if (x1782 != 0) {
          host_args.at(0) = x1778;
          host_args.at(1) = x1710;
          host_args.at(2) = x1714;
          host_args.at(3) = x1722;
          host_args.at(4) = x1726;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x1841 = x1778 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1722);
            reg = x1722;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1726);
            reg = x1726;
          }
          {
            host_args.at(0) = x1841;
            host_args.at(1) = x1710;
            host_args.at(2) = x1714;
            host_args.at(3) = x1722;
            host_args.at(4) = x1726;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1842 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1842 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1843 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1843 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1844 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1844 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1845 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1845 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1841);
            reg = x1841;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1360);
            reg = x1360;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1842);
            reg = x1842;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1843);
            reg = x1843;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1844);
            reg = x1844;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1845);
            reg = x1845;
          }
        }
        if (x1781 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x1846 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1846 != Fp::invalid());
      if (x1846 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1847 = x1449 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1847 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1848 = x1438 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1848 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1849 = x1409 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1850 = x1412 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1851 = x1849 + x1850;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1852 = x1851 + x1607;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1853 = x1402 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1854 = x1404 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1855 = x1853 + x1854;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1856 = x1855 + x1406;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1857 = x1402 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1852);
          reg = x1852;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1856);
          reg = x1856;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1857);
          reg = x1857;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1857);
          reg = x1857;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1858 = x1786 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1859 = Fp(x1858.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1859);
            reg = x1859;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1860 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1860 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1861 = x1858 - x1860;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1862 = x1861 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1863 = Fp(x1862.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1863);
            reg = x1863;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1864 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1864 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1865 = x1862 - x1864;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1866 = x1865 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1867 = Fp(x1866.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1867);
            reg = x1867;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1868 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1868 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1869 = x1866 - x1868;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1870 = x1869 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1871 = Fp(x1870.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1871);
            reg = x1871;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1872 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1872 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1873 = x1870 - x1872;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1874 = x1873 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1874);
          reg = x1874;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1875 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1875 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1876 = x102 - x1875;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1877 = x1875 * x1876;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1877);
          reg = x1877;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1878 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1878 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1879 = x99 - x1875;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1880 = x1878 * x1879;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1880 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1881 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1881 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1881);
          reg = x1881;
        }
        if (x1782 != 0) {
          host_args.at(0) = x1778;
          host_args.at(1) = x1710;
          host_args.at(2) = x1714;
          host_args.at(3) = x1722;
          host_args.at(4) = x1726;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x1882 = x1778 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1722);
            reg = x1722;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1726);
            reg = x1726;
          }
          {
            host_args.at(0) = x1882;
            host_args.at(1) = x1710;
            host_args.at(2) = x1714;
            host_args.at(3) = x1722;
            host_args.at(4) = x1726;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1883 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1883 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1884 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1884 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1885 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1885 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1886 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1886 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1882);
            reg = x1882;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1360);
            reg = x1360;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1883);
            reg = x1883;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1884);
            reg = x1884;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1885);
            reg = x1885;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1886);
            reg = x1886;
          }
        }
        if (x1781 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
      auto x1887 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1887 != Fp::invalid());
      if (x1887 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1888 = x1449 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1888 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1889 = x1438 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1889 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1890 = x1409 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1891 = x1412 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1892 = x1890 + x1891;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1893 = x1892 + x1607;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1894 = x1402 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1895 = x1404 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1896 = x1894 + x1895;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1897 = x1896 + x1406;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1898 = x1402 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1893);
          reg = x1893;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1897);
          reg = x1897;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1898);
          reg = x1898;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1898);
          reg = x1898;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1899 = x1786 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1900 = Fp(x1899.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1900);
            reg = x1900;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1901 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1901 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1902 = x1899 - x1901;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1903 = x1902 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1904 = Fp(x1903.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1904);
            reg = x1904;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1905 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1905 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1906 = x1903 - x1905;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1907 = x1906 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1908 = Fp(x1907.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1908);
            reg = x1908;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1909 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1909 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1910 = x1907 - x1909;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1911 = x1910 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1912 = Fp(x1911.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1912);
            reg = x1912;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1913 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1913 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1914 = x1911 - x1913;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1915 = x1914 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1915);
          reg = x1915;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1916 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1916 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1917 = x102 - x1916;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1918 = x1916 * x1917;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1918);
          reg = x1918;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1919 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1919 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1920 = x99 - x1916;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1921 = x1919 * x1920;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1921 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1922 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1922 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1922);
          reg = x1922;
        }
        if (x1782 != 0) {
          host_args.at(0) = x1778;
          host_args.at(1) = x1710;
          host_args.at(2) = x1714;
          host_args.at(3) = x1722;
          host_args.at(4) = x1726;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
          auto x1923 = x1778 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1722);
            reg = x1722;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1726);
            reg = x1726;
          }
          {
            host_args.at(0) = x1923;
            host_args.at(1) = x1710;
            host_args.at(2) = x1714;
            host_args.at(3) = x1722;
            host_args.at(4) = x1726;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1924 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1924 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1925 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1925 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1926 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1926 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1927 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1927 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1923);
            reg = x1923;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1360);
            reg = x1360;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1924);
            reg = x1924;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1925);
            reg = x1925;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1926);
            reg = x1926;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1927);
            reg = x1927;
          }
        }
        if (x1781 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x1928 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1928 != Fp::invalid());
      if (x1928 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1929 = x1449 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1929 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1930 = x1438 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1930 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1931 = x1409 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1932 = x1412 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1933 = x1931 + x1932;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1934 = x1933 + x1607;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1935 = x1402 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1936 = x1404 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1937 = x1935 + x1936;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1938 = x1937 + x1406;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1939 = x1402 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1934);
          reg = x1934;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1938);
          reg = x1938;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1939);
          reg = x1939;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1939);
          reg = x1939;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1940 = x1786 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1941 = Fp(x1940.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1941);
            reg = x1941;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1942 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1942 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1943 = x1940 - x1942;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1944 = x1943 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1945 = Fp(x1944.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1945);
            reg = x1945;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1946 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1946 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1947 = x1944 - x1946;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1948 = x1947 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1949 = Fp(x1948.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1949);
            reg = x1949;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1950 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1950 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1951 = x1948 - x1950;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1952 = x1951 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1953 = Fp(x1952.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1953);
            reg = x1953;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1954 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1954 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1955 = x1952 - x1954;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1956 = x1955 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1956);
          reg = x1956;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1957 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1957 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1958 = x102 - x1957;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1959 = x1957 * x1958;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1959);
          reg = x1959;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1960 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1960 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1961 = x99 - x1957;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1962 = x1960 * x1961;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1962 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1963 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x1963 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1963);
          reg = x1963;
        }
        if (x1782 != 0) {
          host_args.at(0) = x1778;
          host_args.at(1) = x1772;
          host_args.at(2) = x101;
          host_args.at(3) = x101;
          host_args.at(4) = x101;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x1964 = x1778 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1772);
            reg = x1772;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          {
            host_args.at(0) = x1964;
            host_args.at(1) = x1772;
            host_args.at(2) = x101;
            host_args.at(3) = x101;
            host_args.at(4) = x101;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1965 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1965 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1966 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1966 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1967 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1967 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1968 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x1968 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1964);
            reg = x1964;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1360);
            reg = x1360;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1965);
            reg = x1965;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1966);
            reg = x1966;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1967);
            reg = x1967;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1968);
            reg = x1968;
          }
        }
        if (x1781 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x1969 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1969 != Fp::invalid());
      if (x1969 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1970 = x1449 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1970 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1971 = x1438 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1971 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1972 = x1409 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1973 = x1412 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1974 = x1972 + x1973;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1975 = x1974 + x1607;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1976 = x1402 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1977 = x1404 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1978 = x1976 + x1977;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1979 = x1978 + x1406;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1980 = x1402 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1975);
          reg = x1975;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1979);
          reg = x1979;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1980);
          reg = x1980;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1980);
          reg = x1980;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1981 = x1786 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1982 = Fp(x1981.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1982);
            reg = x1982;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1983 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1983 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1984 = x1981 - x1983;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1985 = x1984 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1986 = Fp(x1985.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1986);
            reg = x1986;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1987 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1987 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1988 = x1985 - x1987;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1989 = x1988 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1990 = Fp(x1989.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1990);
            reg = x1990;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1991 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1991 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1992 = x1989 - x1991;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1993 = x1992 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1994 = Fp(x1993.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1994);
            reg = x1994;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1995 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1995 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1996 = x1993 - x1995;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1997 = x1996 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1997);
          reg = x1997;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1998 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1998 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1999 = x102 - x1998;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2000 = x1998 * x1999;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2000);
          reg = x2000;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2001 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2001 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2002 = x99 - x1998;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2003 = x2001 * x2002;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2003 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2004 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2004 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2004);
          reg = x2004;
        }
        if (x1782 != 0) {
          host_args.at(0) = x1778;
          host_args.at(1) = x1774;
          host_args.at(2) = x101;
          host_args.at(3) = x101;
          host_args.at(4) = x101;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x2005 = x1778 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1774);
            reg = x1774;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          {
            host_args.at(0) = x2005;
            host_args.at(1) = x1774;
            host_args.at(2) = x101;
            host_args.at(3) = x101;
            host_args.at(4) = x101;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2006 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2006 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2007 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2007 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2008 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2008 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2009 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2009 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2005);
            reg = x2005;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1360);
            reg = x1360;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2006);
            reg = x2006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2007);
            reg = x2007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2008);
            reg = x2008;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2009);
            reg = x2009;
          }
        }
        if (x1781 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x2010 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2010 != Fp::invalid());
      if (x2010 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2011 = x1449 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x2011 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1438 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2012 = x1409 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2013 = x1412 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2014 = x2012 + x2013;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2015 = x2014 + x1775;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2016 = x2015 + x1776;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2017 = x1402 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2018 = x1447 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2019 = x2017 + x2018;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2020 = x1404 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2021 = x2019 + x2020;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2022 = x2021 + x1406;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2023 = x1402 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2016);
          reg = x2016;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2022);
          reg = x2022;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2023);
          reg = x2023;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2023);
          reg = x2023;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2024 = x1797 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2025 = Fp(x2024.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2025);
            reg = x2025;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2026 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2026 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2027 = x2024 - x2026;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2028 = x2027 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2029 = Fp(x2028.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2029);
            reg = x2029;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2030 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2030 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2031 = x2028 - x2030;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2032 = x2031 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2033 = Fp(x2032.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2033);
            reg = x2033;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2034 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2034 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2035 = x2032 - x2034;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2036 = x2035 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2037 = Fp(x2036.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2037);
            reg = x2037;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2038 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2038 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2039 = x2036 - x2038;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2040 = x2039 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2040);
          reg = x2040;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2041 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2041 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2042 = x102 - x2041;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2043 = x2041 * x2042;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2043);
          reg = x2043;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2044 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2044 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2045 = x99 - x2041;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2046 = x2044 * x2045;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2046 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2047 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2047 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2047);
          reg = x2047;
        }
        if (x101 != 0) {
          host_args.at(0) = x1778;
          host_args.at(1) = x1710;
          host_args.at(2) = x1714;
          host_args.at(3) = x1722;
          host_args.at(4) = x1726;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2048 = x1778 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1722);
            reg = x1722;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1726);
            reg = x1726;
          }
          {
            host_args.at(0) = x2048;
            host_args.at(1) = x1710;
            host_args.at(2) = x1714;
            host_args.at(3) = x1722;
            host_args.at(4) = x1726;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2049 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2049 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2050 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2050 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2051 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2051 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2052 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2052 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2048);
            reg = x2048;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1360);
            reg = x1360;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2049);
            reg = x2049;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2050);
            reg = x2050;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2051);
            reg = x2051;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2052);
            reg = x2052;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2053 = x1781 + x102;
        if (x2053 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2054 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2054 != Fp::invalid());
      if (x2054 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2055 = x1449 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2055 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2056 = x1438 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2056 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2057 = x1409 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2058 = x1412 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2059 = x2057 + x2058;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2060 = x2059 + x1775;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2061 = x2060 + x1776;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2062 = x1402 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2063 = x1447 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2064 = x2062 + x2063;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2065 = x1404 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2066 = x2064 + x2065;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2067 = x2066 + x1406;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2068 = x1402 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2061);
          reg = x2061;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2067);
          reg = x2067;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2068);
          reg = x2068;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2068);
          reg = x2068;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2069 = x1800 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2070 = Fp(x2069.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2070);
            reg = x2070;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2071 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2071 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2072 = x2069 - x2071;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2073 = x2072 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2074 = Fp(x2073.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2074);
            reg = x2074;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2075 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2075 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2076 = x2073 - x2075;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2077 = x2076 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2078 = Fp(x2077.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2078);
            reg = x2078;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2079 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2079 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2080 = x2077 - x2079;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2081 = x2080 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2082 = Fp(x2081.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2083 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2083 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2084 = x2081 - x2083;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2085 = x2084 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2085);
          reg = x2085;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2086 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2086 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2087 = x102 - x2086;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2088 = x2086 * x2087;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2088);
          reg = x2088;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2089 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2089 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2090 = x99 - x2086;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2091 = x2089 * x2090;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2091 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2092 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2092 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2092);
          reg = x2092;
        }
        if (x101 != 0) {
          host_args.at(0) = x1778;
          host_args.at(1) = x1710;
          host_args.at(2) = x1714;
          host_args.at(3) = x1722;
          host_args.at(4) = x1726;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2093 = x1778 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1722);
            reg = x1722;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1726);
            reg = x1726;
          }
          {
            host_args.at(0) = x2093;
            host_args.at(1) = x1710;
            host_args.at(2) = x1714;
            host_args.at(3) = x1722;
            host_args.at(4) = x1726;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2094 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2094 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2095 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2095 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2096 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2096 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2097 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2097 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2093);
            reg = x2093;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1360);
            reg = x1360;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2094);
            reg = x2094;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2095);
            reg = x2095;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2096);
            reg = x2096;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2097);
            reg = x2097;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2098 = x1781 + x102;
        if (x2098 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2099 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2099 != Fp::invalid());
      if (x2099 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2100 = x1449 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2100 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2101 = x1438 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2101 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2102 = x1409 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2103 = x1412 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2104 = x2102 + x2103;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2105 = x2104 + x1775;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2106 = x2105 + x1776;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2107 = x1402 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2108 = x1447 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2109 = x2107 + x2108;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2110 = x1404 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2111 = x2109 + x2110;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2112 = x2111 + x1406;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2113 = x1402 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2106);
          reg = x2106;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2112);
          reg = x2112;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2113);
          reg = x2113;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2113);
          reg = x2113;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2114 = x1804 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2115 = Fp(x2114.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2115);
            reg = x2115;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2116 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2116 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2117 = x2114 - x2116;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2118 = x2117 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2119 = Fp(x2118.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2119);
            reg = x2119;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2120 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2120 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2121 = x2118 - x2120;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2122 = x2121 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2123 = Fp(x2122.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2123);
            reg = x2123;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2124 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2124 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2125 = x2122 - x2124;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2126 = x2125 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2127 = Fp(x2126.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2127);
            reg = x2127;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2128 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2128 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2129 = x2126 - x2128;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2130 = x2129 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2130);
          reg = x2130;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2131 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2131 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2132 = x102 - x2131;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2133 = x2131 * x2132;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2133);
          reg = x2133;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2134 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2134 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2135 = x99 - x2131;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2136 = x2134 * x2135;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2136 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2137 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2137 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2137);
          reg = x2137;
        }
        if (x101 != 0) {
          host_args.at(0) = x1778;
          host_args.at(1) = x1710;
          host_args.at(2) = x1714;
          host_args.at(3) = x1722;
          host_args.at(4) = x1726;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2138 = x1778 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1722);
            reg = x1722;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1726);
            reg = x1726;
          }
          {
            host_args.at(0) = x2138;
            host_args.at(1) = x1710;
            host_args.at(2) = x1714;
            host_args.at(3) = x1722;
            host_args.at(4) = x1726;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2139 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2139 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2140 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2140 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2141 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2141 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2142 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2142 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2138);
            reg = x2138;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1360);
            reg = x1360;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2139);
            reg = x2139;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2140);
            reg = x2140;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2141);
            reg = x2141;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2142);
            reg = x2142;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2143 = x1781 + x102;
        if (x2143 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/components/mux.h":39:25))
    auto x2144 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x2144 != Fp::invalid());
    if (x2144 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2145 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x2146 = x605 * x82;
      {
        host_args.at(0) = x2146;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2147 = host_outs.at(0);
        auto x2148 = host_outs.at(1);
        auto x2149 = host_outs.at(2);
        auto x2150 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2147);
          reg = x2147;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2148);
          reg = x2148;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2149);
          reg = x2149;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2150);
          reg = x2150;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2151 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2151 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2152 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2152 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2153 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2153 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2154 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x2154 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2146);
        reg = x2146;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2145);
        reg = x2145;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2151);
        reg = x2151;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2152);
        reg = x2152;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2153);
        reg = x2153;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2154);
        reg = x2154;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2155 = Fp(x2154.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2156 = x2155 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2156);
          reg = x2156;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2157 = Fp(x2154.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2158 = x2157 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2158);
          reg = x2158;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2159 = Fp(x2154.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2160 = x2159 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2160);
          reg = x2160;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2161 = Fp(x2154.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2162 = x2161 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2162);
          reg = x2162;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2163 = Fp(x2154.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2164 = x2163 * x62;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2164);
          reg = x2164;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2165 = Fp(x2154.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2165);
          reg = x2165;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2166 = Fp(x2153.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2167 = x2166 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2167);
          reg = x2167;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2168 = Fp(x2153.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2169 = x2168 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2169);
          reg = x2169;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2170 = Fp(x2153.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2171 = x2170 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2171);
          reg = x2171;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2172 = Fp(x2153.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2173 = x2172 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2173);
          reg = x2173;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2174 = Fp(x2153.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2174);
          reg = x2174;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2175 = Fp(x2152.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2176 = x2175 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2176);
          reg = x2176;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2177 = Fp(x2152.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2178 = x2177 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2178);
          reg = x2178;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2179 = Fp(x2152.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2180 = x2179 * x64;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2180);
          reg = x2180;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2181 = Fp(x2152.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2182 = x2181 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2182);
          reg = x2182;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2183 = Fp(x2152.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2183);
          reg = x2183;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2184 = Fp(x2151.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2185 = x2184 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2185);
          reg = x2185;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2186 = Fp(x2151.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2186);
          reg = x2186;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2187 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x2187 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2188 = x2187 * x61;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2189 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2189 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2190 = x2189 * x65;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2191 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x2191 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2192 = x2191 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2193 = x2190 + x2192;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2194 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x2194 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2195 = x2194 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2196 = x2193 + x2195;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2197 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2197 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2198 = x2196 + x2197;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2199 = x2188 + x2198;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2200 = x2199 * x99;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2201 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x2201 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2202 = x2200 + x2201;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2203 = x2154 - x2202;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2203 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2204 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x2204 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2205 = x2204 * x77;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2206 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2206 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2207 = x2206 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2208 = x2205 + x2207;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2209 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x2209 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2210 = x2208 + x2209;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2211 = x2210 * x65;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2212 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2212 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2213 = x2212 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2214 = x2211 + x2213;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2215 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2215 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2216 = x2214 + x2215;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2217 = x2153 - x2216;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2217 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2218 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x2218 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2219 = x2218 * x70;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2220 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x2220 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2221 = x2220 * x84;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2222 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2222 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2223 = x2221 + x2222;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2224 = x2223 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2225 = x2219 + x2224;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2226 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2226 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2227 = x2226 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2228 = x2225 + x2227;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2229 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2229 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2230 = x2228 + x2229;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2231 = x2152 - x2230;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2231 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2232 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x2232 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2233 = x2232 * x70;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2234 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2234 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2235 = x2233 + x2234;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2236 = x2151 - x2235;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2236 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2151;
        host_args.at(1) = x2152;
        host_args.at(2) = x2153;
        host_args.at(3) = x2154;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2237 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2238 = (x2237 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2238);
            reg = x2238;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2239 = x2237 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2240 = (x2239 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2240);
            reg = x2240;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2241 = x2237 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2242 = (x2241 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2242);
            reg = x2242;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2243 = x2237 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2244 = (x2243 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2244);
            reg = x2244;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2245 = x2237 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2246 = (x2245 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2246);
            reg = x2246;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2247 = x2237 - x80;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2248 = (x2247 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2248);
            reg = x2248;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2249 = x2237 - x79;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2250 = (x2249 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2250);
            reg = x2250;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2251 = x2237 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2252 = (x2251 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2252);
            reg = x2252;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2253 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2253 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2254 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2254 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2255 = x2254 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2256 = x2253 + x2255;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2257 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2257 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2258 = x2257 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2259 = x2256 + x2258;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2260 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2260 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2261 = x2260 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2262 = x2259 + x2261;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2263 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2263 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2264 = x2263 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2265 = x2262 + x2264;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2266 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x2266 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2267 = x2266 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2268 = x2265 + x2267;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2269 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x2269 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2270 = x2269 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2271 = x2268 + x2270;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x2272 = x2271 - x2237;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x2272 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2273 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2273 != Fp::invalid());
        if (x2273 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2274 = x2194 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2275 = x2197 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2276 = x2274 + x2275;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2277 = x2226 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2278 = x2276 + x2277;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2279 = x2229 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2280 = x2278 + x2279;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2281 = x2187 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2282 = x2232 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2283 = x2281 + x2282;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2284 = x2189 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2285 = x2283 + x2284;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2286 = x2285 + x2191;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2287 = x2187 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2280);
            reg = x2280;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2286);
            reg = x2286;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2287);
            reg = x2287;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2287);
            reg = x2287;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2288 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2288 != Fp::invalid());
        if (x2288 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2289 = x2194 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2290 = x2197 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2291 = x2289 + x2290;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2292 = x2226 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2293 = x2291 + x2292;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2294 = x2229 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2295 = x2293 + x2294;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2296 = x2187 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2297 = x2232 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2298 = x2296 + x2297;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2299 = x2189 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2300 = x2298 + x2299;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2301 = x2300 + x2191;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2302 = x2187 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2295);
            reg = x2295;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2301);
            reg = x2301;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2302);
            reg = x2302;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2302);
            reg = x2302;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2303 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2303 != Fp::invalid());
        if (x2303 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2304 = x2194 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2305 = x2197 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2306 = x2304 + x2305;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2307 = x2226 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2308 = x2306 + x2307;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2309 = x2229 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2310 = x2308 + x2309;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2311 = x2187 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2312 = x2232 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2313 = x2311 + x2312;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2314 = x2189 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2315 = x2313 + x2314;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2316 = x2315 + x2191;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2317 = x2187 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2310);
            reg = x2310;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2316);
            reg = x2316;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2317);
            reg = x2317;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2317);
            reg = x2317;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2318 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2318 != Fp::invalid());
        if (x2318 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2319 = x2194 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
          auto x2320 = x2197 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2321 = x2319 + x2320;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2322 = x2201 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2323 = x2322 + x2210;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2324 = x2321 + x2323;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2325 = x2324 - x2209;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
          auto x2326 = x2209 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2327 = x2225 + x2326;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
          auto x2328 = x2189 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2329 = x2327 + x2328;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2330 = x2329 + x2191;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2331 = x2187 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2332 = x2331 + x2213;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2333 = x2332 + x2215;
          // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
          auto x2334 = x2187 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2325);
            reg = x2325;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2330);
            reg = x2330;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2333);
            reg = x2333;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2334);
            reg = x2334;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2335 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2335 != Fp::invalid());
        if (x2335 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2336 = x2194 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2337 = x2197 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2338 = x2336 + x2337;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2339 = x2201 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2340 = x2339 + x2210;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2341 = x2338 + x2340;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2342 = x2187 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2343 = x2189 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2344 = x2342 + x2343;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2345 = x2344 + x2191;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2346 = x2187 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2341);
            reg = x2341;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2345);
            reg = x2345;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2346);
            reg = x2346;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2346);
            reg = x2346;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2347 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2347 != Fp::invalid());
        if (x2347 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2225);
            reg = x2225;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2216);
            reg = x2216;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2202);
            reg = x2202;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
        auto x2348 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x2348 != Fp::invalid());
        if (x2348 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2225);
            reg = x2225;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2216);
            reg = x2216;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2202);
            reg = x2202;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2349 = x2212 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x2350 = x2215 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2351 = x2349 + x2350;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2352 = x2351 + x2218;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x2353 = x2352 + x54;
      {
        host_args.at(0) = x2353;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2354 = host_outs.at(0);
        auto x2355 = host_outs.at(1);
        auto x2356 = host_outs.at(2);
        auto x2357 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2354);
          reg = x2354;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2355);
          reg = x2355;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2356);
          reg = x2356;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2357);
          reg = x2357;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2358 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2358 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2359 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2359 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2360 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2360 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2361 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x2361 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2353);
        reg = x2353;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2145);
        reg = x2145;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2358);
        reg = x2358;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2359);
        reg = x2359;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2360);
        reg = x2360;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2361);
        reg = x2361;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2362 = x2201 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2363 = x2362 + x2210;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x2364 = x2363 + x54;
      {
        host_args.at(0) = x2364;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2365 = host_outs.at(0);
        auto x2366 = host_outs.at(1);
        auto x2367 = host_outs.at(2);
        auto x2368 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2365);
          reg = x2365;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2366);
          reg = x2366;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2367);
          reg = x2367;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2368);
          reg = x2368;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2369 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2369 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2370 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2370 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2371 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x2371 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2372 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x2372 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2364);
        reg = x2364;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2145);
        reg = x2145;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2369);
        reg = x2369;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2370);
        reg = x2370;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2371);
        reg = x2371;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2372);
        reg = x2372;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2373 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2373 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2374 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2374 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2375 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2375 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2376 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2376 != Fp::invalid());
      host_args.at(0) = x2373;
      host_args.at(1) = x2374;
      host_args.at(2) = x2375;
      host_args.at(3) = x2376;
      host_args.at(4) = x2352;
      host_args.at(5) = x2358;
      host_args.at(6) = x2359;
      host_args.at(7) = x2360;
      host_args.at(8) = x2361;
      host_args.at(9) = x2363;
      host_args.at(10) = x2369;
      host_args.at(11) = x2370;
      host_args.at(12) = x2371;
      host_args.at(13) = x2372;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2377 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2377 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x2378 = x102 - x2377;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2379 = x2378 * x2358;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2380 = x2378 * x2359;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2381 = x2378 * x2360;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2382 = x2378 * x2361;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x2383 = x602 * x84;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x2384 = x599 + x2383;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x2385 = x592 - x84;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2386 = x2377 * x2385;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2387 = x2377 * x593;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2388 = x2377 * x596;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2389 = x2377 * x2384;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2390 = x2379 + x2386;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2391 = x2380 + x2387;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2392 = x2381 + x2388;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2393 = x2382 + x2389;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2394 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2394 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x2395 = x102 - x2394;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2396 = x2395 * x2369;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2397 = x2395 * x2370;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2398 = x2395 * x2371;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2399 = x2395 * x2372;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2400 = x2394 * x2373;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2401 = x2394 * x2374;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2402 = x2394 * x2375;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2403 = x2394 * x2376;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2404 = x2396 + x2400;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2405 = x2397 + x2401;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2406 = x2398 + x2402;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2407 = x2399 + x2403;
      host_args.at(0) = x2390;
      host_args.at(1) = x2391;
      host_args.at(2) = x2392;
      host_args.at(3) = x2393;
      host_args.at(4) = x2404;
      host_args.at(5) = x2405;
      host_args.at(6) = x2406;
      host_args.at(7) = x2407;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2408 = Fp(x2393.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2409 = x2408 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2409);
          reg = x2409;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2410 = Fp(x2393.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2411 = x2410 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2411);
          reg = x2411;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2412 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x2412 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2413 = x2412 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x2414 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x2414 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2415 = x2414 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2416 = x2413 + x2415;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2417 = x2393 - x2416;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2417 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2418 = Fp(x2407.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2419 = x2418 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2419);
          reg = x2419;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2420 = Fp(x2407.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2421 = x2420 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2421);
          reg = x2421;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2422 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x2422 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2423 = x2422 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x2424 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2424 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2425 = x2424 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2426 = x2423 + x2425;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2427 = x2407 - x2426;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2427 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2404);
        reg = x2404;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2405);
        reg = x2405;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2406);
        reg = x2406;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][195 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2407);
        reg = x2407;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2428 = Fp(x2390.asUInt32() & x2404.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2429 = Fp(x2391.asUInt32() & x2405.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2430 = Fp(x2392.asUInt32() & x2406.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2431 = Fp(x2393.asUInt32() & x2407.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2428);
          reg = x2428;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2429);
          reg = x2429;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2430);
          reg = x2430;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2431);
          reg = x2431;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2432 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2432 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2433 = x2432 * x2390;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2434 = x2432 * x2391;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2435 = x2432 * x2392;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2436 = x2432 * x2393;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2437 = x2433 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2438 = x2434 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2439 = x2435 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2440 = x2436 + x98;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2441 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2441 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2442 = x2441 * x2404;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2443 = x2441 * x2405;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2444 = x2441 * x2406;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2445 = x2441 * x2407;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2446 = x2437 + x2442;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2447 = x2438 + x2443;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2448 = x2439 + x2444;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2449 = x2440 + x2445;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2450 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x2450 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2451 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2451 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2452 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2452 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2453 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x2453 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2454 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2454 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2455 = x2450 * x2451;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2456 = x2450 * x2452;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2457 = x2450 * x2453;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2458 = x2450 * x2454;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2459 = x2446 + x2455;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2460 = x2447 + x2456;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2461 = x2448 + x2457;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2462 = x2449 + x2458;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x2463 = x2460 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x2464 = x2459 + x2463;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2465 = Fp(x2464.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2465);
          reg = x2465;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2466 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2466 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2467 = x2464 - x2466;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2468 = x2467 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2469 = Fp(x2468.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2469);
          reg = x2469;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2470 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2470 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2471 = x2468 - x2470;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2472 = x2471 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2472);
        reg = x2472;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2473 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2473 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2474 = x2473 + x2461;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x2475 = x2462 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2476 = x2474 + x2475;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2477 = Fp(x2476.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2477);
          reg = x2477;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2478 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2478 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2479 = x2476 - x2478;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2480 = x2479 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2481 = Fp(x2480.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2481);
          reg = x2481;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2482 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2482 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2483 = x2480 - x2482;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2484 = x2483 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2484);
        reg = x2484;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2485 = Fp(x2482.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2486 = x2485 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2486);
          reg = x2486;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2487 = Fp(x2482.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2488 = x2487 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2488);
          reg = x2488;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2489 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2489 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2490 = x2489 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x2491 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2491 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2492 = x2491 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2493 = x2490 + x2492;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2494 = x2482 - x2493;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2494 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2495 = x102 - x2422;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2496 = x2412 * x2495;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2497 = x102 - x2489;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2498 = x2496 * x2497;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2499 = x102 - x2412;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2500 = x2499 * x2422;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2501 = x2500 * x2489;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2502 = x2498 + x2501;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2502);
        reg = x2502;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2503 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x2503 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2504 = x2503 + x2489;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2505 = x2503 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2506 = x2505 * x2489;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2507 = x2504 - x2506;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2507);
        reg = x2507;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x2508 = x2470 * x97;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x2509 = x2466 + x2508;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2510 = (x2509 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2510);
          reg = x2510;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2511 = inv(x2509);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2511);
          reg = x2511;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2512 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x2512 != Fp::invalid());
      if (x2512 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2509 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2513 = x102 - x2512;
      if (x2513 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2514 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x2514 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2515 = x2509 * x2514;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2516 = x2515 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2516 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x2517 = x2482 * x97;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2518 = x2478 + x2517;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x2519 = x2513 * x86;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2520 = x2518 + x2519;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2521 = (x2520 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2521);
          reg = x2521;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2522 = inv(x2520);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2522);
          reg = x2522;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2523 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x2523 != Fp::invalid());
      if (x2523 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2520 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2524 = x102 - x2523;
      if (x2524 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2525 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x2525 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2526 = x2520 * x2525;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2527 = x2526 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2527 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2528 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x2528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2529 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x2529 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2530 = x102 - x2529;
      host_args.at(0) = x2466;
      host_args.at(1) = x2470;
      host_args.at(2) = x2478;
      host_args.at(3) = x2482;
      host_args.at(4) = x2523;
      host_args.at(5) = x2528;
      host_args.at(6) = x2530;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2531 = x2226 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2532 = x2229 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2533 = x2531 + x2532;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2534 = x2533 + x2232;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2535 = (x2534 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2535);
          reg = x2535;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2536 = inv(x2534);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2536);
          reg = x2536;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2537 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x2537 != Fp::invalid());
      if (x2537 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2534 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2538 = x102 - x2537;
      if (x2538 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2539 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x2539 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2540 = x2534 * x2539;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2541 = x2540 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2541 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x2542 = x605 + x84;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x2543 = x2374 * x97;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2544 = x2373 + x2543;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x2545 = x2375 * x86;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2546 = x2544 + x2545;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x2547 = x2376 * x53;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x2548 = x2547 * x52;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x2549 = x2546 + x2548;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x2550 = x605 + x2549;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:57)
      auto x2551 = x2478 * x86;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2552 = x2509 + x2551;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:14)
      auto x2553 = x2482 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2554 = x2552 + x2553;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2555 = x2528 * x2542;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:35)
      auto x2556 = x102 - x2528;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:34)
      auto x2557 = x2556 * x2550;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2558 = x2555 + x2557;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2559 = x2530 * x2550;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:38)
      auto x2560 = x102 - x2530;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:37)
      auto x2561 = x2560 * x2542;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2562 = x2559 + x2561;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2563 = x2530 * x2542;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:36)
      auto x2564 = x2560 * x2550;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2565 = x2563 + x2564;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2566 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2566 != Fp::invalid());
      if (x2566 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2567 = x2234 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2567 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2568 = x2223 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2568 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2569 = x2194 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2570 = x2197 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2571 = x2569 + x2570;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2572 = x2571 + x2531;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2573 = x2572 + x2532;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2574 = x2187 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2575 = x2232 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2576 = x2574 + x2575;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2577 = x2189 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2578 = x2576 + x2577;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2579 = x2578 + x2191;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2580 = x2187 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2573);
          reg = x2573;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2579);
          reg = x2579;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2580);
          reg = x2580;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2580);
          reg = x2580;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2581 = x2558 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2582 = Fp(x2581.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2582);
            reg = x2582;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2583 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2583 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2584 = x2581 - x2583;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2585 = x2584 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2586 = Fp(x2585.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2586);
            reg = x2586;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2587 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2587 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2588 = x2585 - x2587;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2589 = x2588 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2590 = Fp(x2589.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2590);
            reg = x2590;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2591 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2591 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2592 = x2589 - x2591;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2593 = x2592 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2594 = Fp(x2593.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2594);
            reg = x2594;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2595 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2595 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2596 = x2593 - x2595;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2597 = x2596 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2597);
          reg = x2597;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2598 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2598 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2599 = x102 - x2598;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2600 = x2598 * x2599;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2600);
          reg = x2600;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2601 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2601 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2602 = x99 - x2598;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2603 = x2601 * x2602;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2603 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2604 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2604 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2604);
          reg = x2604;
        }
        if (x101 != 0) {
          host_args.at(0) = x2534;
          host_args.at(1) = x2466;
          host_args.at(2) = x2470;
          host_args.at(3) = x2478;
          host_args.at(4) = x2482;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2605 = x2534 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2478);
            reg = x2478;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2482);
            reg = x2482;
          }
          {
            host_args.at(0) = x2605;
            host_args.at(1) = x2466;
            host_args.at(2) = x2470;
            host_args.at(3) = x2478;
            host_args.at(4) = x2482;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2606 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2606 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2607 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2607 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2608 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2608 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2609 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2609 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2605);
            reg = x2605;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2145);
            reg = x2145;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2606);
            reg = x2606;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2607);
            reg = x2607;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2608);
            reg = x2608;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2609);
            reg = x2609;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2610 = x2537 + x102;
        if (x2610 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2611 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2611 != Fp::invalid());
      if (x2611 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2612 = x2234 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2612 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2613 = x2223 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2613 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2614 = x2194 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2615 = x2197 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2616 = x2614 + x2615;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2617 = x2616 + x2531;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2618 = x2617 + x2532;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2619 = x2187 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2620 = x2232 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2621 = x2619 + x2620;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2622 = x2189 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2623 = x2621 + x2622;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2624 = x2623 + x2191;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2625 = x2187 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2618);
          reg = x2618;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2624);
          reg = x2624;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2625);
          reg = x2625;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2625);
          reg = x2625;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2626 = x2562 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2627 = Fp(x2626.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2627);
            reg = x2627;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2628 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2628 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2629 = x2626 - x2628;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2630 = x2629 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2631 = Fp(x2630.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2631);
            reg = x2631;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2632 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2632 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2633 = x2630 - x2632;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2634 = x2633 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2635 = Fp(x2634.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2635);
            reg = x2635;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2636 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2636 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2637 = x2634 - x2636;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2638 = x2637 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2639 = Fp(x2638.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2639);
            reg = x2639;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2640 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2640 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2641 = x2638 - x2640;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2642 = x2641 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2642);
          reg = x2642;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2643 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2643 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2644 = x102 - x2643;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2645 = x2643 * x2644;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2645);
          reg = x2645;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2646 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2646 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2647 = x99 - x2643;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2648 = x2646 * x2647;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2648 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2649 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2649 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2649);
          reg = x2649;
        }
        if (x101 != 0) {
          host_args.at(0) = x2534;
          host_args.at(1) = x2466;
          host_args.at(2) = x2470;
          host_args.at(3) = x2478;
          host_args.at(4) = x2482;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2650 = x2534 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2478);
            reg = x2478;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2482);
            reg = x2482;
          }
          {
            host_args.at(0) = x2650;
            host_args.at(1) = x2466;
            host_args.at(2) = x2470;
            host_args.at(3) = x2478;
            host_args.at(4) = x2482;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2651 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2651 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2652 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2652 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2653 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2653 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2654 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2654 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2650);
            reg = x2650;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2145);
            reg = x2145;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2651);
            reg = x2651;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2652);
            reg = x2652;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2653);
            reg = x2653;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2654);
            reg = x2654;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2655 = x2537 + x102;
        if (x2655 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2656 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2656 != Fp::invalid());
      if (x2656 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2657 = x2234 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2657 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2658 = x2223 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2658 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2659 = x2194 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2660 = x2197 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2661 = x2659 + x2660;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2662 = x2661 + x2531;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2663 = x2662 + x2532;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2664 = x2187 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2665 = x2232 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2666 = x2664 + x2665;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2667 = x2189 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2668 = x2666 + x2667;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2669 = x2668 + x2191;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2670 = x2187 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2663);
          reg = x2663;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2669);
          reg = x2669;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2670);
          reg = x2670;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2670);
          reg = x2670;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2671 = x2565 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2672 = Fp(x2671.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2672);
            reg = x2672;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2673 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2673 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2674 = x2671 - x2673;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2675 = x2674 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2676 = Fp(x2675.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2676);
            reg = x2676;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2677 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2677 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2678 = x2675 - x2677;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2679 = x2678 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2680 = Fp(x2679.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2680);
            reg = x2680;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2681 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2681 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2682 = x2679 - x2681;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2683 = x2682 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2684 = Fp(x2683.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2684);
            reg = x2684;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2685 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2685 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2686 = x2683 - x2685;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2687 = x2686 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2687);
          reg = x2687;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2688 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2688 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2689 = x102 - x2688;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2690 = x2688 * x2689;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2690);
          reg = x2690;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2691 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2691 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2692 = x99 - x2688;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2693 = x2691 * x2692;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2693 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2694 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2694 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2694);
          reg = x2694;
        }
        if (x101 != 0) {
          host_args.at(0) = x2534;
          host_args.at(1) = x2466;
          host_args.at(2) = x2470;
          host_args.at(3) = x2478;
          host_args.at(4) = x2482;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2695 = x2534 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2478);
            reg = x2478;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2482);
            reg = x2482;
          }
          {
            host_args.at(0) = x2695;
            host_args.at(1) = x2466;
            host_args.at(2) = x2470;
            host_args.at(3) = x2478;
            host_args.at(4) = x2482;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2696 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2696 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2697 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2697 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2698 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2698 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2699 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2699 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2695);
            reg = x2695;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2145);
            reg = x2145;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2696);
            reg = x2696;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2697);
            reg = x2697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2698);
            reg = x2698;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2699);
            reg = x2699;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2700 = x2537 + x102;
        if (x2700 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2701 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2701 != Fp::invalid());
      if (x2701 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2702 = x2234 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2702 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2703 = x2194 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
        auto x2704 = x2197 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2705 = x2703 + x2704;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2706 = x2705 + x2363;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2707 = x2706 - x2209;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
        auto x2708 = x2209 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2709 = x2225 + x2708;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
        auto x2710 = x2189 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2711 = x2709 + x2710;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2712 = x2711 + x2191;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2713 = x2187 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2714 = x2713 + x2213;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2715 = x2714 + x2215;
        // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
        auto x2716 = x2187 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2707);
          reg = x2707;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2712);
          reg = x2712;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2715);
          reg = x2715;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2716);
          reg = x2716;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2717 = x2550 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2718 = Fp(x2717.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2718);
            reg = x2718;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2719 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2719 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2720 = x2717 - x2719;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2721 = x2720 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2722 = Fp(x2721.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2722);
            reg = x2722;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2723 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2723 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2724 = x2721 - x2723;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2725 = x2724 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2726 = Fp(x2725.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2726);
            reg = x2726;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2727 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2727 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2728 = x2725 - x2727;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2729 = x2728 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2730 = Fp(x2729.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2730);
            reg = x2730;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2731 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2731 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2732 = x2729 - x2731;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2733 = x2732 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2733);
          reg = x2733;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2734 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2734 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2735 = x102 - x2734;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2736 = x2734 * x2735;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2736);
          reg = x2736;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2737 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2737 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2738 = x99 - x2734;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2739 = x2737 * x2738;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2739 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2740 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2740 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2740);
          reg = x2740;
        }
        if (x2538 != 0) {
          host_args.at(0) = x2534;
          host_args.at(1) = x592;
          host_args.at(2) = x593;
          host_args.at(3) = x596;
          host_args.at(4) = x2384;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x2741 = x2534 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x592);
            reg = x592;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x593);
            reg = x593;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x596);
            reg = x596;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2384);
            reg = x2384;
          }
          {
            host_args.at(0) = x2741;
            host_args.at(1) = x592;
            host_args.at(2) = x593;
            host_args.at(3) = x596;
            host_args.at(4) = x2384;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2742 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2742 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2743 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2743 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2744 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2744 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2745 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2745 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2741);
            reg = x2741;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2145);
            reg = x2145;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2742);
            reg = x2742;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2743);
            reg = x2743;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2744);
            reg = x2744;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
        }
        if (x2537 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x2746 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2746 != Fp::invalid());
      if (x2746 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2747 = x2234 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2747 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2223 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2748 = x2194 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2749 = x2197 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2750 = x2748 + x2749;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2751 = x2750 + x2363;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2752 = x2187 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2753 = x2189 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2754 = x2752 + x2753;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2755 = x2754 + x2191;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2756 = x2187 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2751);
          reg = x2751;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2755);
          reg = x2755;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2756);
          reg = x2756;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2756);
          reg = x2756;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2757 = x2554 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2758 = Fp(x2757.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2758);
            reg = x2758;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2759 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2759 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2760 = x2757 - x2759;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2761 = x2760 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2762 = Fp(x2761.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2762);
            reg = x2762;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2763 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2763 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2764 = x2761 - x2763;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2765 = x2764 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2766 = Fp(x2765.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2766);
            reg = x2766;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2767 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2767 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2768 = x2765 - x2767;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2769 = x2768 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2770 = Fp(x2769.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2770);
            reg = x2770;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2771 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2771 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2772 = x2769 - x2771;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2773 = x2772 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2773);
          reg = x2773;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2774 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2774 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2775 = x102 - x2774;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2776 = x2774 * x2775;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2776);
          reg = x2776;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2777 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2777 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2778 = x99 - x2774;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2779 = x2777 * x2778;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2779 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2780 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2780 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2780);
          reg = x2780;
        }
        if (x2538 != 0) {
          host_args.at(0) = x2534;
          host_args.at(1) = x592;
          host_args.at(2) = x593;
          host_args.at(3) = x596;
          host_args.at(4) = x2384;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x2781 = x2534 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x592);
            reg = x592;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x593);
            reg = x593;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x596);
            reg = x596;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2384);
            reg = x2384;
          }
          {
            host_args.at(0) = x2781;
            host_args.at(1) = x592;
            host_args.at(2) = x593;
            host_args.at(3) = x596;
            host_args.at(4) = x2384;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2782 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2782 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2783 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2783 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2784 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2784 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2785 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2785 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2781);
            reg = x2781;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2145);
            reg = x2145;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2782);
            reg = x2782;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2783);
            reg = x2783;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2784);
            reg = x2784;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2785);
            reg = x2785;
          }
        }
        if (x2537 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x2786 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2786 != Fp::invalid());
      if (x2786 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2787 = x2234 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2787 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2225);
          reg = x2225;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2216);
          reg = x2216;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2202);
          reg = x2202;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2788 = x2542 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2789 = Fp(x2788.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2789);
            reg = x2789;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2790 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2790 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2791 = x2788 - x2790;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2792 = x2791 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2793 = Fp(x2792.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2793);
            reg = x2793;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2794 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2794 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2795 = x2792 - x2794;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2796 = x2795 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2797 = Fp(x2796.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2797);
            reg = x2797;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2798 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2798 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2799 = x2796 - x2798;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2800 = x2799 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2801 = Fp(x2800.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2801);
            reg = x2801;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2802 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2802 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2803 = x2800 - x2802;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2804 = x2803 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2804);
          reg = x2804;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2805 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2805 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2806 = x102 - x2805;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2807 = x2805 * x2806;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2807);
          reg = x2807;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2808 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2808 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2809 = x99 - x2805;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2810 = x2808 * x2809;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2810 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2811 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2811 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2811);
          reg = x2811;
        }
        if (x2538 != 0) {
          host_args.at(0) = x2534;
          host_args.at(1) = x2466;
          host_args.at(2) = x2470;
          host_args.at(3) = x2478;
          host_args.at(4) = x2482;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x2812 = x2534 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2478);
            reg = x2478;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2482);
            reg = x2482;
          }
          {
            host_args.at(0) = x2812;
            host_args.at(1) = x2466;
            host_args.at(2) = x2470;
            host_args.at(3) = x2478;
            host_args.at(4) = x2482;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2813 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2813 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2814 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2814 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2815 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2815 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2816 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2816 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2812);
            reg = x2812;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2145);
            reg = x2145;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2813);
            reg = x2813;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2814);
            reg = x2814;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2815);
            reg = x2815;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2816);
            reg = x2816;
          }
        }
        if (x2537 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
      auto x2817 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2817 != Fp::invalid());
      if (x2817 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        auto x2818 = x2234 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        if (x2818 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:60");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2225);
          reg = x2225;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2216);
          reg = x2216;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2202);
          reg = x2202;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2819 = x2542 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2820 = Fp(x2819.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2820);
            reg = x2820;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2821 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2821 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2822 = x2819 - x2821;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2823 = x2822 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2824 = Fp(x2823.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2824);
            reg = x2824;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2825 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2825 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2826 = x2823 - x2825;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2827 = x2826 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2828 = Fp(x2827.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2828);
            reg = x2828;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2829 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2829 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2830 = x2827 - x2829;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2831 = x2830 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2832 = Fp(x2831.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2832);
            reg = x2832;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2833 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2833 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2834 = x2831 - x2833;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2835 = x2834 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2835);
          reg = x2835;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2836 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2836 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2837 = x102 - x2836;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2838 = x2836 * x2837;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2838);
          reg = x2838;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2839 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2839 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2840 = x99 - x2836;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2841 = x2839 * x2840;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2841 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2842 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2842 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2842);
          reg = x2842;
        }
        if (x2538 != 0) {
          host_args.at(0) = x2534;
          host_args.at(1) = x2466;
          host_args.at(2) = x2470;
          host_args.at(3) = x2478;
          host_args.at(4) = x2482;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
          auto x2843 = x2534 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2478);
            reg = x2478;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2482);
            reg = x2482;
          }
          {
            host_args.at(0) = x2843;
            host_args.at(1) = x2466;
            host_args.at(2) = x2470;
            host_args.at(3) = x2478;
            host_args.at(4) = x2482;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2844 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2844 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2845 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2845 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2846 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2846 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2847 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x2847 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2843);
            reg = x2843;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2145);
            reg = x2145;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2844);
            reg = x2844;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2845);
            reg = x2845;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2846);
            reg = x2846;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2847);
            reg = x2847;
          }
        }
        if (x2537 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":39:25))
    auto x2848 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x2848 != Fp::invalid());
    if (x2848 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2849 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2849 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":20:41)
      auto x2850 = x605 * x82;
      {
        host_args.at(0) = x2850;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2851 = host_outs.at(0);
        auto x2852 = host_outs.at(1);
        auto x2853 = host_outs.at(2);
        auto x2854 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2851);
          reg = x2851;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2852);
          reg = x2852;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2853);
          reg = x2853;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2854);
          reg = x2854;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2855 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2856 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2857 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2857 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2858 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x2858 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2850);
        reg = x2850;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2849);
        reg = x2849;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2855);
        reg = x2855;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2856);
        reg = x2856;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2857);
        reg = x2857;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2858);
        reg = x2858;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2859 = Fp(x2858.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2860 = x2859 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2860);
          reg = x2860;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2861 = Fp(x2858.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2862 = x2861 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2862);
          reg = x2862;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2863 = Fp(x2858.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2864 = x2863 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2864);
          reg = x2864;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2865 = Fp(x2858.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2866 = x2865 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2866);
          reg = x2866;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2867 = Fp(x2858.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2868 = x2867 * x62;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2868);
          reg = x2868;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2869 = Fp(x2858.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2869);
          reg = x2869;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2870 = Fp(x2857.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2871 = x2870 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2871);
          reg = x2871;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2872 = Fp(x2857.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2873 = x2872 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2873);
          reg = x2873;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2874 = Fp(x2857.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2875 = x2874 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2875);
          reg = x2875;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2876 = Fp(x2857.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2877 = x2876 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2877);
          reg = x2877;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2878 = Fp(x2857.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2878);
          reg = x2878;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2879 = Fp(x2856.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2880 = x2879 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2880);
          reg = x2880;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2881 = Fp(x2856.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2882 = x2881 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2882);
          reg = x2882;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2883 = Fp(x2856.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2884 = x2883 * x64;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2884);
          reg = x2884;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2885 = Fp(x2856.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2886 = x2885 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2886);
          reg = x2886;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2887 = Fp(x2856.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2887);
          reg = x2887;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2888 = Fp(x2855.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2889 = x2888 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2889);
          reg = x2889;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2890 = Fp(x2855.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2890);
          reg = x2890;
        }
      }
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2891 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2891 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2892 = x2891 * x61;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2893 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2893 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2894 = x2893 * x65;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2895 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2895 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2896 = x2895 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2897 = x2894 + x2896;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2898 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2898 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2899 = x2898 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2900 = x2897 + x2899;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2901 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2901 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2902 = x2900 + x2901;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2903 = x2892 + x2902;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2904 = x2903 * x99;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2905 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2905 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2906 = x2904 + x2905;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2907 = x2858 - x2906;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2907 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2908 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2908 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2909 = x2908 * x77;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2910 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2910 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2911 = x2910 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2912 = x2909 + x2911;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2913 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2913 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2914 = x2912 + x2913;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2915 = x2914 * x65;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2916 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2916 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2917 = x2916 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2918 = x2915 + x2917;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2919 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2919 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2920 = x2918 + x2919;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2921 = x2857 - x2920;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2921 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2922 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2922 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2923 = x2922 * x70;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2924 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2924 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2925 = x2924 * x84;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2926 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2926 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2927 = x2925 + x2926;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2928 = x2927 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2929 = x2923 + x2928;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2930 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2930 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2931 = x2930 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2932 = x2929 + x2931;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2933 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2933 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2934 = x2932 + x2933;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2935 = x2856 - x2934;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2935 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2936 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2936 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2937 = x2936 * x70;
      // loc("Top/Mux/4/Mux/3/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2938 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2938 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2939 = x2937 + x2938;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2940 = x2855 - x2939;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2940 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2855;
        host_args.at(1) = x2856;
        host_args.at(2) = x2857;
        host_args.at(3) = x2858;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2941 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2942 = (x2941 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2942);
            reg = x2942;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2943 = x2941 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2944 = (x2943 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2944);
            reg = x2944;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2945 = x2941 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2946 = (x2945 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2946);
            reg = x2946;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2947 = x2941 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2948 = (x2947 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2948);
            reg = x2948;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2949 = x2941 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2950 = (x2949 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2950);
            reg = x2950;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2951 = x2941 - x80;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2952 = (x2951 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2952);
            reg = x2952;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2953 = x2941 - x79;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2954 = (x2953 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2954);
            reg = x2954;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2955 = x2941 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2956 = (x2955 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2956);
            reg = x2956;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2957 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2957 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2958 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x2958 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2959 = x2958 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2960 = x2957 + x2959;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2961 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x2961 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2962 = x2961 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2963 = x2960 + x2962;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2964 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x2964 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2965 = x2964 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2966 = x2963 + x2965;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2967 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x2967 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2968 = x2967 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2969 = x2966 + x2968;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2970 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2970 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2971 = x2970 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2972 = x2969 + x2971;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2973 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2973 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2974 = x2973 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2975 = x2972 + x2974;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x2976 = x2975 - x2941;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x2976 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x2977 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2977 != Fp::invalid());
        if (x2977 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2978 = x2898 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2979 = x2901 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2980 = x2978 + x2979;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2981 = x2905 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2982 = x2981 + x2914;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2983 = x2980 + x2982;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2984 = x2891 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2985 = x2893 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2986 = x2984 + x2985;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2987 = x2986 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2988 = x2891 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2983);
            reg = x2983;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2987);
            reg = x2987;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2988);
            reg = x2988;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2988);
            reg = x2988;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x2989 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2989 != Fp::invalid());
        if (x2989 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2990 = x2898 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2991 = x2901 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2992 = x2990 + x2991;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2993 = x2905 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2994 = x2993 + x2914;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2995 = x2992 + x2994;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2996 = x2891 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2997 = x2893 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2998 = x2996 + x2997;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2999 = x2998 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3000 = x2891 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2995);
            reg = x2995;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2999);
            reg = x2999;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3000);
            reg = x3000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3000);
            reg = x3000;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3001 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3001 != Fp::invalid());
        if (x3001 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3002 = x2898 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3003 = x2901 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3004 = x3002 + x3003;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3005 = x2905 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3006 = x3005 + x2914;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3007 = x3004 + x3006;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3008 = x2891 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3009 = x2893 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3010 = x3008 + x3009;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3011 = x3010 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3012 = x2891 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3007);
            reg = x3007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3011);
            reg = x3011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3012);
            reg = x3012;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3012);
            reg = x3012;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3013 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3013 != Fp::invalid());
        if (x3013 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3014 = x2898 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3015 = x2901 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3016 = x3014 + x3015;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3017 = x2905 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3018 = x3017 + x2914;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3019 = x3016 + x3018;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3020 = x2891 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3021 = x2893 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3022 = x3020 + x3021;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3023 = x3022 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3024 = x2891 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3019);
            reg = x3019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3023);
            reg = x3023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3024);
            reg = x3024;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3024);
            reg = x3024;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3025 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3025 != Fp::invalid());
        if (x3025 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3026 = x2898 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3027 = x2901 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3028 = x3026 + x3027;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3029 = x2905 * x65;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3030 = x3029 + x2914;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3031 = x3028 + x3030;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3032 = x2891 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3033 = x2893 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3034 = x3032 + x3033;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3035 = x3034 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3036 = x2891 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3031);
            reg = x3031;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3035);
            reg = x3035;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3036);
            reg = x3036;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3036);
            reg = x3036;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3037 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3037 != Fp::invalid());
        if (x3037 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3038 = x2898 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3039 = x2901 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3040 = x3038 + x3039;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3041 = x2930 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3042 = x2933 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3043 = x3041 + x3042;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3044 = x3043 + x2936;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3045 = x3040 + x3044;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3046 = x2891 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3047 = x2893 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3048 = x3046 + x3047;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3049 = x3048 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3050 = x2891 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3045);
            reg = x3045;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3049);
            reg = x3049;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3050);
            reg = x3050;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3050);
            reg = x3050;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3051 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x3051 != Fp::invalid());
        if (x3051 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3052 = x2898 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3053 = x2901 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3054 = x3052 + x3053;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3055 = x2930 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3056 = x2933 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3057 = x3055 + x3056;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3058 = x3057 + x2936;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3059 = x3054 + x3058;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3060 = x2891 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3061 = x2893 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3062 = x3060 + x3061;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3063 = x3062 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3064 = x2891 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3059);
            reg = x3059;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3063);
            reg = x3063;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3064);
            reg = x3064;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3064);
            reg = x3064;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3065 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3065 != Fp::invalid());
        if (x3065 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3066 = x2898 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3067 = x2901 * x67;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3068 = x3066 + x3067;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3069 = x2930 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3070 = x2933 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3071 = x3069 + x3070;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3072 = x3071 + x2936;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3073 = x3068 + x3072;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3074 = x2891 * x55;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3075 = x2893 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3076 = x3074 + x3075;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3077 = x3076 + x2895;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3078 = x2891 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3073);
            reg = x3073;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3077);
            reg = x3077;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3078);
            reg = x3078;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3078);
            reg = x3078;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3079 = x2916 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3080 = x2919 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3081 = x3079 + x3080;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3082 = x3081 + x2922;
      // loc("cirgen/circuit/rv32im/memio.cpp":38:39)
      auto x3083 = x3082 + x54;
      {
        host_args.at(0) = x3083;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3084 = host_outs.at(0);
        auto x3085 = host_outs.at(1);
        auto x3086 = host_outs.at(2);
        auto x3087 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3084);
          reg = x3084;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3085);
          reg = x3085;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3086);
          reg = x3086;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3087);
          reg = x3087;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3088 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3088 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3089 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3089 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3090 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3090 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3091 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3091 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3083);
        reg = x3083;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2849);
        reg = x2849;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3088);
        reg = x3088;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3089);
        reg = x3089;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3090);
        reg = x3090;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3091);
        reg = x3091;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3092 = x2905 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3093 = x3092 + x2914;
      // loc("cirgen/circuit/rv32im/memio.cpp":39:39)
      auto x3094 = x3093 + x54;
      {
        host_args.at(0) = x3094;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3095 = host_outs.at(0);
        auto x3096 = host_outs.at(1);
        auto x3097 = host_outs.at(2);
        auto x3098 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3095);
          reg = x3095;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3096);
          reg = x3096;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3097);
          reg = x3097;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3098);
          reg = x3098;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3099 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3099 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3100 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3100 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3101 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3101 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3102 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x3102 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3094);
        reg = x3094;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2849);
        reg = x2849;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3099);
        reg = x3099;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3100);
        reg = x3100;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3101);
        reg = x3101;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3102);
        reg = x3102;
      }
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3103 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3103 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3104 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3104 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3105 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3105 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3106 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3106 != Fp::invalid());
      host_args.at(0) = x3103;
      host_args.at(1) = x3104;
      host_args.at(2) = x3105;
      host_args.at(3) = x3106;
      host_args.at(4) = x3082;
      host_args.at(5) = x3088;
      host_args.at(6) = x3089;
      host_args.at(7) = x3090;
      host_args.at(8) = x3091;
      host_args.at(9) = x3093;
      host_args.at(10) = x3099;
      host_args.at(11) = x3100;
      host_args.at(12) = x3101;
      host_args.at(13) = x3102;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3107 = x2930 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3108 = x2933 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3109 = x3107 + x3108;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3110 = x3109 + x2936;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3111 = (x3110 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3111);
          reg = x3111;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3112 = inv(x3110);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3112);
          reg = x3112;
        }
      }
      // loc("Top/Mux/4/Mux/3/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3113 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x3113 != Fp::invalid());
      if (x3113 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3110 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x3114 = x102 - x3113;
      if (x3114 != 0) {
        // loc("Top/Mux/4/Mux/3/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3115 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3115 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3116 = x3110 * x3115;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3117 = x3116 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x3117 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":48:17)
        auto x3118 = x3088 + x3103;
        // loc("cirgen/circuit/rv32im/memio.cpp":49:18)
        auto x3119 = Fp(x3118.asUInt32() & x83.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3120 = (x3119 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3120);
            reg = x3120;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3121 = x3119 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3122 = (x3121 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3122);
            reg = x3122;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3123 = x3119 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3124 = (x3123 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3124);
            reg = x3124;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3125 = x3119 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3126 = (x3125 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3126);
            reg = x3126;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3127 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3127 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3128 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3128 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3129 = x3128 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3130 = x3127 + x3129;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3131 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3131 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3132 = x3131 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3133 = x3130 + x3132;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3134 = x3133 - x3119;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3134 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("cirgen/circuit/rv32im/memio.cpp":50:20)
        auto x3135 = Fp(x3118.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":50:19)
        auto x3136 = x3135 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x3137 = Fp(x3136.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3137);
            reg = x3137;
          }
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3138 = x3118 - x3133;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3139 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x3139 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":51:33)
        auto x3140 = x3139 * x97;
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3141 = x3138 - x3140;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3141);
          reg = x3141;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":53:22)
        auto x3142 = x3141 * x82;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3142);
          reg = x3142;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3143 = x3089 + x3104;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3144 = x3143 + x3139;
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3145 = Fp(x3144.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3145);
          reg = x3145;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":56:25)
        auto x3146 = Fp(x3144.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:24)
        auto x3147 = x3146 * x96;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3147);
          reg = x3147;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3148 = x3090 + x3105;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3149 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3149 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3150 = x3148 + x3149;
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3151 = Fp(x3150.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3151);
          reg = x3151;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":59:25)
        auto x3152 = Fp(x3150.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":59:24)
        auto x3153 = x3152 * x96;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3153);
          reg = x3153;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3154 = x3091 + x3106;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3155 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3155 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3156 = x3154 + x3155;
        // loc("cirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3157 = Fp(x3156.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3157);
          reg = x3157;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":62:24)
        auto x3158 = Fp(x3156.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":62:23)
        auto x3159 = x3158 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3159);
          reg = x3159;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":63:20)
        auto x3160 = Fp(x3156.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":63:19)
        auto x3161 = x3160 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x3162 = Fp(x3161.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3162);
            reg = x3162;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3163 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3163 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3164 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3164 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":66:16)
      auto x3165 = x3164 * x84;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3166 = x3163 - x3165;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      if (x3166 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:66");
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3167 = x3088 + x3103;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3168 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3169 = x3168 * x97;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3170 = x3169 + x3163;
      // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3171 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3171 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3172 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3172 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3173 = x3172 * x99;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3174 = x3171 + x3173;
      // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3175 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x3175 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3176 = x3175 * x83;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3177 = x3174 + x3176;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3178 = x3170 + x3177;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3179 = x3167 - x3178;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      if (x3179 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:68");
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3180 = x3089 + x3104;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3181 = x3180 + x3168;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3182 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3183 = x3182 * x97;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3184 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3184 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3185 = x3183 + x3184;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3186 = x3181 - x3185;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      if (x3186 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:70");
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3187 = x3090 + x3105;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3188 = x3187 + x3182;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3189 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3189 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3190 = x3189 * x97;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3191 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3191 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3192 = x3190 + x3191;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3193 = x3188 - x3192;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      if (x3193 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:72");
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3194 = x3091 + x3106;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3195 = x3194 + x3189;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3196 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3196 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3197 = x3196 * x97;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3198 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3198 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:63)
      auto x3199 = x3198 * x84;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3200 = x3197 + x3199;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3201 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3201 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3202 = x3200 + x3201;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3203 = x3195 - x3202;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      if (x3203 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:74");
      // loc("cirgen/circuit/rv32im/memio.cpp":77:15)
      auto x3204 = x102 - x3198;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3205 = x3198 * x3204;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:28)
      auto x3206 = x99 - x3198;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3207 = x3205 * x3206;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      if (x3207 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:77");
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3208 = x3198 * x85;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:41)
      auto x3209 = x3201 * x43;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3210 = x3208 + x3209;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:68)
      auto x3211 = x3191 * x42;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3212 = x3210 + x3211;
      // loc("cirgen/circuit/rv32im/memio.cpp":81:14)
      auto x3213 = x3184 * x61;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3214 = x3212 + x3213;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3215 = x3214 + x3164;
      {
        host_args.at(0) = x3215;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3216 = host_outs.at(0);
        auto x3217 = host_outs.at(1);
        auto x3218 = host_outs.at(2);
        auto x3219 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3216);
          reg = x3216;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3217);
          reg = x3217;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3218);
          reg = x3218;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3219);
          reg = x3219;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3220 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3220 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3221 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3221 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3222 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3222 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3223 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x3223 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3215);
        reg = x3215;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2849);
        reg = x2849;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3220);
        reg = x3220;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3221);
        reg = x3221;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3222);
        reg = x3222;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3223);
        reg = x3223;
      }
      host_args.at(0) = x3215;
      host_args.at(1) = x3177;
      host_args.at(2) = x3220;
      host_args.at(3) = x3221;
      host_args.at(4) = x3222;
      host_args.at(5) = x3223;
      host(ctx, "log", "  Addr = 0x%x, lowBits = %u, loaded = %w", host_args.data(), 6, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":85:17)
      auto x3224 = x605 + x84;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3225 = x3224 + x84;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3226 = Fp(x3225.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3226);
          reg = x3226;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3227 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3227 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3228 = x3225 - x3227;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3229 = x3228 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3230 = Fp(x3229.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3230);
          reg = x3230;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3231 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3231 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3232 = x3229 - x3231;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3233 = x3232 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3234 = Fp(x3233.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3234);
          reg = x3234;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3235 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3235 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3236 = x3233 - x3235;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3237 = x3236 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3238 = Fp(x3237.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3238);
          reg = x3238;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3239 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3239 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3240 = x3237 - x3239;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3241 = x3240 * x82;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3241);
        reg = x3241;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3242 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3242 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3243 = x102 - x3242;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x3244 = x3242 * x3243;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3244);
        reg = x3244;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3245 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x3245 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3246 = x99 - x3242;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x3247 = x3245 * x3246;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3247 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/memio.cpp":86:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
      auto x3248 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3248 != Fp::invalid());
      if (x3248 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3249 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3249 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3250 = x3249 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3250 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3251 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3251 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3252 = x3251 + x3172;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3253 = x3252 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3253 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3254 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3254 != Fp::invalid());
        if (x3254 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3255 = Fp(x3220.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3255);
              reg = x3255;
            }
          }
        }
        if (x3171 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3256 = Fp(x3221.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3256);
              reg = x3256;
            }
          }
        }
        if (x3172 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3257 = Fp(x3222.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3257);
              reg = x3257;
            }
          }
        }
        if (x3175 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3258 = Fp(x3223.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3258);
              reg = x3258;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3259 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3259 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3260 = Fp(x3259.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3261 = x3260 * x69;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3261);
            reg = x3261;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3262 = Fp(x3259.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3263 = x3262 * x99;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3263);
            reg = x3263;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3264 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3264 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3265 = x102 - x3264;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3266 = x3264 * x3265;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3266 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3267 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3267 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3268 = x3264 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3269 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3269 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3270 = x3269 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3271 = x3268 + x3270;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3272 = x3267 - x3271;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3272 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3273 = x3264 * x98;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3274 = x3254 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3275 = x3171 * x3221;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3276 = x3274 + x3275;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3277 = x3172 * x3222;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3278 = x3276 + x3277;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3279 = x3175 * x3223;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3280 = x3278 + x3279;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3280);
          reg = x3280;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3273);
          reg = x3273;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3273);
          reg = x3273;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3273);
          reg = x3273;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3281 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3281 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3282 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3282 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3283 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3283 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3284 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3284 != Fp::invalid());
        host_args.at(0) = x3273;
        host_args.at(1) = x3281;
        host_args.at(2) = x3282;
        host_args.at(3) = x3283;
        host_args.at(4) = x3284;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3114 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3285 = x3110 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3281);
            reg = x3281;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3282);
            reg = x3282;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3283);
            reg = x3283;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3284);
            reg = x3284;
          }
          {
            host_args.at(0) = x3285;
            host_args.at(1) = x3281;
            host_args.at(2) = x3282;
            host_args.at(3) = x3283;
            host_args.at(4) = x3284;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3286 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3286 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3287 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3287 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3288 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3288 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3289 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3289 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3285);
            reg = x3285;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2849);
            reg = x2849;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3286);
            reg = x3286;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3287);
            reg = x3287;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3288);
            reg = x3288;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3289);
            reg = x3289;
          }
        }
        if (x3113 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3290 = x2938 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3290 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x2927 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3291 = x2898 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3292 = x2901 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3293 = x3291 + x3292;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3294 = x3293 + x3093;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3295 = x2891 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3296 = x2893 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3297 = x3295 + x3296;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3298 = x3297 + x2895;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3299 = x2891 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3294);
          reg = x3294;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3298);
          reg = x3298;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3299);
          reg = x3299;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3299);
          reg = x3299;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3300 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3300 != Fp::invalid());
      if (x3300 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3301 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3301 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3302 = x3301 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3302 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3303 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3303 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3304 = x3303 + x3172;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3305 = x3304 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3305 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3306 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3306 != Fp::invalid());
        if (x3306 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3307 = Fp(x3221.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3307);
              reg = x3307;
            }
          }
        }
        if (x3172 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3308 = Fp(x3223.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3308);
              reg = x3308;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3309 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3309 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3310 = Fp(x3309.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3311 = x3310 * x69;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3311);
            reg = x3311;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3312 = Fp(x3309.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3313 = x3312 * x99;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3313);
            reg = x3313;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3314 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3314 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3315 = x102 - x3314;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3316 = x3314 * x3315;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3316 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3317 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3317 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3318 = x3314 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3319 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3319 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3320 = x3319 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3321 = x3318 + x3320;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3322 = x3317 - x3321;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3322 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3323 = x3314 * x98;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3324 = x3306 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3325 = x3172 * x3222;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3326 = x3324 + x3325;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3327 = x3306 * x3221;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3328 = x3172 * x3223;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3329 = x3327 + x3328;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3326);
          reg = x3326;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3329);
          reg = x3329;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3323);
          reg = x3323;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3323);
          reg = x3323;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3330 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3330 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3331 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3331 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3332 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3333 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3333 != Fp::invalid());
        host_args.at(0) = x3323;
        host_args.at(1) = x3330;
        host_args.at(2) = x3331;
        host_args.at(3) = x3332;
        host_args.at(4) = x3333;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3114 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3334 = x3110 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3330);
            reg = x3330;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3331);
            reg = x3331;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3332);
            reg = x3332;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3333);
            reg = x3333;
          }
          {
            host_args.at(0) = x3334;
            host_args.at(1) = x3330;
            host_args.at(2) = x3331;
            host_args.at(3) = x3332;
            host_args.at(4) = x3333;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3335 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3335 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3336 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3336 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3337 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3337 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3338 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3338 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3334);
            reg = x3334;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2849);
            reg = x2849;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3335);
            reg = x3335;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3336);
            reg = x3336;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3337);
            reg = x3337;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3338);
            reg = x3338;
          }
        }
        if (x3113 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3339 = x2938 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3339 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3340 = x2927 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3340 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3341 = x2898 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3342 = x2901 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3343 = x3341 + x3342;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3344 = x3343 + x3093;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3345 = x2891 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3346 = x2893 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3347 = x3345 + x3346;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3348 = x3347 + x2895;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3349 = x2891 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3344);
          reg = x3344;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3348);
          reg = x3348;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3349);
          reg = x3349;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3349);
          reg = x3349;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3350 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3350 != Fp::invalid());
      if (x3350 != 0) {
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3351 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3351 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3352 = x3351 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3352 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3353 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3353 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3354 = x3353 + x3172;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3355 = x3354 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3355 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3356 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3356 != Fp::invalid());
        if (x3356 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3357 = Fp(x3223.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3357);
              reg = x3357;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3358 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3358 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3359 = Fp(x3358.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3360 = x3359 * x69;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3360);
            reg = x3360;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3361 = Fp(x3358.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3362 = x3361 * x99;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3362);
            reg = x3362;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3363 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3363 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3364 = x102 - x3363;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3365 = x3363 * x3364;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3365 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3366 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3366 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3367 = x3363 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3368 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3368 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3369 = x3368 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3370 = x3367 + x3369;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3371 = x3366 - x3370;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3371 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3372 = x3356 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3373 = x3356 * x3221;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3374 = x3356 * x3222;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3375 = x3356 * x3223;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3372);
          reg = x3372;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3373);
          reg = x3373;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3374);
          reg = x3374;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3375);
          reg = x3375;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3376 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3376 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3377 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3377 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3378 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3378 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3379 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3379 != Fp::invalid());
        host_args.at(0) = x101;
        host_args.at(1) = x3376;
        host_args.at(2) = x3377;
        host_args.at(3) = x3378;
        host_args.at(4) = x3379;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3114 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3380 = x3110 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3376);
            reg = x3376;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3377);
            reg = x3377;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3378);
            reg = x3378;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3379);
            reg = x3379;
          }
          {
            host_args.at(0) = x3380;
            host_args.at(1) = x3376;
            host_args.at(2) = x3377;
            host_args.at(3) = x3378;
            host_args.at(4) = x3379;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3381 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3381 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3382 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3382 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3383 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3383 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3384 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3384 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3380);
            reg = x3380;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2849);
            reg = x2849;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3381);
            reg = x3381;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3382);
            reg = x3382;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3383);
            reg = x3383;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3384);
            reg = x3384;
          }
        }
        if (x3113 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3385 = x2938 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3385 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3386 = x2927 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3386 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3387 = x2898 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3388 = x2901 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3389 = x3387 + x3388;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3390 = x3389 + x3093;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3391 = x2891 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3392 = x2893 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3393 = x3391 + x3392;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3394 = x3393 + x2895;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3395 = x2891 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3390);
          reg = x3390;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3394);
          reg = x3394;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3395);
          reg = x3395;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3395);
          reg = x3395;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3396 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3396 != Fp::invalid());
      if (x3396 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3397 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3397 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3398 = x3397 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3398 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3399 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3399 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3400 = x3399 + x3172;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3401 = x3400 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3401 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3402 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3402 != Fp::invalid());
        if (x3402 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3403 = Fp(x3220.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3403);
              reg = x3403;
            }
          }
        }
        if (x3171 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3404 = Fp(x3221.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3404);
              reg = x3404;
            }
          }
        }
        if (x3172 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3405 = Fp(x3222.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3405);
              reg = x3405;
            }
          }
        }
        if (x3175 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3406 = Fp(x3223.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3406);
              reg = x3406;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3407 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3407 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3408 = Fp(x3407.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3409 = x3408 * x69;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3409);
            reg = x3409;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3410 = Fp(x3407.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3411 = x3410 * x99;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3411);
            reg = x3411;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3412 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3412 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3413 = x102 - x3412;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3414 = x3412 * x3413;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3414 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3415 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3415 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3416 = x3412 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3417 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3417 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3418 = x3417 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3419 = x3416 + x3418;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3420 = x3415 - x3419;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3420 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3421 = x3402 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3422 = x3171 * x3221;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3423 = x3421 + x3422;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3424 = x3172 * x3222;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3425 = x3423 + x3424;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3426 = x3175 * x3223;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3427 = x3425 + x3426;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3427);
          reg = x3427;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3428 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3428 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3429 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3429 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3430 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3430 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3431 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3431 != Fp::invalid());
        host_args.at(0) = x101;
        host_args.at(1) = x3428;
        host_args.at(2) = x3429;
        host_args.at(3) = x3430;
        host_args.at(4) = x3431;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3114 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3432 = x3110 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3428);
            reg = x3428;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3429);
            reg = x3429;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3430);
            reg = x3430;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3431);
            reg = x3431;
          }
          {
            host_args.at(0) = x3432;
            host_args.at(1) = x3428;
            host_args.at(2) = x3429;
            host_args.at(3) = x3430;
            host_args.at(4) = x3431;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3433 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3433 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3434 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3434 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3435 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3435 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3436 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3436 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3432);
            reg = x3432;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2849);
            reg = x2849;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3433);
            reg = x3433;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3434);
            reg = x3434;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3435);
            reg = x3435;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3436);
            reg = x3436;
          }
        }
        if (x3113 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3437 = x2938 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3437 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3438 = x2927 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3438 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3439 = x2898 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3440 = x2901 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3441 = x3439 + x3440;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3442 = x3441 + x3093;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3443 = x2891 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3444 = x2893 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3445 = x3443 + x3444;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3446 = x3445 + x2895;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3447 = x2891 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3442);
          reg = x3442;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3446);
          reg = x3446;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3447);
          reg = x3447;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3447);
          reg = x3447;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3448 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3448 != Fp::invalid());
      if (x3448 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3449 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3449 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3450 = x3449 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3450 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3451 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3451 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3452 = x3451 + x3172;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3453 = x3452 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3453 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3454 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3454 != Fp::invalid());
        if (x3454 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3455 = Fp(x3221.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3455);
              reg = x3455;
            }
          }
        }
        if (x3172 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3456 = Fp(x3223.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3456);
              reg = x3456;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3457 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3457 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3458 = Fp(x3457.asUInt32() & x70.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3459 = x3458 * x69;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3459);
            reg = x3459;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3460 = Fp(x3457.asUInt32() & x58.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3461 = x3460 * x99;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3461);
            reg = x3461;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3462 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3462 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3463 = x102 - x3462;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3464 = x3462 * x3463;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3464 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3465 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3465 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3466 = x3462 * x70;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3467 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3467 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3468 = x3467 * x62;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3469 = x3466 + x3468;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3470 = x3465 - x3469;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3470 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3471 = x3454 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3472 = x3172 * x3222;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3473 = x3471 + x3472;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3474 = x3454 * x3221;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3475 = x3172 * x3223;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3476 = x3474 + x3475;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3473);
          reg = x3473;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3476);
          reg = x3476;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3477 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3477 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3478 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3478 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3479 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3479 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3480 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3480 != Fp::invalid());
        host_args.at(0) = x101;
        host_args.at(1) = x3477;
        host_args.at(2) = x3478;
        host_args.at(3) = x3479;
        host_args.at(4) = x3480;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3114 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3481 = x3110 + x54;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3477);
            reg = x3477;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3478);
            reg = x3478;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3479);
            reg = x3479;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3480);
            reg = x3480;
          }
          {
            host_args.at(0) = x3481;
            host_args.at(1) = x3477;
            host_args.at(2) = x3478;
            host_args.at(3) = x3479;
            host_args.at(4) = x3480;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3482 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3482 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3483 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3483 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3484 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3484 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3485 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3485 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3481);
            reg = x3481;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2849);
            reg = x2849;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3482);
            reg = x3482;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3483);
            reg = x3483;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3484);
            reg = x3484;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3485);
            reg = x3485;
          }
        }
        if (x3113 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3486 = x2938 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3486 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3487 = x2927 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3487 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3488 = x2898 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3489 = x2901 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3490 = x3488 + x3489;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3491 = x3490 + x3093;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3492 = x2891 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3493 = x2893 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3494 = x3492 + x3493;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3495 = x3494 + x2895;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3496 = x2891 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3491);
          reg = x3491;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3495);
          reg = x3495;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3496);
          reg = x3496;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3496);
          reg = x3496;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3497 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3497 != Fp::invalid());
      if (x3497 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3498 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3498 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3499 = x3498 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3499 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3500 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3500 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3501 = x3500 + x3172;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3502 = x3501 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3502 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3503 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3503 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3504 = x3503 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3505 = x102 - x3503;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3506 = x3505 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3507 = x3504 + x3506;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3508 = x3171 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3509 = x102 - x3171;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3510 = x3509 * x3221;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3511 = x3508 + x3510;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3512 = x3172 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3513 = x102 - x3172;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3514 = x3513 * x3222;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3515 = x3512 + x3514;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3516 = x3175 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3517 = x102 - x3175;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3518 = x3517 * x3223;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3519 = x3516 + x3518;
        host_args.at(0) = x3507;
        host_args.at(1) = x3511;
        host_args.at(2) = x3515;
        host_args.at(3) = x3519;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3507);
          reg = x3507;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3511);
          reg = x3511;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3515);
          reg = x3515;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3519);
          reg = x3519;
        }
        {
          host_args.at(0) = x3215;
          host_args.at(1) = x3507;
          host_args.at(2) = x3511;
          host_args.at(3) = x3515;
          host_args.at(4) = x3519;
          host_args.at(5) = x99;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3520 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3521 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3522 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3523 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x3523 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3215);
          reg = x3215;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2849);
          reg = x2849;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3520);
          reg = x3520;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3521);
          reg = x3521;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3522);
          reg = x3522;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3523);
          reg = x3523;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3524 = x2938 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3524 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x2927 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3525 = x2898 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3526 = x2901 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3527 = x3525 + x3526;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3528 = x3527 + x3110;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3529 = x2891 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3530 = x2893 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3531 = x3529 + x3530;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3532 = x3531 + x2895;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3533 = x2891 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3528);
          reg = x3528;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3532);
          reg = x3532;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3533);
          reg = x3533;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3533);
          reg = x3533;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3534 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3534 != Fp::invalid());
      if (x3534 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3535 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3535 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3536 = x3535 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3536 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3537 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3537 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3538 = x3537 + x3172;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3539 = x3538 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3539 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3540 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3540 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3541 = x3540 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3542 = x102 - x3540;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3543 = x3542 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3544 = x3541 + x3543;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3545 = x3172 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3546 = x102 - x3172;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3547 = x3546 * x3222;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3548 = x3545 + x3547;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3549 = x3540 * x3100;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3550 = x3542 * x3221;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3551 = x3549 + x3550;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3552 = x3172 * x3100;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3553 = x3546 * x3223;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3554 = x3552 + x3553;
        host_args.at(0) = x3544;
        host_args.at(1) = x3551;
        host_args.at(2) = x3548;
        host_args.at(3) = x3554;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3544);
          reg = x3544;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3551);
          reg = x3551;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3548);
          reg = x3548;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3554);
          reg = x3554;
        }
        {
          host_args.at(0) = x3215;
          host_args.at(1) = x3544;
          host_args.at(2) = x3551;
          host_args.at(3) = x3548;
          host_args.at(4) = x3554;
          host_args.at(5) = x99;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3555 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3555 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3556 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3556 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3557 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3557 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3558 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x3558 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3215);
          reg = x3215;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2849);
          reg = x2849;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3555);
          reg = x3555;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3556);
          reg = x3556;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3557);
          reg = x3557;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3558);
          reg = x3558;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3559 = x2938 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3559 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3560 = x2927 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3560 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3561 = x2898 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3562 = x2901 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3563 = x3561 + x3562;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3564 = x3563 + x3110;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3565 = x2891 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3566 = x2893 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3567 = x3565 + x3566;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3568 = x3567 + x2895;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3569 = x2891 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3564);
          reg = x3564;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3568);
          reg = x3568;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3569);
          reg = x3569;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3569);
          reg = x3569;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3570 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3570 != Fp::invalid());
      if (x3570 != 0) {
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3571 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3571 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3572 = x3571 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3572 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3573 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x3573 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3574 = x3573 + x3172;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3575 = x3574 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3575 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3576 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3576 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3577 = x3576 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3578 = x102 - x3576;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3579 = x3578 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3580 = x3577 + x3579;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3581 = x3576 * x3100;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3582 = x3578 * x3221;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3583 = x3581 + x3582;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3584 = x3576 * x3101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3585 = x3578 * x3222;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3586 = x3584 + x3585;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3587 = x3576 * x3102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3588 = x3578 * x3223;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3589 = x3587 + x3588;
        host_args.at(0) = x3580;
        host_args.at(1) = x3583;
        host_args.at(2) = x3586;
        host_args.at(3) = x3589;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3580);
          reg = x3580;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3583);
          reg = x3583;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3586);
          reg = x3586;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
        {
          host_args.at(0) = x3215;
          host_args.at(1) = x3580;
          host_args.at(2) = x3583;
          host_args.at(3) = x3586;
          host_args.at(4) = x3589;
          host_args.at(5) = x99;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3590 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3591 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3591 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3592 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3592 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3593 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x3593 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3215);
          reg = x3215;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2849);
          reg = x2849;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3590);
          reg = x3590;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3591);
          reg = x3591;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3592);
          reg = x3592;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3593);
          reg = x3593;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3594 = x2938 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3594 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3595 = x2927 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3595 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3596 = x2898 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3597 = x2901 * x67;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3598 = x3596 + x3597;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3599 = x3598 + x3110;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3600 = x2891 * x55;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3601 = x2893 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3602 = x3600 + x3601;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3603 = x3602 + x2895;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3604 = x2891 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3599);
          reg = x3599;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3603);
          reg = x3603;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3604);
          reg = x3604;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3604);
          reg = x3604;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":39:25))
    auto x3605 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x3605 != Fp::invalid());
    if (x3605 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3606 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x3606 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":20:41)
      auto x3607 = x605 * x82;
      {
        host_args.at(0) = x3607;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3608 = host_outs.at(0);
        auto x3609 = host_outs.at(1);
        auto x3610 = host_outs.at(2);
        auto x3611 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3608);
          reg = x3608;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3609);
          reg = x3609;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3610);
          reg = x3610;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3611);
          reg = x3611;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3612 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x3612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3613 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x3613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3614 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x3614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3615 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x3615 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3607);
        reg = x3607;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3606);
        reg = x3606;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3612);
        reg = x3612;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3613);
        reg = x3613;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3614);
        reg = x3614;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3615);
        reg = x3615;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3616 = Fp(x3615.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3617 = x3616 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3617);
          reg = x3617;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3618 = Fp(x3615.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3619 = x3618 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3619);
          reg = x3619;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3620 = Fp(x3615.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3621 = x3620 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3621);
          reg = x3621;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3622 = Fp(x3615.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3623 = x3622 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3623);
          reg = x3623;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3624 = Fp(x3615.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3625 = x3624 * x62;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3625);
          reg = x3625;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3626 = Fp(x3615.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3626);
          reg = x3626;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3627 = Fp(x3614.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3628 = x3627 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3628);
          reg = x3628;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3629 = Fp(x3614.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3630 = x3629 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3630);
          reg = x3630;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3631 = Fp(x3614.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3632 = x3631 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3632);
          reg = x3632;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3633 = Fp(x3614.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3634 = x3633 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3634);
          reg = x3634;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3635 = Fp(x3614.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3635);
          reg = x3635;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3636 = Fp(x3613.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3637 = x3636 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3637);
          reg = x3637;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3638 = Fp(x3613.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3639 = x3638 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3639);
          reg = x3639;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3640 = Fp(x3613.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3641 = x3640 * x64;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3641);
          reg = x3641;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3642 = Fp(x3613.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3643 = x3642 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3643);
          reg = x3643;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3644 = Fp(x3613.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3644);
          reg = x3644;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3645 = Fp(x3612.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3646 = x3645 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3646);
          reg = x3646;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3647 = Fp(x3612.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3647);
          reg = x3647;
        }
      }
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3648 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x3648 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3649 = x3648 * x61;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3650 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3650 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3651 = x3650 * x65;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3652 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x3652 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3653 = x3652 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3654 = x3651 + x3653;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3655 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x3655 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3656 = x3655 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3657 = x3654 + x3656;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3658 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3658 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3659 = x3657 + x3658;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3660 = x3649 + x3659;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3661 = x3660 * x99;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3662 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x3662 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3663 = x3661 + x3662;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3664 = x3615 - x3663;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3664 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3665 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x3665 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3666 = x3665 * x77;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3667 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3667 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3668 = x3667 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3669 = x3666 + x3668;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3670 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x3670 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3671 = x3669 + x3670;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3672 = x3671 * x65;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3673 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3673 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3674 = x3673 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3675 = x3672 + x3674;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3676 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3676 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3677 = x3675 + x3676;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3678 = x3614 - x3677;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3678 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3679 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x3679 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3680 = x3679 * x70;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3681 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x3681 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3682 = x3681 * x84;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3683 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3683 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3684 = x3682 + x3683;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3685 = x3684 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3686 = x3680 + x3685;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3687 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3687 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3688 = x3687 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3689 = x3686 + x3688;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3690 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3690 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3691 = x3689 + x3690;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3692 = x3613 - x3691;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3692 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3693 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x3693 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3694 = x3693 * x70;
      // loc("Top/Mux/4/Mux/4/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3695 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x3695 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3696 = x3694 + x3695;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3697 = x3612 - x3696;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3697 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3612;
        host_args.at(1) = x3613;
        host_args.at(2) = x3614;
        host_args.at(3) = x3615;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3698 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3699 = (x3698 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3699);
            reg = x3699;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3700 = x3698 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3701 = (x3700 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3701);
            reg = x3701;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3702 = x3698 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3703 = (x3702 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3703);
            reg = x3703;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3704 = x3698 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3705 = (x3704 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3705);
            reg = x3705;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3706 = x3698 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3707 = (x3706 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3707);
            reg = x3707;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3708 = x3698 - x80;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3709 = (x3708 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3709);
            reg = x3709;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3710 = x3698 - x79;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3711 = (x3710 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3711);
            reg = x3711;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3712 = x3698 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3713 = (x3712 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3713);
            reg = x3713;
          }
        }
        // loc("Top/Mux/4/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3714 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x3714 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3715 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x3715 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3716 = x3715 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3717 = x3714 + x3716;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3718 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x3718 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3719 = x3718 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3720 = x3717 + x3719;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3721 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x3721 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3722 = x3721 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3723 = x3720 + x3722;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3724 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x3724 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3725 = x3724 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3726 = x3723 + x3725;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3727 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x3727 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3728 = x3727 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3729 = x3726 + x3728;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3730 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x3730 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3731 = x3730 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3732 = x3729 + x3731;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3733 = x3732 - x3698;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3733 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      host_args.at(0) = x101;
      host_args.at(1) = x101;
      host_args.at(2) = x101;
      host_args.at(3) = x101;
      host_args.at(4) = x101;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/4/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3734 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x3734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x3735 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x3735 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x3736 = x3734 + x3735;
      // loc("Top/Mux/4/Mux/4/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x3737 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x3737 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x3738 = x3736 + x3737;
      // loc("Top/Mux/4/Mux/4/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x3739 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x3740 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x3740 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x3741 = x3739 + x3740;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3742 = x3673 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3743 = x3676 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3744 = x3742 + x3743;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3745 = x3744 + x3679;
      // loc("cirgen/circuit/rv32im/multiply.cpp":54:39)
      auto x3746 = x3745 + x54;
      {
        host_args.at(0) = x3746;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3747 = host_outs.at(0);
        auto x3748 = host_outs.at(1);
        auto x3749 = host_outs.at(2);
        auto x3750 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3747);
          reg = x3747;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3748);
          reg = x3748;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3749);
          reg = x3749;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3750);
          reg = x3750;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3751 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3752 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3753 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3754 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3754 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3746);
        reg = x3746;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3606);
        reg = x3606;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3751);
        reg = x3751;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3752);
        reg = x3752;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3753);
        reg = x3753;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3754);
        reg = x3754;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3755 = x3662 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3756 = x3755 + x3671;
      // loc("cirgen/circuit/rv32im/multiply.cpp":55:39)
      auto x3757 = x3756 + x54;
      {
        host_args.at(0) = x3757;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3758 = host_outs.at(0);
        auto x3759 = host_outs.at(1);
        auto x3760 = host_outs.at(2);
        auto x3761 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3758);
          reg = x3758;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3759);
          reg = x3759;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3760);
          reg = x3760;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3761);
          reg = x3761;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3762 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3763 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3764 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3764 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3765 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x3765 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3757);
        reg = x3757;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3606);
        reg = x3606;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3762);
        reg = x3762;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3763);
        reg = x3763;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3764);
        reg = x3764;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3765);
        reg = x3765;
      }
      host_args.at(0) = x3745;
      host_args.at(1) = x3751;
      host_args.at(2) = x3752;
      host_args.at(3) = x3753;
      host_args.at(4) = x3754;
      host_args.at(5) = x3756;
      host_args.at(6) = x3762;
      host_args.at(7) = x3763;
      host_args.at(8) = x3764;
      host_args.at(9) = x3765;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3766 = x3655 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x3767 = x3658 * x67;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3768 = x3766 + x3767;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3769 = x3768 + x3756;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3770 = x3740 * x3769;
      // loc("cirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x3771 = x102 - x3740;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3772 = x3771 * x3762;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3773 = x3770 + x3772;
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x3774 = Fp(x3773.asUInt32() & x40.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:15)
        auto x3775 = x3774 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3775);
          reg = x3775;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x3776 = Fp(x3773.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:15)
        auto x3777 = x3776 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3777);
          reg = x3777;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x3778 = Fp(x3773.asUInt32() & x39.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3779 = Fp(x3778.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3779);
            reg = x3779;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3780 = Fp(x3778.asUInt32() & x99.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3781 = x3780 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3781);
            reg = x3781;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3782 = Fp(x3778.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3783 = x3782 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3783);
            reg = x3783;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3784 = Fp(x3778.asUInt32() & x77.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3785 = x3784 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3785);
            reg = x3785;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3786 = Fp(x3778.asUInt32() & x65.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3787 = x3786 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3787);
            reg = x3787;
          }
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3788 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x3788 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x3789 = x3788 * x87;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x3790 = x3789 + x102;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3791 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x3791 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x3792 = x3791 * x83;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x3793 = x3792 + x102;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3794 = x3790 * x3793;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3795 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x3795 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x3796 = x3795 + x102;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3797 = x3794 * x3796;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3798 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x3798 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3799 = x3798 * x99;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3800 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x3800 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3801 = x3799 + x3800;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x3802 = (x3801 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x3803 = x3802 * x3797;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3804 = x3801 - x102;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3805 = (x3804 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x3806 = x3805 * x3797;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3807 = x3801 - x99;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3808 = (x3807 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x3809 = x3808 * x3797;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3810 = x3801 - x83;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3811 = (x3810 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x3812 = x3811 * x3797;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3803);
            reg = x3803;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3806);
            reg = x3806;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3809);
            reg = x3809;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3812);
            reg = x3812;
          }
        }
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3813 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x3813 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3814 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x3814 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3815 = x3814 * x99;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3816 = x3813 + x3815;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3817 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x3817 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3818 = x3817 * x84;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3819 = x3816 + x3818;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3820 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x3820 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3821 = x3820 * x77;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3822 = x3819 + x3821;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3823 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x3823 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3824 = x3823 * x65;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3825 = x3822 + x3824;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x3826 = x3825 - x3778;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x3826 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/4/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3827 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x3827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3828 = x3827 * x61;
      // loc("Top/Mux/4/Mux/4/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3829 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x3829 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:37)
      auto x3830 = x3829 * x67;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3831 = x3828 + x3830;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3832 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x3832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3833 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3833 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3834 = x3833 * x99;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3835 = x3832 + x3834;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3836 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3836 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3837 = x3836 * x84;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3838 = x3835 + x3837;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3839 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3839 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3840 = x3839 * x77;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3841 = x3838 + x3840;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3842 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3842 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3843 = x3842 * x65;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3844 = x3841 + x3843;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3845 = x3831 + x3844;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x3846 = x3773 - x3845;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x3846 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3847 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3848 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3848 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3849 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3849 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3850 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3850 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3851 = x3741 * x3847;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3852 = x3741 * x3848;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3853 = x3741 * x3849;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3854 = x3741 * x3850;
      // loc("cirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x3855 = x102 - x3741;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3856 = x3855 * x3762;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3857 = x3855 * x3763;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3858 = x3855 * x3764;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3859 = x3855 * x3765;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3860 = x3851 + x3856;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3861 = x3852 + x3857;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3862 = x3853 + x3858;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3863 = x3854 + x3859;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3864 = Fp(x3754.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3865 = x3864 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3865);
          reg = x3865;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3866 = Fp(x3754.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3867 = x3866 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3867);
          reg = x3867;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3868 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3868 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3869 = x3868 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3870 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x3870 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3871 = x3870 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3872 = x3869 + x3871;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3873 = x3754 - x3872;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3873 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3874 = Fp(x3863.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3875 = x3874 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3875);
          reg = x3875;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3876 = Fp(x3863.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3877 = x3876 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3877);
          reg = x3877;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3878 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3878 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3879 = x3878 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3880 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x3880 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3881 = x3880 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3882 = x3879 + x3881;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3883 = x3863 - x3882;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3883 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":213:13)
      auto x3884 = x3734 * x3878;
      // loc("cirgen/components/u32.cpp":213:3)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3884);
        reg = x3884;
      }
      // loc("cirgen/components/u32.cpp":214:13)
      auto x3885 = x3736 * x3868;
      // loc("cirgen/components/u32.cpp":214:3)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3885);
        reg = x3885;
      }
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3886 = x3751 * x3860;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3887 = x3752 * x3860;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3888 = x3751 * x3861;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3889 = x3887 + x3888;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3890 = x3889 * x97;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3891 = x3886 + x3890;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3892 = Fp(x3891.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3892);
          reg = x3892;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3893 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x3893 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3894 = x3891 - x3893;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3895 = x3894 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3896 = Fp(x3895.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3896);
          reg = x3896;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3897 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3897 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3898 = x3895 - x3897;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3899 = x3898 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3900 = Fp(x3899.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3900);
          reg = x3900;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3901 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3901 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3902 = x3899 - x3901;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3903 = x3902 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3903);
        reg = x3903;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3904 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3904 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3905 = x3904 * x97;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3906 = x3901 + x3905;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3907 = x3753 * x3860;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3908 = x3752 * x3861;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3909 = x3907 + x3908;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3910 = x3751 * x3862;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3911 = x3909 + x3910;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3912 = x3906 + x3911;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3913 = x3754 * x3860;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3914 = x3753 * x3861;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3915 = x3913 + x3914;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3916 = x3752 * x3862;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3917 = x3915 + x3916;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3918 = x3751 * x3863;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3919 = x3917 + x3918;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3920 = x3919 * x97;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3921 = x3912 + x3920;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3922 = Fp(x3921.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3922);
          reg = x3922;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3923 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3923 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3924 = x3921 - x3923;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3925 = x3924 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3926 = Fp(x3925.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3926);
          reg = x3926;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3927 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3927 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3928 = x3925 - x3927;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3929 = x3928 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3930 = Fp(x3929.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3930);
          reg = x3930;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3931 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3931 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3932 = x3929 - x3931;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3933 = x3932 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3933);
        reg = x3933;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3934 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3934 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3935 = x3934 * x97;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3936 = x3931 + x3935;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3937 = x3754 * x3861;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3938 = x3753 * x3862;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3939 = x3937 + x3938;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3940 = x3752 * x3863;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3941 = x3939 + x3940;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3942 = x3936 + x3941;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3943 = x3754 * x3862;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3944 = x3753 * x3863;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3945 = x3943 + x3944;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3946 = x3945 * x97;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3947 = x3942 + x3946;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3948 = x3947 + x38;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3949 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3949 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":234:53)
      auto x3950 = x3752 * x97;
      // loc("cirgen/components/u32.cpp":234:38)
      auto x3951 = x3751 + x3950;
      // loc("cirgen/components/u32.cpp":234:30)
      auto x3952 = x3949 * x3951;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3953 = x3948 - x3952;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3954 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3954 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":235:37)
      auto x3955 = x3861 * x97;
      // loc("cirgen/components/u32.cpp":235:22)
      auto x3956 = x3860 + x3955;
      // loc("cirgen/components/u32.cpp":235:14)
      auto x3957 = x3954 * x3956;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3958 = x3953 - x3957;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3959 = Fp(x3958.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3959);
          reg = x3959;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3960 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3960 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3961 = x3958 - x3960;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3962 = x3961 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3963 = Fp(x3962.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3963);
          reg = x3963;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3964 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3964 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3965 = x3962 - x3964;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3966 = x3965 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3967 = Fp(x3966.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3967);
          reg = x3967;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3968 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3968 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3969 = x3966 - x3968;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3970 = x3969 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3970);
        reg = x3970;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3971 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x3971 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3972 = x3971 * x97;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3973 = x3968 + x3972;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3974 = x3754 * x3863;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3975 = x3973 + x3974;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3976 = x3975 + x37;
      // loc("cirgen/components/u32.cpp":238:53)
      auto x3977 = x3754 * x97;
      // loc("cirgen/components/u32.cpp":238:38)
      auto x3978 = x3753 + x3977;
      // loc("cirgen/components/u32.cpp":238:30)
      auto x3979 = x3949 * x3978;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3980 = x3976 - x3979;
      // loc("cirgen/components/u32.cpp":239:37)
      auto x3981 = x3863 * x97;
      // loc("cirgen/components/u32.cpp":239:22)
      auto x3982 = x3862 + x3981;
      // loc("cirgen/components/u32.cpp":239:14)
      auto x3983 = x3954 * x3982;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3984 = x3980 - x3983;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3985 = Fp(x3984.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3985);
          reg = x3985;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3986 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x3986 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3987 = x3984 - x3986;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3988 = x3987 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3989 = Fp(x3988.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3989);
          reg = x3989;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3990 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x3990 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3991 = x3988 - x3990;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3992 = x3991 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3992);
        reg = x3992;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3993 = x3687 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3994 = x3690 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3995 = x3993 + x3994;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3996 = x3995 + x3693;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3997 = (x3996 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3997);
          reg = x3997;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3998 = inv(x3996);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3998);
          reg = x3998;
        }
      }
      // loc("Top/Mux/4/Mux/4/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3999 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3999 != Fp::invalid());
      if (x3999 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3996 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4000 = x102 - x3999;
      if (x4000 != 0) {
        // loc("Top/Mux/4/Mux/4/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4001 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x4001 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4002 = x3996 * x4001;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4003 = x4002 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4003 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":78:17)
      auto x4004 = x605 + x84;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4005 = x4004 + x84;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4006 = Fp(x4005.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4006);
          reg = x4006;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4007 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4007 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4008 = x4005 - x4007;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4009 = x4008 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4010 = Fp(x4009.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4010);
          reg = x4010;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4011 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4011 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4012 = x4009 - x4011;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4013 = x4012 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4014 = Fp(x4013.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4014);
          reg = x4014;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4015 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4015 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4016 = x4013 - x4015;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4017 = x4016 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4018 = Fp(x4017.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4018);
          reg = x4018;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4019 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4019 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4020 = x4017 - x4019;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4021 = x4020 * x82;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4021);
        reg = x4021;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4022 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4022 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4023 = x102 - x4022;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4024 = x4022 * x4023;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4024);
        reg = x4024;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4025 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4025 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4026 = x99 - x4022;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4027 = x4025 * x4026;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4027 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":80:38)
      auto x4028 = x3738 * x4000;
      if (x4028 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":81:29)
        auto x4029 = x3996 + x54;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3960);
          reg = x3960;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3964);
          reg = x3964;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3986);
          reg = x3986;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3990);
          reg = x3990;
        }
        {
          host_args.at(0) = x4029;
          host_args.at(1) = x3960;
          host_args.at(2) = x3964;
          host_args.at(3) = x3986;
          host_args.at(4) = x3990;
          host_args.at(5) = x99;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4030 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4030 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4031 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4031 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4032 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4032 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4033 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x4033 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4029);
          reg = x4029;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3606);
          reg = x3606;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4030);
          reg = x4030;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4031);
          reg = x4031;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4032);
          reg = x4032;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4033);
          reg = x4033;
        }
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4034 = x102 - x3738;
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4035 = x4034 * x4000;
      if (x4035 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":84:29)
        auto x4036 = x3996 + x54;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3893);
          reg = x3893;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3897);
          reg = x3897;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3923);
          reg = x3923;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3927);
          reg = x3927;
        }
        {
          host_args.at(0) = x4036;
          host_args.at(1) = x3893;
          host_args.at(2) = x3897;
          host_args.at(3) = x3923;
          host_args.at(4) = x3927;
          host_args.at(5) = x99;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4037 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4037 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4038 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4038 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4039 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4039 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4040 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x4040 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4036);
          reg = x4036;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3606);
          reg = x3606;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4037);
          reg = x4037;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4038);
          reg = x4038;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4039);
          reg = x4039;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4040);
          reg = x4040;
        }
      }
      if (x3999 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/4/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4041 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4041 != Fp::invalid());
      if (x4041 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4042 = x3695 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4042 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3684 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4043 = x3660 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4043 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3734 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4044 = x3695 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4044 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4045 = x3684 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4045 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4046 = x3660 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4046 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3735 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4047 = x3695 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4047 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4048 = x3684 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4048 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4049 = x3660 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4049 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3737 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4050 = x3695 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4050 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4051 = x3684 - x83;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4051 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4052 = x3660 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4052 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3739 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4053 = x3695 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4053 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4054 = x3684 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4054 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3660 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3740 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4055 = x3695 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4055 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4056 = x3684 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4056 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3660 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4057 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x4057 != Fp::invalid());
    if (x4057 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4058 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x4058 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":20:41)
      auto x4059 = x605 * x82;
      {
        host_args.at(0) = x4059;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4060 = host_outs.at(0);
        auto x4061 = host_outs.at(1);
        auto x4062 = host_outs.at(2);
        auto x4063 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4060);
          reg = x4060;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4061);
          reg = x4061;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4062);
          reg = x4062;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4063);
          reg = x4063;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4064 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4064 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4065 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4065 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4066 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4066 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4067 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4067 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4059);
        reg = x4059;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4058);
        reg = x4058;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4064);
        reg = x4064;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4065);
        reg = x4065;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4066);
        reg = x4066;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4067);
        reg = x4067;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4068 = Fp(x4067.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x4069 = x4068 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4069);
          reg = x4069;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4070 = Fp(x4067.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x4071 = x4070 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4071);
          reg = x4071;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4072 = Fp(x4067.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x4073 = x4072 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4073);
          reg = x4073;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4074 = Fp(x4067.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x4075 = x4074 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4075);
          reg = x4075;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4076 = Fp(x4067.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4077 = x4076 * x62;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4077);
          reg = x4077;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4078 = Fp(x4067.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4078);
          reg = x4078;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4079 = Fp(x4066.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x4080 = x4079 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4080);
          reg = x4080;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4081 = Fp(x4066.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4082 = x4081 * x66;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4082);
          reg = x4082;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4083 = Fp(x4066.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x4084 = x4083 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4084);
          reg = x4084;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4085 = Fp(x4066.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x4086 = x4085 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4086);
          reg = x4086;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4087 = Fp(x4066.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4087);
          reg = x4087;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4088 = Fp(x4065.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x4089 = x4088 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4089);
          reg = x4089;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4090 = Fp(x4065.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x4091 = x4090 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4091);
          reg = x4091;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4092 = Fp(x4065.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x4093 = x4092 * x64;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4093);
          reg = x4093;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4094 = Fp(x4065.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x4095 = x4094 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4095);
          reg = x4095;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4096 = Fp(x4065.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4096);
          reg = x4096;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4097 = Fp(x4064.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x4098 = x4097 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4098);
          reg = x4098;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4099 = Fp(x4064.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4099);
          reg = x4099;
        }
      }
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4100 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4100 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4101 = x4100 * x61;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4102 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4102 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4103 = x4102 * x65;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4104 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4104 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x4105 = x4104 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4106 = x4103 + x4105;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4107 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4107 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x4108 = x4107 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4109 = x4106 + x4108;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4110 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4110 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4111 = x4109 + x4110;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4112 = x4101 + x4111;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4113 = x4112 * x99;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4114 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4114 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4115 = x4113 + x4114;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4116 = x4067 - x4115;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4116 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4117 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4117 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4118 = x4117 * x77;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4119 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4119 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x4120 = x4119 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4121 = x4118 + x4120;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4122 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4122 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4123 = x4121 + x4122;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4124 = x4123 * x65;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4125 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4125 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x4126 = x4125 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4127 = x4124 + x4126;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4128 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4128 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4129 = x4127 + x4128;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4130 = x4066 - x4129;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4130 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4131 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4131 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4132 = x4131 * x70;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4133 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4133 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4134 = x4133 * x84;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4135 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4135 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4136 = x4134 + x4135;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x4137 = x4136 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4138 = x4132 + x4137;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4139 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4139 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x4140 = x4139 * x84;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4141 = x4138 + x4140;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4142 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4142 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4143 = x4141 + x4142;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4144 = x4065 - x4143;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4144 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4145 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4146 = x4145 * x70;
      // loc("Top/Mux/4/Mux/5/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4147 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4147 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4148 = x4146 + x4147;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4149 = x4064 - x4148;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4149 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4064;
        host_args.at(1) = x4065;
        host_args.at(2) = x4066;
        host_args.at(3) = x4067;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4150 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4151 = (x4150 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4151);
            reg = x4151;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4152 = x4150 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4153 = (x4152 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4153);
            reg = x4153;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4154 = x4150 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4155 = (x4154 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4155);
            reg = x4155;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4156 = x4150 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4157 = (x4156 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4157);
            reg = x4157;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4158 = x4150 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4159 = (x4158 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4159);
            reg = x4159;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4160 = x4150 - x80;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4161 = (x4160 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4161);
            reg = x4161;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4162 = x4150 - x79;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4163 = (x4162 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4163);
            reg = x4163;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4164 = x4150 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4165 = (x4164 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4165);
            reg = x4165;
          }
        }
        // loc("Top/Mux/4/Mux/5/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4166 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x4166 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4167 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x4167 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4168 = x4167 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4169 = x4166 + x4168;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4170 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x4170 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4171 = x4170 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4172 = x4169 + x4171;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4173 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x4173 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4174 = x4173 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4175 = x4172 + x4174;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4176 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x4176 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4177 = x4176 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4178 = x4175 + x4177;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4179 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x4179 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4180 = x4179 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4181 = x4178 + x4180;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4182 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x4182 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4183 = x4182 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4184 = x4181 + x4183;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x4185 = x4184 - x4150;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x4185 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4186 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4186 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4187 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4187 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4188 = x4186 + x4187;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4189 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4189 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
      auto x4190 = x4187 + x4189;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4191 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4191 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4192 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4192 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4193 = x4191 + x4192;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4194 = x4188 + x4192;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4195 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4195 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4196 = x4193 + x4195;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":131:49))
      auto x4197 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4197 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4198 = x4195 + x4197;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4199 = x4196 + x4197;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4200 = x4194 + x4197;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4201 = x4192 + x4197;
      // loc("cirgen/circuit/rv32im/divide.cpp":46:3)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4200);
        reg = x4200;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":47:3)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4201);
        reg = x4201;
      }
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":51:8))
      auto x4202 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4202 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":52:8))
      auto x4203 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4203 != Fp::invalid());
      host_args.at(0) = x4198;
      host_args.at(1) = x4199;
      host_args.at(2) = x4202;
      host_args.at(3) = x4203;
      host_args.at(4) = x4190;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4204 = x4125 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4205 = x4128 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4206 = x4204 + x4205;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4207 = x4206 + x4131;
      // loc("cirgen/circuit/rv32im/divide.cpp":56:39)
      auto x4208 = x4207 + x54;
      {
        host_args.at(0) = x4208;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4209 = host_outs.at(0);
        auto x4210 = host_outs.at(1);
        auto x4211 = host_outs.at(2);
        auto x4212 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4209);
          reg = x4209;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4210);
          reg = x4210;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4211);
          reg = x4211;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4212);
          reg = x4212;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4213 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4213 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4214 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4214 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4215 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4215 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4216 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4216 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4208);
        reg = x4208;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4058);
        reg = x4058;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4213);
        reg = x4213;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4214);
        reg = x4214;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4215);
        reg = x4215;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4216);
        reg = x4216;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4217 = x4114 * x65;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4218 = x4217 + x4123;
      // loc("cirgen/circuit/rv32im/divide.cpp":57:39)
      auto x4219 = x4218 + x54;
      {
        host_args.at(0) = x4219;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4220 = host_outs.at(0);
        auto x4221 = host_outs.at(1);
        auto x4222 = host_outs.at(2);
        auto x4223 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4220);
          reg = x4220;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4221);
          reg = x4221;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4222);
          reg = x4222;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4223);
          reg = x4223;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4224 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4224 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4225 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4225 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4226 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4226 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4227 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4227 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4219);
        reg = x4219;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4058);
        reg = x4058;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4224);
        reg = x4224;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4225);
        reg = x4225;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4226);
        reg = x4226;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4227);
        reg = x4227;
      }
      host_args.at(0) = x4207;
      host_args.at(1) = x4213;
      host_args.at(2) = x4214;
      host_args.at(3) = x4215;
      host_args.at(4) = x4216;
      host_args.at(5) = x4218;
      host_args.at(6) = x4224;
      host_args.at(7) = x4225;
      host_args.at(8) = x4226;
      host_args.at(9) = x4227;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4228 = x4107 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4229 = x4110 * x67;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4230 = x4228 + x4229;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4231 = x4230 + x4218;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4232 = x4198 * x4231;
      // loc("cirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4233 = x102 - x4198;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4234 = x4233 * x4224;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4235 = x4232 + x4234;
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4236 = Fp(x4235.asUInt32() & x40.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":65:15)
        auto x4237 = x4236 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4237);
          reg = x4237;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4238 = Fp(x4235.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":66:15)
        auto x4239 = x4238 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4239);
          reg = x4239;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4240 = Fp(x4235.asUInt32() & x39.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4241 = Fp(x4240.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4241);
            reg = x4241;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4242 = Fp(x4240.asUInt32() & x99.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4243 = x4242 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4243);
            reg = x4243;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4244 = Fp(x4240.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4245 = x4244 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4245);
            reg = x4245;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4246 = Fp(x4240.asUInt32() & x77.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4247 = x4246 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4247);
            reg = x4247;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4248 = Fp(x4240.asUInt32() & x65.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4249 = x4248 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4249);
            reg = x4249;
          }
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4250 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x4250 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x4251 = x4250 * x87;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x4252 = x4251 + x102;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4253 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x4253 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x4254 = x4253 * x83;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x4255 = x4254 + x102;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4256 = x4252 * x4255;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4257 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x4257 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x4258 = x4257 + x102;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4259 = x4256 * x4258;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4260 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x4260 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4261 = x4260 * x99;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4262 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x4262 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4263 = x4261 + x4262;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x4264 = (x4263 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x4265 = x4264 * x4259;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4266 = x4263 - x102;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4267 = (x4266 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x4268 = x4267 * x4259;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4269 = x4263 - x99;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4270 = (x4269 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x4271 = x4270 * x4259;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4272 = x4263 - x83;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4273 = (x4272 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x4274 = x4273 * x4259;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4265);
            reg = x4265;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4268);
            reg = x4268;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4271);
            reg = x4271;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4274);
            reg = x4274;
          }
        }
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4275 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x4275 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4276 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4276 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4277 = x4276 * x99;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4278 = x4275 + x4277;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4279 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4279 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4280 = x4279 * x84;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4281 = x4278 + x4280;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4282 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4282 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4283 = x4282 * x77;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4284 = x4281 + x4283;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4285 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x4285 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4286 = x4285 * x65;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4287 = x4284 + x4286;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x4288 = x4287 - x4240;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x4288 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/5/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4289 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4289 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4290 = x4289 * x61;
      // loc("Top/Mux/4/Mux/5/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4291 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4291 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:37)
      auto x4292 = x4291 * x67;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4293 = x4290 + x4292;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4294 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4294 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4295 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4295 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4296 = x4295 * x99;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4297 = x4294 + x4296;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4298 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4298 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4299 = x4298 * x84;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4300 = x4297 + x4299;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4301 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4301 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4302 = x4301 * x77;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4303 = x4300 + x4302;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4304 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4304 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4305 = x4304 * x65;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4306 = x4303 + x4305;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4307 = x4293 + x4306;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4308 = x4235 - x4307;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4308 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4309 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4309 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4310 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4310 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4311 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4311 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4312 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4312 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4313 = x4199 * x4309;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4314 = x4199 * x4310;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4315 = x4199 * x4311;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4316 = x4199 * x4312;
      // loc("cirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4317 = x102 - x4199;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4318 = x4317 * x4224;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4319 = x4317 * x4225;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4320 = x4317 * x4226;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4321 = x4317 * x4227;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4322 = x4313 + x4318;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4323 = x4314 + x4319;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4324 = x4315 + x4320;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4325 = x4316 + x4321;
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4322);
        reg = x4322;
      }
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4323);
        reg = x4323;
      }
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4324);
        reg = x4324;
      }
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4325);
        reg = x4325;
      }
      {
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4326 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x4326 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4327 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x4327 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4328 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x4328 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4329 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x4329 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":83:16)
        auto x4330 = x4202 + x4203;
        host_args.at(0) = x4213;
        host_args.at(1) = x4214;
        host_args.at(2) = x4215;
        host_args.at(3) = x4216;
        host_args.at(4) = x4326;
        host_args.at(5) = x4327;
        host_args.at(6) = x4328;
        host_args.at(7) = x4329;
        host_args.at(8) = x4330;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4331 = host_outs.at(0);
        auto x4332 = host_outs.at(1);
        auto x4333 = host_outs.at(2);
        auto x4334 = host_outs.at(3);
        auto x4335 = host_outs.at(4);
        auto x4336 = host_outs.at(5);
        auto x4337 = host_outs.at(6);
        auto x4338 = host_outs.at(7);
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4331);
          reg = x4331;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4335);
          reg = x4335;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4332);
          reg = x4332;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4336);
          reg = x4336;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4333);
          reg = x4333;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4337);
          reg = x4337;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4334);
          reg = x4334;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4338);
          reg = x4338;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4339 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4339 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4340 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4340 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4341 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4341 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4342 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4342 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4343 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4343 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4344 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4344 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4345 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x4345 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4346 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x4346 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4347 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x4347 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4348 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x4348 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4349 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x4349 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4350 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x4350 != Fp::invalid());
      host_args.at(0) = x4213;
      host_args.at(1) = x4214;
      host_args.at(2) = x4215;
      host_args.at(3) = x4216;
      host_args.at(4) = x4339;
      host_args.at(5) = x4340;
      host_args.at(6) = x4341;
      host_args.at(7) = x4342;
      host_args.at(8) = x4343;
      host_args.at(9) = x4344;
      host_args.at(10) = x4345;
      host_args.at(11) = x4346;
      host_args.at(12) = x4347;
      host_args.at(13) = x4348;
      host_args.at(14) = x4349;
      host_args.at(15) = x4350;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4351 = x4139 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4352 = x4142 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4353 = x4351 + x4352;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4354 = x4353 + x4145;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4355 = (x4354 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4355);
          reg = x4355;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4356 = inv(x4354);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4356);
          reg = x4356;
        }
      }
      // loc("Top/Mux/4/Mux/5/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4357 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x4357 != Fp::invalid());
      if (x4357 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4354 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4358 = x102 - x4357;
      if (x4358 != 0) {
        // loc("Top/Mux/4/Mux/5/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4359 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x4359 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4360 = x4354 * x4359;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4361 = x4360 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4361 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:37)
      auto x4362 = x4190 * x4358;
      if (x4362 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4363 = x4354 + x54;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4347);
          reg = x4347;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4348);
          reg = x4348;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4349);
          reg = x4349;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4350);
          reg = x4350;
        }
        {
          host_args.at(0) = x4363;
          host_args.at(1) = x4347;
          host_args.at(2) = x4348;
          host_args.at(3) = x4349;
          host_args.at(4) = x4350;
          host_args.at(5) = x99;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4364 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4364 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4365 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4365 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4366 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4366 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4367 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x4367 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4363);
          reg = x4363;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4058);
          reg = x4058;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4364);
          reg = x4364;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4365);
          reg = x4365;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4366);
          reg = x4366;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4367);
          reg = x4367;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4368 = x102 - x4190;
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4369 = x4368 * x4358;
      if (x4369 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":100:16)
        auto x4370 = x4354 + x54;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4343);
          reg = x4343;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4344);
          reg = x4344;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4345);
          reg = x4345;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4346);
          reg = x4346;
        }
        {
          host_args.at(0) = x4370;
          host_args.at(1) = x4343;
          host_args.at(2) = x4344;
          host_args.at(3) = x4345;
          host_args.at(4) = x4346;
          host_args.at(5) = x99;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4371 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4371 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4372 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4372 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4373 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4373 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4374 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x4374 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4370);
          reg = x4370;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4058);
          reg = x4058;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4371);
          reg = x4371;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4372);
          reg = x4372;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4373);
          reg = x4373;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4374);
          reg = x4374;
        }
      }
      if (x4357 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":105:17)
      auto x4375 = x605 + x84;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4376 = x4375 + x84;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4377 = Fp(x4376.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4377);
          reg = x4377;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4378 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4378 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4379 = x4376 - x4378;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4380 = x4379 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4381 = Fp(x4380.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4381);
          reg = x4381;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4382 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4382 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4383 = x4380 - x4382;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4384 = x4383 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4385 = Fp(x4384.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4385);
          reg = x4385;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4386 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4386 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4387 = x4384 - x4386;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4388 = x4387 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4389 = Fp(x4388.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4389);
          reg = x4389;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4390 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4390 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4391 = x4388 - x4390;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4392 = x4391 * x82;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4392);
        reg = x4392;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4393 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4393 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4394 = x102 - x4393;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4395 = x4393 * x4394;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4395);
        reg = x4395;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4396 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4396 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4397 = x99 - x4393;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4398 = x4396 * x4397;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4398 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":106:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
      if (x4186 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4399 = x4147 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4399 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4400 = x4136 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4400 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4401 = x4112 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4401 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4402 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4402 != Fp::invalid());
      if (x4402 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4403 = x4147 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4403 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4404 = x4136 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4404 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4405 = x4112 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4405 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4187 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4406 = x4147 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4406 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4407 = x4136 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4407 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4408 = x4112 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4408 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4189 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4409 = x4147 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4409 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4410 = x4136 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4410 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4411 = x4112 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4411 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4191 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4412 = x4147 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4412 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4413 = x4136 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4413 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4112 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4192 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4414 = x4147 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4414 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4415 = x4136 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4415 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4416 = x4112 - x67;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4416 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4195 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4417 = x4147 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4417 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4418 = x4136 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4418 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4112 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
      if (x4197 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4419 = x4147 - x50;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4419 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4420 = x4136 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4420 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4421 = x4112 - x67;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4421 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4422 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x4422 != Fp::invalid());
    if (x4422 != 0) {
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4423 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4423 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4424 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4424 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4425 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4425 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4426 = args[2][122 * steps + ((cycle - 1) & mask)];
      assert(x4426 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4427 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x4427 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4428 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x4428 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4429 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x4429 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4430 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x4430 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4431 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x4431 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4432 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x4432 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4433 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x4433 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4434 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x4434 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4435 = Fp(x4423.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4435);
          reg = x4435;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4436 = Fp(x4427.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4436);
          reg = x4436;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4437 = Fp(x4423.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4438 = x4437 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4438);
          reg = x4438;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4439 = Fp(x4427.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4440 = x4439 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4440);
          reg = x4440;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4441 = Fp(x4423.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4442 = x4441 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4442);
          reg = x4442;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4443 = Fp(x4427.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4444 = x4443 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4444);
          reg = x4444;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4445 = Fp(x4423.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4446 = x4445 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4446);
          reg = x4446;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4447 = Fp(x4427.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4448 = x4447 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4448);
          reg = x4448;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4449 = Fp(x4423.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4450 = x4449 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4450);
          reg = x4450;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4451 = Fp(x4427.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4452 = x4451 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4452);
          reg = x4452;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4453 = Fp(x4423.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4454 = x4453 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4454);
          reg = x4454;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4455 = Fp(x4427.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4456 = x4455 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4456);
          reg = x4456;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4457 = Fp(x4423.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4458 = x4457 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4458);
          reg = x4458;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4459 = Fp(x4427.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4460 = x4459 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4460);
          reg = x4460;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4461 = Fp(x4423.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4462 = x4461 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4462);
          reg = x4462;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4463 = Fp(x4427.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4464 = x4463 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4464);
          reg = x4464;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4465 = Fp(x4424.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4465);
          reg = x4465;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4466 = Fp(x4428.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4466);
          reg = x4466;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4467 = Fp(x4424.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4468 = x4467 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4468);
          reg = x4468;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4469 = Fp(x4428.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4470 = x4469 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4470);
          reg = x4470;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4471 = Fp(x4424.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4472 = x4471 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4472);
          reg = x4472;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4473 = Fp(x4428.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4474 = x4473 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4474);
          reg = x4474;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4475 = Fp(x4424.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4476 = x4475 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4476);
          reg = x4476;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4477 = Fp(x4428.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4478 = x4477 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4478);
          reg = x4478;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4479 = Fp(x4424.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4480 = x4479 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4480);
          reg = x4480;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4481 = Fp(x4428.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4482 = x4481 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4482);
          reg = x4482;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4483 = Fp(x4424.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4484 = x4483 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4484);
          reg = x4484;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4485 = Fp(x4428.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4486 = x4485 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4486);
          reg = x4486;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4487 = Fp(x4424.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4488 = x4487 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4488);
          reg = x4488;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4489 = Fp(x4428.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4490 = x4489 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4490);
          reg = x4490;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4491 = Fp(x4424.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4492 = x4491 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4492);
          reg = x4492;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4493 = Fp(x4428.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4494 = x4493 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4494);
          reg = x4494;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4495 = Fp(x4425.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4495);
          reg = x4495;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4496 = Fp(x4429.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4496);
          reg = x4496;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4497 = Fp(x4425.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4498 = x4497 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4498);
          reg = x4498;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4499 = Fp(x4429.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4500 = x4499 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4500);
          reg = x4500;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4501 = Fp(x4425.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4502 = x4501 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4502);
          reg = x4502;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4503 = Fp(x4429.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4504 = x4503 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4504);
          reg = x4504;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4505 = Fp(x4425.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4506 = x4505 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4506);
          reg = x4506;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4507 = Fp(x4429.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4508 = x4507 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4508);
          reg = x4508;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4509 = Fp(x4425.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4510 = x4509 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4510);
          reg = x4510;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4511 = Fp(x4429.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4512 = x4511 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4512);
          reg = x4512;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4513 = Fp(x4425.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4514 = x4513 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4514);
          reg = x4514;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4515 = Fp(x4429.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4516 = x4515 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4516);
          reg = x4516;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4517 = Fp(x4425.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4518 = x4517 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4518);
          reg = x4518;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4519 = Fp(x4429.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4520 = x4519 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4520);
          reg = x4520;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4521 = Fp(x4425.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4522 = x4521 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4522);
          reg = x4522;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4523 = Fp(x4429.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4524 = x4523 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4524);
          reg = x4524;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4525 = Fp(x4426.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4525);
          reg = x4525;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4526 = Fp(x4430.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4526);
          reg = x4526;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4527 = Fp(x4426.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4528 = x4527 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4528);
          reg = x4528;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4529 = Fp(x4430.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4530 = x4529 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4530);
          reg = x4530;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4531 = Fp(x4426.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4532 = x4531 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4532);
          reg = x4532;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4533 = Fp(x4430.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4534 = x4533 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4534);
          reg = x4534;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4535 = Fp(x4426.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4536 = x4535 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4536);
          reg = x4536;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4537 = Fp(x4430.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4538 = x4537 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4538);
          reg = x4538;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4539 = Fp(x4426.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4540 = x4539 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4540);
          reg = x4540;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4541 = Fp(x4430.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4542 = x4541 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4542);
          reg = x4542;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4543 = Fp(x4426.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4544 = x4543 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4544);
          reg = x4544;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4545 = Fp(x4430.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4546 = x4545 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4546);
          reg = x4546;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4547 = Fp(x4426.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4548 = x4547 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4548);
          reg = x4548;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4549 = Fp(x4430.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4550 = x4549 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4550);
          reg = x4550;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4551 = Fp(x4426.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4552 = x4551 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4552);
          reg = x4552;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4553 = Fp(x4430.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4554 = x4553 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4554);
          reg = x4554;
        }
      }
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4555 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4556 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x4556 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4557 = x4555 * x4556;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4558 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4559 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x4559 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4560 = x4558 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4561 = x4555 + x4560;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4562 = x4559 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4563 = x4556 + x4562;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4564 = x4558 * x4559;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4565 = x4564 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4566 = x4557 + x4565;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4567 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4567 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4568 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x4568 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4569 = x4567 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4570 = x4561 + x4569;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4571 = x4568 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4572 = x4563 + x4571;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4573 = x4567 * x4568;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4574 = x4573 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4575 = x4566 + x4574;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4576 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4577 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x4577 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4578 = x4576 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4579 = x4570 + x4578;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4580 = x4577 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4581 = x4572 + x4580;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4582 = x4576 * x4577;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4583 = x4582 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4584 = x4575 + x4583;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4585 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4586 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x4586 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4587 = x4585 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4588 = x4579 + x4587;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4589 = x4586 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4590 = x4581 + x4589;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4591 = x4585 * x4586;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4592 = x4591 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4593 = x4584 + x4592;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4594 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4595 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x4595 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4596 = x4594 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4597 = x4588 + x4596;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4598 = x4595 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4599 = x4590 + x4598;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4600 = x4594 * x4595;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4601 = x4600 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4602 = x4593 + x4601;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4603 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4604 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x4604 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4605 = x4603 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4606 = x4597 + x4605;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4607 = x4604 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4608 = x4599 + x4607;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4609 = x4603 * x4604;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4610 = x4609 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4611 = x4602 + x4610;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4612 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4613 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4613 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4614 = x4612 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4615 = x4606 + x4614;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4616 = x4613 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4617 = x4608 + x4616;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4618 = x4612 * x4613;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4619 = x4618 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4620 = x4611 + x4619;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4621 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4622 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4622 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4623 = x4621 * x4622;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4624 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4625 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4625 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4626 = x4624 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4627 = x4621 + x4626;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4628 = x4625 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4629 = x4622 + x4628;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4630 = x4624 * x4625;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4631 = x4630 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4632 = x4623 + x4631;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4633 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4634 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4634 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4635 = x4633 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4636 = x4627 + x4635;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4637 = x4634 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4638 = x4629 + x4637;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4639 = x4633 * x4634;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4640 = x4639 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4641 = x4632 + x4640;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4642 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4643 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4643 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4644 = x4642 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4645 = x4636 + x4644;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4646 = x4643 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4647 = x4638 + x4646;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4648 = x4642 * x4643;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4649 = x4648 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4650 = x4641 + x4649;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4651 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4651 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4652 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4652 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4653 = x4651 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4654 = x4645 + x4653;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4655 = x4652 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4656 = x4647 + x4655;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4657 = x4651 * x4652;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4658 = x4657 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4659 = x4650 + x4658;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4660 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4660 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4661 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4661 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4662 = x4660 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4663 = x4654 + x4662;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4664 = x4661 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4665 = x4656 + x4664;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4666 = x4660 * x4661;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4667 = x4666 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4668 = x4659 + x4667;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4669 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4670 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4670 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4671 = x4669 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4672 = x4663 + x4671;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4673 = x4670 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4674 = x4665 + x4673;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4675 = x4669 * x4670;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4676 = x4675 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4677 = x4668 + x4676;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4678 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4679 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4679 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4680 = x4678 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4681 = x4672 + x4680;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4682 = x4679 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4683 = x4674 + x4682;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4684 = x4678 * x4679;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4685 = x4684 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4686 = x4677 + x4685;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4687 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4687 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4688 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4688 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4689 = x4687 * x4688;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4690 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4690 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4691 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4691 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4692 = x4690 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4693 = x4687 + x4692;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4694 = x4691 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4695 = x4688 + x4694;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4696 = x4690 * x4691;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4697 = x4696 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4698 = x4689 + x4697;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4699 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4699 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4700 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4700 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4701 = x4699 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4702 = x4693 + x4701;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4703 = x4700 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4704 = x4695 + x4703;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4705 = x4699 * x4700;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4706 = x4705 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4707 = x4698 + x4706;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4708 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4708 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4709 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4709 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4710 = x4708 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4711 = x4702 + x4710;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4712 = x4709 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4713 = x4704 + x4712;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4714 = x4708 * x4709;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4715 = x4714 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4716 = x4707 + x4715;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4717 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4717 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4718 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4718 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4719 = x4717 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4720 = x4711 + x4719;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4721 = x4718 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4722 = x4713 + x4721;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4723 = x4717 * x4718;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4724 = x4723 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4725 = x4716 + x4724;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4726 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4727 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4727 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4728 = x4726 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4729 = x4720 + x4728;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4730 = x4727 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4731 = x4722 + x4730;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4732 = x4726 * x4727;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4733 = x4732 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4734 = x4725 + x4733;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4735 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4736 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4736 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4737 = x4735 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4738 = x4729 + x4737;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4739 = x4736 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4740 = x4731 + x4739;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4741 = x4735 * x4736;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4742 = x4741 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4743 = x4734 + x4742;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4744 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4745 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4745 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4746 = x4744 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4747 = x4738 + x4746;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4748 = x4745 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4749 = x4740 + x4748;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4750 = x4744 * x4745;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4751 = x4750 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4752 = x4743 + x4751;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4753 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4754 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4754 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4755 = x4753 * x4754;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4756 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4757 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4757 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4758 = x4756 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4759 = x4753 + x4758;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4760 = x4757 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4761 = x4754 + x4760;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4762 = x4756 * x4757;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4763 = x4762 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4764 = x4755 + x4763;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4765 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4765 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4766 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4766 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4767 = x4765 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4768 = x4759 + x4767;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4769 = x4766 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4770 = x4761 + x4769;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4771 = x4765 * x4766;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4772 = x4771 * x84;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4773 = x4764 + x4772;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4774 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4774 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4775 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4775 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4776 = x4774 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4777 = x4768 + x4776;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4778 = x4775 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4779 = x4770 + x4778;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4780 = x4774 * x4775;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4781 = x4780 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4782 = x4773 + x4781;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4783 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4783 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4784 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4784 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4785 = x4783 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4786 = x4777 + x4785;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4787 = x4784 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4788 = x4779 + x4787;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4789 = x4783 * x4784;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4790 = x4789 * x65;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4791 = x4782 + x4790;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4792 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4792 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4793 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4793 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4794 = x4792 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4795 = x4786 + x4794;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4796 = x4793 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4797 = x4788 + x4796;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4798 = x4792 * x4793;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4799 = x4798 * x67;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4800 = x4791 + x4799;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4801 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x4801 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4802 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4802 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4803 = x4801 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4804 = x4795 + x4803;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4805 = x4802 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4806 = x4797 + x4805;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4807 = x4801 * x4802;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4808 = x4807 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4809 = x4800 + x4808;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4810 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x4810 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4811 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4811 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4812 = x4810 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4813 = x4804 + x4812;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4814 = x4811 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4815 = x4806 + x4814;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4816 = x4810 * x4811;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4817 = x4816 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4818 = x4809 + x4817;
      host_args.at(0) = x4423;
      host_args.at(1) = x4424;
      host_args.at(2) = x4425;
      host_args.at(3) = x4426;
      host_args.at(4) = x4615;
      host_args.at(5) = x4681;
      host_args.at(6) = x4747;
      host_args.at(7) = x4813;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4427;
      host_args.at(1) = x4428;
      host_args.at(2) = x4429;
      host_args.at(3) = x4430;
      host_args.at(4) = x4617;
      host_args.at(5) = x4683;
      host_args.at(6) = x4749;
      host_args.at(7) = x4815;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4431;
      host_args.at(1) = x4432;
      host_args.at(2) = x4433;
      host_args.at(3) = x4434;
      host_args.at(4) = x4620;
      host_args.at(5) = x4686;
      host_args.at(6) = x4752;
      host_args.at(7) = x4818;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4819 = x4423 - x4615;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4819 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4820 = x4424 - x4681;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4820 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4821 = x4425 - x4747;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4821 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4822 = x4426 - x4813;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4822 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4823 = x4427 - x4617;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4823 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4824 = x4428 - x4683;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4824 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4825 = x4429 - x4749;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4825 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4826 = x4430 - x4815;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4826 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4827 = x4431 - x4620;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4827 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4828 = x4432 - x4686;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4828 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4829 = x4433 - x4752;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4829 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4830 = x4434 - x4818;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4830 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4831 = x605 + x84;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4832 = Fp(x4831.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4832);
          reg = x4832;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4833 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4833 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4834 = x4831 - x4833;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4835 = x4834 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4836 = Fp(x4835.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4836);
          reg = x4836;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4837 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4837 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4838 = x4835 - x4837;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4839 = x4838 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4840 = Fp(x4839.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4840);
          reg = x4840;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4841 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4841 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4842 = x4839 - x4841;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4843 = x4842 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4844 = Fp(x4843.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4844);
          reg = x4844;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4845 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4845 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4846 = x4843 - x4845;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4847 = x4846 * x82;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4847);
        reg = x4847;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4848 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4848 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4849 = x102 - x4848;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4850 = x4848 * x4849;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4850);
        reg = x4850;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4851 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4851 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4852 = x99 - x4848;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4853 = x4851 * x4852;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4853 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/compute.cpp":235:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
    }
    // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4854 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x4854 != Fp::invalid());
    if (x4854 != 0) {
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4855 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4856 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4857 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4857 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4858 = args[2][122 * steps + ((cycle - 1) & mask)];
      assert(x4858 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4859 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x4859 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4860 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x4860 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4861 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x4861 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4862 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x4862 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4863 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x4863 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4864 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x4864 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4865 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x4865 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4866 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x4866 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4867 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x4867 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4868 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x4868 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4869 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x4869 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4870 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x4870 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":135:51))
      auto x4871 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x4871 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":136:51))
      auto x4872 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x4872 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4873 = Fp(x4858.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4874 = x4873 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4874);
          reg = x4874;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4875 = Fp(x4858.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4876 = x4875 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4876);
          reg = x4876;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4877 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4877 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4878 = x4877 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4879 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x4879 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4880 = x4879 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4881 = x4878 + x4880;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4882 = x4858 - x4881;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4882 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4883 = Fp(x4862.asUInt32() & x70.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4884 = x4883 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4884);
          reg = x4884;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4885 = Fp(x4862.asUInt32() & x58.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4886 = x4885 * x99;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4886);
          reg = x4886;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4887 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4887 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4888 = x4887 * x70;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4889 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x4889 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4890 = x4889 * x62;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4891 = x4888 + x4890;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4892 = x4862 - x4891;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4892 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      auto x4893 = x4871 * x4877;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4893);
        reg = x4893;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":140:29)
      auto x4894 = x102 - x4872;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4895 = x4871 * x4894;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4896 = x4895 * x4887;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:3)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4896);
        reg = x4896;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4897 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4897 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":142:47)
      auto x4898 = x102 - x4897;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4899 = x4898 * x4855;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4900 = x4898 * x4856;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4901 = x4898 * x4857;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4902 = x4898 * x4858;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4903 = x4899 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4904 = x4900 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4905 = x4901 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4906 = x4902 + x98;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4907 = x4897 * x4855;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4908 = x4897 * x4856;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4909 = x4897 * x4857;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4910 = x4897 * x4858;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4911 = x4903 - x4907;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4912 = x4904 - x4908;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4913 = x4905 - x4909;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4914 = x4906 - x4910;
      // loc("cirgen/circuit/rv32im/divide.cpp":143:17)
      auto x4915 = x4897 * x4872;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4916 = x4911 - x4915;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4917 = x4912 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4918 = x4916 + x4917;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4919 = Fp(x4918.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4919);
          reg = x4919;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4920 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x4920 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4921 = x4918 - x4920;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4922 = x4921 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4923 = Fp(x4922.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4923);
          reg = x4923;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4924 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x4924 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4925 = x4922 - x4924;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4926 = x4925 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4926);
        reg = x4926;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4927 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x4927 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4928 = x4927 + x4913;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4929 = x4914 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4930 = x4928 + x4929;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4931 = Fp(x4930.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4931);
          reg = x4931;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4932 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x4932 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4933 = x4930 - x4932;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4934 = x4933 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4935 = Fp(x4934.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4935);
          reg = x4935;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4936 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4936 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4937 = x4934 - x4936;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4938 = x4937 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4938);
        reg = x4938;
      }
      host_args.at(0) = x4855;
      host_args.at(1) = x4856;
      host_args.at(2) = x4857;
      host_args.at(3) = x4858;
      host_args.at(4) = x4920;
      host_args.at(5) = x4924;
      host_args.at(6) = x4932;
      host_args.at(7) = x4936;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4939 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4939 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":145:47)
      auto x4940 = x102 - x4939;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4941 = x4940 * x4859;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4942 = x4940 * x4860;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4943 = x4940 * x4861;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4944 = x4940 * x4862;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4945 = x4941 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4946 = x4942 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4947 = x4943 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4948 = x4944 + x98;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4949 = x4939 * x4859;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4950 = x4939 * x4860;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4951 = x4939 * x4861;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4952 = x4939 * x4862;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4953 = x4945 - x4949;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4954 = x4946 - x4950;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4955 = x4947 - x4951;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4956 = x4948 - x4952;
      // loc("cirgen/circuit/rv32im/divide.cpp":146:17)
      auto x4957 = x4939 * x4872;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4958 = x4953 - x4957;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4959 = x4954 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4960 = x4958 + x4959;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4961 = Fp(x4960.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4961);
          reg = x4961;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4962 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4962 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4963 = x4960 - x4962;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4964 = x4963 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4965 = Fp(x4964.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4965);
          reg = x4965;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4966 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4966 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4967 = x4964 - x4966;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4968 = x4967 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4968);
        reg = x4968;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4969 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4969 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4970 = x4969 + x4955;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4971 = x4956 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4972 = x4970 + x4971;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4973 = Fp(x4972.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4973);
          reg = x4973;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4974 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4974 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4975 = x4972 - x4974;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4976 = x4975 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4977 = Fp(x4976.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4977);
          reg = x4977;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4978 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4978 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4979 = x4976 - x4978;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4980 = x4979 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4980);
        reg = x4980;
      }
      host_args.at(0) = x4859;
      host_args.at(1) = x4860;
      host_args.at(2) = x4861;
      host_args.at(3) = x4862;
      host_args.at(4) = x4962;
      host_args.at(5) = x4966;
      host_args.at(6) = x4974;
      host_args.at(7) = x4978;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":137:26)
      auto x4981 = x4966 * x97;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x4982 = x4962 + x4981;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4983 = (x4982 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4983);
          reg = x4983;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4984 = inv(x4982);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4984);
          reg = x4984;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4985 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4985 != Fp::invalid());
      if (x4985 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4982 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4986 = x102 - x4985;
      if (x4986 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4987 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x4987 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4988 = x4982 * x4987;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4989 = x4988 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4989 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x4990 = x4978 * x97;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4991 = x4974 + x4990;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x4992 = x4986 * x86;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4993 = x4991 + x4992;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4994 = (x4993 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4994);
          reg = x4994;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4995 = inv(x4993);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4995);
          reg = x4995;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4996 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4996 != Fp::invalid());
      if (x4996 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4993 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4997 = x102 - x4996;
      if (x4997 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4998 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x4998 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4999 = x4993 * x4998;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5000 = x4999 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5000 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5001 = x4897 + x4939;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5002 = x4897 * x99;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5003 = x5002 * x4939;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5004 = x5001 - x5003;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:64)
      auto x5005 = x4996 * x4897;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5006 = x5004 - x5005;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:3)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5006);
        reg = x5006;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5007 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5007 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":151:46)
      auto x5008 = x102 - x5007;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5009 = x5008 * x4863;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5010 = x5008 * x4864;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5011 = x5008 * x4865;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5012 = x5008 * x4866;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5013 = x5009 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5014 = x5010 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5015 = x5011 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5016 = x5012 + x98;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5017 = x5007 * x4863;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5018 = x5007 * x4864;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5019 = x5007 * x4865;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5020 = x5007 * x4866;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5021 = x5013 - x5017;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5022 = x5014 - x5018;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5023 = x5015 - x5019;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5024 = x5016 - x5020;
      // loc("cirgen/circuit/rv32im/divide.cpp":152:16)
      auto x5025 = x5007 * x4872;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5026 = x5021 - x5025;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5027 = x5022 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5028 = x5026 + x5027;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5029 = Fp(x5028.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5029);
          reg = x5029;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5030 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5030 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5031 = x5028 - x5030;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5032 = x5031 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5033 = Fp(x5032.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5033);
          reg = x5033;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5034 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5034 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5035 = x5032 - x5034;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5036 = x5035 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5036);
        reg = x5036;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5037 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5037 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5038 = x5037 + x5023;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5039 = x5024 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5040 = x5038 + x5039;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5041 = Fp(x5040.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5041);
          reg = x5041;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5042 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5042 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5043 = x5040 - x5042;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5044 = x5043 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5045 = Fp(x5044.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5045);
          reg = x5045;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5046 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5046 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5047 = x5044 - x5046;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5048 = x5047 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5048);
        reg = x5048;
      }
      host_args.at(0) = x4863;
      host_args.at(1) = x4864;
      host_args.at(2) = x4865;
      host_args.at(3) = x4866;
      host_args.at(4) = x5030;
      host_args.at(5) = x5034;
      host_args.at(6) = x5042;
      host_args.at(7) = x5046;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5049 = x4898 * x4867;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5050 = x4898 * x4868;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5051 = x4898 * x4869;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5052 = x4898 * x4870;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5053 = x5049 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5054 = x5050 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5055 = x5051 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5056 = x5052 + x98;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5057 = x4897 * x4867;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5058 = x4897 * x4868;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5059 = x4897 * x4869;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5060 = x4897 * x4870;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5061 = x5053 - x5057;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5062 = x5054 - x5058;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5063 = x5055 - x5059;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5064 = x5056 - x5060;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5065 = x5061 - x4915;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5066 = x5062 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5067 = x5065 + x5066;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5068 = Fp(x5067.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5068);
          reg = x5068;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5069 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5069 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5070 = x5067 - x5069;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5071 = x5070 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5072 = Fp(x5071.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5072);
          reg = x5072;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5073 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5073 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5074 = x5071 - x5073;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5075 = x5074 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5075);
        reg = x5075;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5076 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5076 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5077 = x5076 + x5063;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5078 = x5064 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5079 = x5077 + x5078;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5080 = Fp(x5079.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5080);
          reg = x5080;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5081 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5081 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5082 = x5079 - x5081;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5083 = x5082 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5084 = Fp(x5083.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5084);
          reg = x5084;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5085 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5085 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5086 = x5083 - x5085;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5087 = x5086 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5087);
        reg = x5087;
      }
      host_args.at(0) = x4867;
      host_args.at(1) = x4868;
      host_args.at(2) = x4869;
      host_args.at(3) = x4870;
      host_args.at(4) = x5069;
      host_args.at(5) = x5073;
      host_args.at(6) = x5081;
      host_args.at(7) = x5085;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5088 = x4962 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5089 = x4966 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5090 = x4974 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5091 = x4978 + x98;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5092 = x5088 - x102;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5093 = x5092 - x5069;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5094 = x5089 - x5073;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5095 = x5090 - x5081;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5096 = x5091 - x5085;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5097 = x5094 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5098 = x5093 + x5097;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5099 = Fp(x5098.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5099);
          reg = x5099;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5100 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5100 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5101 = x5098 - x5100;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5102 = x5101 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5103 = Fp(x5102.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5103);
          reg = x5103;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5104 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5104 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5105 = x5102 - x5104;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5106 = x5105 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5106);
        reg = x5106;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5107 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5107 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5108 = x5107 + x5095;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5109 = x5096 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5110 = x5108 + x5109;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5111 = Fp(x5110.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5111);
          reg = x5111;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5112 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5112 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5113 = x5110 - x5112;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5114 = x5113 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5115 = Fp(x5114.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5115);
          reg = x5115;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5116 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5116 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5117 = x5114 - x5116;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5118 = x5117 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5118);
        reg = x5118;
      }
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5119 = x5030 * x4962;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5120 = x5119 + x5069;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5121 = x5030 * x4966;
      // loc("cirgen/components/u32.cpp":261:51)
      auto x5122 = x5034 * x4962;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5123 = x5121 + x5122;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5124 = x5123 + x5073;
      // loc("cirgen/components/u32.cpp":261:14)
      auto x5125 = x5124 * x97;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5126 = x5120 + x5125;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5127 = Fp(x5126.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5127);
          reg = x5127;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5128 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5128 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5129 = x5126 - x5128;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5130 = x5129 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5131 = Fp(x5130.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5131);
          reg = x5131;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5132 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5132 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5133 = x5130 - x5132;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5134 = x5133 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5135 = Fp(x5134.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5135);
          reg = x5135;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5136 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5136 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5137 = x5134 - x5136;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5138 = x5137 * x96;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5138);
        reg = x5138;
      }
      // loc("Top/Mux/4/Mux/7/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5139 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5139 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5140 = x5139 * x97;
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5141 = x5140 + x5136;
      // loc("cirgen/components/u32.cpp":266:7)
      auto x5142 = x5034 * x4978;
      // loc("cirgen/components/u32.cpp":266:7)
      if (x5142 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:266");
      // loc("cirgen/components/u32.cpp":267:7)
      auto x5143 = x5042 * x4974;
      // loc("cirgen/components/u32.cpp":267:7)
      if (x5143 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:267");
      // loc("cirgen/components/u32.cpp":268:7)
      auto x5144 = x5046 * x4966;
      // loc("cirgen/components/u32.cpp":268:7)
      if (x5144 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:268");
      // loc("cirgen/components/u32.cpp":269:7)
      auto x5145 = x5042 * x4978;
      // loc("cirgen/components/u32.cpp":269:7)
      if (x5145 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:269");
      // loc("cirgen/components/u32.cpp":270:7)
      auto x5146 = x5046 * x4974;
      // loc("cirgen/components/u32.cpp":270:7)
      if (x5146 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:270");
      // loc("cirgen/components/u32.cpp":271:7)
      auto x5147 = x5046 * x4978;
      // loc("cirgen/components/u32.cpp":271:7)
      if (x5147 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:271");
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5148 = x5042 * x4962;
      // loc("cirgen/components/u32.cpp":273:45)
      auto x5149 = x5034 * x4966;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5150 = x5148 + x5149;
      // loc("cirgen/components/u32.cpp":274:15)
      auto x5151 = x5030 * x4974;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5152 = x5150 + x5151;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5153 = x5152 + x5081;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5154 = x5153 + x5141;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5155 = x5046 * x4962;
      // loc("cirgen/components/u32.cpp":275:52)
      auto x5156 = x5042 * x4966;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5157 = x5155 + x5156;
      // loc("cirgen/components/u32.cpp":276:22)
      auto x5158 = x5034 * x4974;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5159 = x5157 + x5158;
      // loc("cirgen/components/u32.cpp":276:52)
      auto x5160 = x5030 * x4978;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5161 = x5159 + x5160;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5162 = x5161 + x5085;
      // loc("cirgen/components/u32.cpp":275:15)
      auto x5163 = x5162 * x97;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5164 = x5154 + x5163;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5165 = Fp(x5164.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5165);
          reg = x5165;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5166 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5166 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5167 = x5164 - x5166;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5168 = x5167 * x96;
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5168);
        reg = x5168;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x5169 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5169 != Fp::invalid());
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5170 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5170 != Fp::invalid());
      host_args.at(0) = x5128;
      host_args.at(1) = x5132;
      host_args.at(2) = x5166;
      host_args.at(3) = x5169;
      host_args.at(4) = x5170;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5171 = x5128 - x4920;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5171 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5172 = x5132 - x4924;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5172 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5173 = x5166 - x4932;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5173 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5174 = x5169 - x4936;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5174 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      if (x4997 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5175 = x5170 - x102;
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5175 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5176 = x605 + x84;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5177 = Fp(x5176.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5177);
          reg = x5177;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5178 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5178 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5179 = x5176 - x5178;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5180 = x5179 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5181 = Fp(x5180.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5182 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5182 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5183 = x5180 - x5182;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5184 = x5183 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5185 = Fp(x5184.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5185);
          reg = x5185;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5186 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5186 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5187 = x5184 - x5186;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5188 = x5187 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5189 = Fp(x5188.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5189);
          reg = x5189;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5190 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5190 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5191 = x5188 - x5190;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5192 = x5191 * x82;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5192);
        reg = x5192;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5193 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5193 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5194 = x102 - x5193;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5195 = x5193 * x5194;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5195);
        reg = x5195;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5196 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5196 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5197 = x99 - x5193;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5198 = x5196 * x5197;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5198 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":164:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
    }
    // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/components/mux.h":39:25))
    auto x5199 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x5199 != Fp::invalid());
    if (x5199 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5200 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5200 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":147:41)
      auto x5201 = x605 * x82;
      {
        host_args.at(0) = x5201;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5202 = host_outs.at(0);
        auto x5203 = host_outs.at(1);
        auto x5204 = host_outs.at(2);
        auto x5205 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5202);
          reg = x5202;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5203);
          reg = x5203;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5204);
          reg = x5204;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5205);
          reg = x5205;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5206 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5206 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5207 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5207 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5208 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5208 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5209 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x5209 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5201);
        reg = x5201;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5200);
        reg = x5200;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5206);
        reg = x5206;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5207);
        reg = x5207;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5208);
        reg = x5208;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5209);
        reg = x5209;
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":149:6)
      auto x5210 = x5206 - x36;
      // loc("cirgen/circuit/rv32im/ecall.cpp":149:6)
      if (x5210 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:149");
      // loc("cirgen/circuit/rv32im/ecall.cpp":150:7)
      if (x5207 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:150");
      // loc("cirgen/circuit/rv32im/ecall.cpp":151:7)
      if (x5208 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:151");
      // loc("cirgen/circuit/rv32im/ecall.cpp":152:7)
      if (x5209 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:152");
      {
        host_args.at(0) = x35;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5211 = host_outs.at(0);
        auto x5212 = host_outs.at(1);
        auto x5213 = host_outs.at(2);
        auto x5214 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5211);
          reg = x5211;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5212);
          reg = x5212;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5213);
          reg = x5213;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5214);
          reg = x5214;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5215 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5215 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5216 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5216 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5217 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5217 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5218 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x5218 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x35);
        reg = x35;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5200);
        reg = x5200;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5215);
        reg = x5215;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5216);
        reg = x5216;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5217);
        reg = x5217;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5218);
        reg = x5218;
      }
      {
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5219 = (x5215 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5219);
          reg = x5219;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5220 = x5215 - x102;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5221 = (x5220 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5221);
          reg = x5221;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5222 = x5215 - x99;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5223 = (x5222 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5223);
          reg = x5223;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5224 = x5215 - x83;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5225 = (x5224 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5225);
          reg = x5225;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5226 = x5215 - x84;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5227 = (x5226 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5227);
          reg = x5227;
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5228 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5228 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5229 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5229 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5230 = x5229 * x99;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5231 = x5228 + x5230;
      // loc("Top/Mux/4/Mux/8/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5232 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x5232 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5233 = x5232 * x83;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5234 = x5231 + x5233;
      // loc("Top/Mux/4/Mux/8/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5235 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x5235 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5236 = x5235 * x84;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5237 = x5234 + x5236;
      // loc("./cirgen/components/onehot.h":40:8)
      auto x5238 = x5237 - x5215;
      // loc("./cirgen/components/onehot.h":40:8)
      if (x5238 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":159:47)
        auto x5239 = (x5237 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":159:47)
        auto x5240 = x102 - x5239;
        if (x5240 != 0) {
          host_args.at(0) = x5215;
          host_args.at(1) = x5216;
          host_args.at(2) = x5217;
          host_args.at(3) = x5218;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":39:25))
      auto x5241 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5241 != Fp::invalid());
      if (x5241 != 0) {
        {
          host_args.at(0) = x5215;
          host_args.at(1) = x5216;
          host_args.at(2) = x5217;
          host_args.at(3) = x5218;
          host(ctx, "halt", "", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5242 = x605 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5243 = Fp(x5242.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5243);
            reg = x5243;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5244 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5244 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5245 = x5242 - x5244;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5246 = x5245 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5247 = Fp(x5246.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5247);
            reg = x5247;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5248 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5248 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5249 = x5246 - x5248;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5250 = x5249 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5251 = Fp(x5250.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5251);
            reg = x5251;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5252 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5252 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5253 = x5250 - x5252;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5254 = x5253 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5255 = Fp(x5254.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5255);
            reg = x5255;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5256 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5256 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5257 = x5254 - x5256;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5258 = x5257 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5258);
          reg = x5258;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5259 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5259 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5260 = x102 - x5259;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5261 = x5259 * x5260;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5261);
          reg = x5261;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5262 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5262 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5263 = x99 - x5259;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5264 = x5262 * x5263;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5264 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":24:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
      }
      if (x5228 != 0) {
        {
          host_args.at(0) = x34;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5265 = host_outs.at(0);
          auto x5266 = host_outs.at(1);
          auto x5267 = host_outs.at(2);
          auto x5268 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5265);
            reg = x5265;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5266);
            reg = x5266;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5267);
            reg = x5267;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5268);
            reg = x5268;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5269 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5269 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5270 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5270 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5271 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5271 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5272 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5272 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x34);
          reg = x34;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5269);
          reg = x5269;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5270);
          reg = x5270;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5271);
          reg = x5271;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5272);
          reg = x5272;
        }
        {
          host_args.at(0) = x33;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5273 = host_outs.at(0);
          auto x5274 = host_outs.at(1);
          auto x5275 = host_outs.at(2);
          auto x5276 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5273);
            reg = x5273;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5274);
            reg = x5274;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5275);
            reg = x5275;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5276);
            reg = x5276;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5277 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5277 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5278 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5278 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5279 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5280 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5280 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5277);
          reg = x5277;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5278);
          reg = x5278;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5279);
          reg = x5279;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5280);
          reg = x5280;
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5281 = (x5269 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5281);
            reg = x5281;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5282 = x5269 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5283 = (x5282 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5283);
            reg = x5283;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5284 = x5269 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5285 = (x5284 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5285);
            reg = x5285;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5286 = x5269 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5287 = (x5286 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5287);
            reg = x5287;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5288 = x5269 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5289 = (x5288 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5289);
            reg = x5289;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5290 = x5269 - x80;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5291 = (x5290 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5291);
            reg = x5291;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5292 = x5269 - x79;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5293 = (x5292 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5293);
            reg = x5293;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5294 = x5269 - x78;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5295 = (x5294 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5295);
            reg = x5295;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5296 = x5269 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5297 = (x5296 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5297);
            reg = x5297;
          }
        }
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5298 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x5298 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5299 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x5299 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5300 = x5299 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5301 = x5298 + x5300;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5302 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x5302 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5303 = x5302 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5304 = x5301 + x5303;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5305 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x5305 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5306 = x5305 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5307 = x5304 + x5306;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5308 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x5308 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5309 = x5308 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5310 = x5307 + x5309;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5311 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x5311 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5312 = x5311 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5313 = x5310 + x5312;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5314 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x5314 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5315 = x5314 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5316 = x5313 + x5315;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5317 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x5317 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5318 = x5317 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5319 = x5316 + x5318;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x5320 = x5319 - x5269;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x5320 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":43:24))
        auto x5321 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x5321 != Fp::invalid());
        if (x5321 != 0) {
          host_args.at(0) = x5319;
          host_args.at(1) = x5277;
          host_args.at(2) = x5278;
          host_args.at(3) = x5279;
          host_args.at(4) = x5280;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5322 = x5278 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5323 = x5322 + x5277;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][36] = x5323;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5324 = x5280 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5325 = x5324 + x5279;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][37] = x5325;
        }
        if (x5298 != 0) {
          host_args.at(0) = x5319;
          host_args.at(1) = x5277;
          host_args.at(2) = x5278;
          host_args.at(3) = x5279;
          host_args.at(4) = x5280;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5326 = x5278 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5327 = x5326 + x5277;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][38] = x5327;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5328 = x5280 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5329 = x5328 + x5279;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][39] = x5329;
        }
        if (x5299 != 0) {
          host_args.at(0) = x5319;
          host_args.at(1) = x5277;
          host_args.at(2) = x5278;
          host_args.at(3) = x5279;
          host_args.at(4) = x5280;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5330 = x5278 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5331 = x5330 + x5277;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][40] = x5331;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5332 = x5280 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5333 = x5332 + x5279;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][41] = x5333;
        }
        if (x5302 != 0) {
          host_args.at(0) = x5319;
          host_args.at(1) = x5277;
          host_args.at(2) = x5278;
          host_args.at(3) = x5279;
          host_args.at(4) = x5280;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5334 = x5278 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5335 = x5334 + x5277;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][42] = x5335;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5336 = x5280 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5337 = x5336 + x5279;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][43] = x5337;
        }
        if (x5305 != 0) {
          host_args.at(0) = x5319;
          host_args.at(1) = x5277;
          host_args.at(2) = x5278;
          host_args.at(3) = x5279;
          host_args.at(4) = x5280;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5338 = x5278 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5339 = x5338 + x5277;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][44] = x5339;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5340 = x5280 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5341 = x5340 + x5279;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][45] = x5341;
        }
        if (x5308 != 0) {
          host_args.at(0) = x5319;
          host_args.at(1) = x5277;
          host_args.at(2) = x5278;
          host_args.at(3) = x5279;
          host_args.at(4) = x5280;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5342 = x5278 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5343 = x5342 + x5277;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][46] = x5343;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5344 = x5280 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5345 = x5344 + x5279;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][47] = x5345;
        }
        if (x5311 != 0) {
          host_args.at(0) = x5319;
          host_args.at(1) = x5277;
          host_args.at(2) = x5278;
          host_args.at(3) = x5279;
          host_args.at(4) = x5280;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5346 = x5278 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5347 = x5346 + x5277;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][48] = x5347;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5348 = x5280 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5349 = x5348 + x5279;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][49] = x5349;
        }
        if (x5314 != 0) {
          host_args.at(0) = x5319;
          host_args.at(1) = x5277;
          host_args.at(2) = x5278;
          host_args.at(3) = x5279;
          host_args.at(4) = x5280;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5350 = x5278 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5351 = x5350 + x5277;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][50] = x5351;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5352 = x5280 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5353 = x5352 + x5279;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][51] = x5353;
        }
        if (x5317 != 0) {
          host_args.at(0) = x5319;
          host_args.at(1) = x5277;
          host_args.at(2) = x5278;
          host_args.at(3) = x5279;
          host_args.at(4) = x5280;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5354 = x5278 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5355 = x5354 + x5277;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][52] = x5355;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5356 = x5280 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5357 = x5356 + x5279;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][53] = x5357;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":50:17)
        auto x5358 = x605 + x84;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5359 = x5358 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5360 = Fp(x5359.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5360);
            reg = x5360;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5361 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5361 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5362 = x5359 - x5361;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5363 = x5362 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5364 = Fp(x5363.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5364);
            reg = x5364;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5365 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5365 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5366 = x5363 - x5365;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5367 = x5366 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5368 = Fp(x5367.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5368);
            reg = x5368;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5369 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5369 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5370 = x5367 - x5369;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5371 = x5370 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5372 = Fp(x5371.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5372);
            reg = x5372;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5373 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5373 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5374 = x5371 - x5373;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5375 = x5374 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5375);
          reg = x5375;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5376 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5376 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5377 = x102 - x5376;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5378 = x5376 * x5377;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5378);
          reg = x5378;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5379 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5379 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5380 = x99 - x5376;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5381 = x5379 * x5380;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5381 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":51:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      if (x5229 != 0) {
        {
          host_args.at(0) = x34;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5382 = host_outs.at(0);
          auto x5383 = host_outs.at(1);
          auto x5384 = host_outs.at(2);
          auto x5385 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5382);
            reg = x5382;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5383);
            reg = x5383;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5384);
            reg = x5384;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5385);
            reg = x5385;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5386 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5386 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5387 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5387 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5388 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5388 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5389 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5389 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x34);
          reg = x34;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5386);
          reg = x5386;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5387);
          reg = x5387;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5388);
          reg = x5388;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5389);
          reg = x5389;
        }
        {
          host_args.at(0) = x33;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5390 = host_outs.at(0);
          auto x5391 = host_outs.at(1);
          auto x5392 = host_outs.at(2);
          auto x5393 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5390);
            reg = x5390;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5391);
            reg = x5391;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5392);
            reg = x5392;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5393);
            reg = x5393;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5394 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5394 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5395 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5395 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5396 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5396 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5397 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5397 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5394);
          reg = x5394;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5395);
          reg = x5395;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5396);
          reg = x5396;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5397);
          reg = x5397;
        }
        {
          // loc("./cirgen/components/u32.h":25:12)
          auto x5398 = x5395 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5399 = x5394 + x5398;
          // loc("./cirgen/components/u32.h":26:12)
          auto x5400 = x5396 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5401 = x5399 + x5400;
          // loc("./cirgen/components/u32.h":27:12)
          auto x5402 = x5397 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5403 = x5401 + x5402;
          // loc("cirgen/circuit/rv32im/ecall.cpp":78:22)
          auto x5404 = Fp(x5403.asUInt32() & x83.asUInt32());
          if (x5404 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:26)
            auto x5405 = x5403 - x5404;
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:26)
            auto x5406 = x5405 + x84;
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:25)
            auto x5407 = x5406 * x82;
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:7)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5407);
              reg = x5407;
            }
            // loc("cirgen/circuit/rv32im/ecall.cpp":81:42)
            auto x5408 = x5404 - x102;
            // loc("./cirgen/components/bits.h":61:23)
            {
              auto& reg = args[2][79 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5408);
              reg = x5408;
            }
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":83:23)
          auto x5409 = (x5404 == 0) ? Fp(1) : Fp(0);
          if (x5409 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":84:25)
            auto x5410 = x5403 * x82;
            // loc("cirgen/circuit/rv32im/ecall.cpp":84:7)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5410);
              reg = x5410;
            }
            // loc("./cirgen/components/bits.h":61:23)
            {
              auto& reg = args[2][79 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x83);
              reg = x83;
            }
          }
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5411 = x5395 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5412 = x5394 + x5411;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5413 = x5396 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5414 = x5412 + x5413;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5415 = x5397 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5416 = x5414 + x5415;
        // loc("Top/Mux/4/Mux/8/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5417 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x5417 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5418 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x5418 != Fp::invalid());
        host_args.at(0) = x5416;
        host_args.at(1) = x5417;
        host_args.at(2) = x5418;
        host(ctx, "log", "Calculated orig = %u, output chunks = %u, first cycle-1 = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:7)
        auto x5419 = x5417 - x102;
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:6)
        auto x5420 = x5419 * x84;
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:44)
        auto x5421 = x5418 + x102;
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:6)
        auto x5422 = x5420 + x5421;
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:6)
        auto x5423 = x5416 - x5422;
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:6)
        if (x5423 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:93");
        // loc("cirgen/circuit/rv32im/ecall.cpp":97:31)
        auto x5424 = x5386 * x82;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5425 = Fp(x5424.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5425);
            reg = x5425;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5426 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x5426 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5427 = x5424 - x5426;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5428 = x5427 * x96;
        // loc("cirgen/circuit/rv32im/ecall.cpp":97:7)
        if (x5428 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:97");
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5429 = Fp(x5424.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5429);
            reg = x5429;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5430 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x5430 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5431 = x5424 - x5430;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5432 = x5431 * x96;
        // loc("cirgen/circuit/rv32im/ecall.cpp":98:7)
        if (x5432 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:98");
        {
          host_args.at(0) = x5416;
          host(ctx, "syscallInit", "", host_args.data(), 1, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5433 = x605 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5434 = Fp(x5433.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5434);
            reg = x5434;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5435 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5435 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5436 = x5433 - x5435;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5437 = x5436 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5438 = Fp(x5437.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5438);
            reg = x5438;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5439 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5439 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5440 = x5437 - x5439;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5441 = x5440 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5442 = Fp(x5441.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5442);
            reg = x5442;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5443 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5443 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5444 = x5441 - x5443;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5445 = x5444 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5446 = Fp(x5445.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5446);
            reg = x5446;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5447 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5447 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5448 = x5445 - x5447;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5449 = x5448 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5449);
          reg = x5449;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5450 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5450 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5451 = x102 - x5450;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5452 = x5450 * x5451;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5452);
          reg = x5452;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5453 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5453 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5454 = x99 - x5450;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5455 = x5453 * x5454;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5455 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":103:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        host(ctx, "log", "Set next major to be ecall copy in", host_args.data(), 0, host_outs.data(), 0);
      }
      if (x5232 != 0) {
        {
          host_args.at(0) = x34;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5456 = host_outs.at(0);
          auto x5457 = host_outs.at(1);
          auto x5458 = host_outs.at(2);
          auto x5459 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5456);
            reg = x5456;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5457);
            reg = x5457;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5458);
            reg = x5458;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5459);
            reg = x5459;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5460 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5460 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5461 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5461 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5462 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5462 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5463 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5463 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x34);
          reg = x34;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5460);
          reg = x5460;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5461);
          reg = x5461;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5462);
          reg = x5462;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5463);
          reg = x5463;
        }
        {
          host_args.at(0) = x33;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5464 = host_outs.at(0);
          auto x5465 = host_outs.at(1);
          auto x5466 = host_outs.at(2);
          auto x5467 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5464);
            reg = x5464;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5465);
            reg = x5465;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5466);
            reg = x5466;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5467);
            reg = x5467;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5468 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5468 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5469 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5469 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5470 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5470 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5471 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5471 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5468);
          reg = x5468;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5469);
          reg = x5469;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5470);
          reg = x5470;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5471);
          reg = x5471;
        }
        {
          host_args.at(0) = x32;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5472 = host_outs.at(0);
          auto x5473 = host_outs.at(1);
          auto x5474 = host_outs.at(2);
          auto x5475 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5472);
            reg = x5472;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5473);
            reg = x5473;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5474);
            reg = x5474;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5475);
            reg = x5475;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5476 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5476 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5477 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5477 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5478 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5478 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5479 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5479 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x32);
          reg = x32;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5476);
          reg = x5476;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5477);
          reg = x5477;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5478);
          reg = x5478;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5479);
          reg = x5479;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":117:17)
        auto x5480 = x605 + x84;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5481 = x5480 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5482 = Fp(x5481.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5482);
            reg = x5482;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5483 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5483 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5484 = x5481 - x5483;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5485 = x5484 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5486 = Fp(x5485.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5486);
            reg = x5486;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5487 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5487 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5488 = x5485 - x5487;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5489 = x5488 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5490 = Fp(x5489.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5490);
            reg = x5490;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5491 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5491 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5492 = x5489 - x5491;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5493 = x5492 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5494 = Fp(x5493.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5494);
            reg = x5494;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5495 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5495 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5496 = x5493 - x5495;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5497 = x5496 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5497);
          reg = x5497;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5498 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5498 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5499 = x102 - x5498;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5500 = x5498 * x5499;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5500);
          reg = x5500;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5501 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5501 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5502 = x99 - x5498;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5503 = x5501 * x5502;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5503 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":118:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x76);
          reg = x76;
        }
      }
      if (x5235 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":127:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x605);
          reg = x605;
        }
        {
          host_args.at(0) = x34;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5504 = host_outs.at(0);
          auto x5505 = host_outs.at(1);
          auto x5506 = host_outs.at(2);
          auto x5507 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5504);
            reg = x5504;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5505);
            reg = x5505;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5506);
            reg = x5506;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5507);
            reg = x5507;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5508 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5509 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5509 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5510 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5510 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5511 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5511 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x34);
          reg = x34;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5508);
          reg = x5508;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5509);
          reg = x5509;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5510);
          reg = x5510;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5511);
          reg = x5511;
        }
        {
          host_args.at(0) = x33;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5512 = host_outs.at(0);
          auto x5513 = host_outs.at(1);
          auto x5514 = host_outs.at(2);
          auto x5515 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5512);
            reg = x5512;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5513);
            reg = x5513;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5514);
            reg = x5514;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5515);
            reg = x5515;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5516 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5516 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5517 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5517 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5518 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5518 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5519 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5519 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5516);
          reg = x5516;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5517);
          reg = x5517;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5518);
          reg = x5518;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5519);
          reg = x5519;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5520 = x5509 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5521 = x5508 + x5520;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5522 = x5510 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5523 = x5521 + x5522;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5524 = x5511 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5525 = x5523 + x5524;
        // loc("cirgen/circuit/rv32im/ecall.cpp":136:17)
        auto x5526 = x5525 - x84;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5527 = x5526 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5528 = Fp(x5527.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5528);
            reg = x5528;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5529 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5529 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5530 = x5527 - x5529;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5531 = x5530 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5532 = Fp(x5531.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5532);
            reg = x5532;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5533 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5533 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5534 = x5531 - x5533;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5535 = x5534 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5536 = Fp(x5535.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5536);
            reg = x5536;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5537 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5537 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5538 = x5535 - x5537;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5539 = x5538 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5540 = Fp(x5539.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5540);
            reg = x5540;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5541 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5541 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5542 = x5539 - x5541;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5543 = x5542 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5543);
          reg = x5543;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5544 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5544 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5545 = x102 - x5544;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5546 = x5544 * x5545;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5546);
          reg = x5546;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5547 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5547 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5548 = x99 - x5544;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5549 = x5547 * x5548;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5549 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":137:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/components/mux.h":39:25))
    auto x5550 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x5550 != Fp::invalid());
    if (x5550 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5551 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5551 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/sha.cpp":174:69))
      auto x5552 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x5552 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[13](Reg)"("cirgen/circuit/rv32im/sha.cpp":175:77))
      auto x5553 = args[2][107 * steps + ((cycle - 1) & mask)];
      assert(x5553 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":176:35)
      auto x5554 = x5552 + x5553;
      if (x5554 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":178:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5555 = x102 - x5552;
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5556 = x5555 - x5553;
      if (x5556 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5557 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5557 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5557);
          reg = x5557;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":183:40))
        auto x5558 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x5558 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5559 = x5558 - x102;
        // loc("cirgen/circuit/rv32im/sha.cpp":183:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5559);
          reg = x5559;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5560 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x5560 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5561 = (x5560 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5561);
          reg = x5561;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5562 = inv(x5560);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5562);
          reg = x5562;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5563 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x5563 != Fp::invalid());
      if (x5563 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5560 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5564 = x102 - x5563;
      if (x5564 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5565 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5565 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5566 = x5560 * x5565;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5567 = x5566 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5567 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x5563 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":187:29)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x75);
          reg = x75;
        }
      }
      if (x5564 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5568 = x2144 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5569 = x1359 + x5568;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5570 = x2848 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5571 = x5569 + x5570;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5572 = x3605 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5573 = x5571 + x5572;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5574 = x4057 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5575 = x5573 + x5574;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5576 = x4422 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5577 = x5575 + x5576;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5578 = x4854 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5579 = x5577 + x5578;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5580 = x5199 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5581 = x5579 + x5580;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5582 = x5550 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5583 = x5581 + x5582;
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5584 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x5584 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5585 = x5584 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5586 = x5583 + x5585;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5587 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x5587 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5588 = x5587 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5589 = x5586 + x5588;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5590 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x5590 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5591 = x5590 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5592 = x5589 + x5591;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5593 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x5593 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5594 = x5593 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5595 = x5592 + x5594;
        // loc("Top/Mux/4/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5596 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x5596 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5597 = x5596 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5598 = x5595 + x5597;
        // loc("cirgen/circuit/rv32im/sha.cpp":188:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5598);
          reg = x5598;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5599 = x605 + x84;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5600 = Fp(x5599.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5600);
          reg = x5600;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5601 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5601 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5602 = x5599 - x5601;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5603 = x5602 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5604 = Fp(x5603.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5604);
          reg = x5604;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5605 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5605 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5606 = x5603 - x5605;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5607 = x5606 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5608 = Fp(x5607.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5608);
          reg = x5608;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5609 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5609 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5610 = x5607 - x5609;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5611 = x5610 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5612 = Fp(x5611.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5612);
          reg = x5612;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5613 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5613 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5614 = x5611 - x5613;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5615 = x5614 * x82;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5615);
        reg = x5615;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5616 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5616 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5617 = x102 - x5616;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5618 = x5616 * x5617;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5618);
        reg = x5618;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5619 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5619 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5620 = x99 - x5616;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5621 = x5619 * x5620;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5621 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5622 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x5622 != Fp::invalid());
      host_args.at(0) = x76;
      host_args.at(1) = x5622;
      host_args.at(2) = x5560;
      host(ctx, "log", "SHA_INIT: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5552 != 0) {
        {
          host_args.at(0) = x31;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5623 = host_outs.at(0);
          auto x5624 = host_outs.at(1);
          auto x5625 = host_outs.at(2);
          auto x5626 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5623);
            reg = x5623;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5624);
            reg = x5624;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5625);
            reg = x5625;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5626);
            reg = x5626;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5627 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5628 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5628 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5629 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5629 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5630 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x5630 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x31);
          reg = x31;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5551);
          reg = x5551;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5627);
          reg = x5627;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5628);
          reg = x5628;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5629);
          reg = x5629;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5630);
          reg = x5630;
        }
        {
          host_args.at(0) = x30;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5631 = host_outs.at(0);
          auto x5632 = host_outs.at(1);
          auto x5633 = host_outs.at(2);
          auto x5634 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5631);
            reg = x5631;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5632);
            reg = x5632;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5633);
            reg = x5633;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5634);
            reg = x5634;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5635 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5635 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5636 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5636 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5637 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5637 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5638 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5638 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5551);
          reg = x5551;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5635);
          reg = x5635;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5636);
          reg = x5636;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5637);
          reg = x5637;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5638);
          reg = x5638;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5639 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x5639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5640 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x5640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5641 = args[2][128 * steps + ((cycle - 1) & mask)];
        assert(x5641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5642 = args[2][129 * steps + ((cycle - 1) & mask)];
        assert(x5642 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5643 = x5640 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5644 = x5639 + x5643;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5645 = x5641 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5646 = x5644 + x5645;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5647 = x5642 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5648 = x5646 + x5647;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:58)
        auto x5649 = x5648 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5649);
          reg = x5649;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5650 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5650 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5651 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5651 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5652 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5652 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5653 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x5653 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5654 = x5651 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5655 = x5650 + x5654;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5656 = x5652 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5657 = x5655 + x5656;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5658 = x5653 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5659 = x5657 + x5658;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:57)
        auto x5660 = x5659 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5660);
          reg = x5660;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5661 = x5628 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5662 = x5627 + x5661;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5663 = x5629 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5664 = x5662 + x5663;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5665 = x5630 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5666 = x5664 + x5665;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:16)
        auto x5667 = x5666 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5667);
          reg = x5667;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5668 = x5636 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5669 = x5635 + x5668;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5670 = x5637 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5671 = x5669 + x5670;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5672 = x5638 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5673 = x5671 + x5672;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:16)
        auto x5674 = x5673 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5674);
          reg = x5674;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5675 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5675 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5676 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5676 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5677 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5677 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5678 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5678 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5679 = x5676 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5680 = x5675 + x5679;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5681 = x5677 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5682 = x5680 + x5681;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5683 = x5678 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5684 = x5682 + x5683;
        // loc("cirgen/circuit/rv32im/sha.cpp":201:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5684);
          reg = x5684;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5685 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5685 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":204:10)
        auto x5686 = x5685 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5687 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5687 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":205:10)
        auto x5688 = x5687 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5689 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5689 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":206:10)
        auto x5690 = x5689 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5691 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5691 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":207:10)
        auto x5692 = x5691 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5693 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5693 != Fp::invalid());
        host_args.at(0) = x5686;
        host_args.at(1) = x5688;
        host_args.at(2) = x5690;
        host_args.at(3) = x5692;
        host_args.at(4) = x5693;
        host(ctx, "log", "  FromEcall: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5553 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/sha.cpp":214:53))
        auto x5694 = args[2][163 * steps + ((cycle - 1) & mask)];
        assert(x5694 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":214:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5694);
          reg = x5694;
        }
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/sha.cpp":215:51))
        auto x5695 = args[2][164 * steps + ((cycle - 1) & mask)];
        assert(x5695 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":215:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5695);
          reg = x5695;
        }
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/sha.cpp":216:83))
        auto x5696 = args[2][165 * steps + ((cycle - 1) & mask)];
        assert(x5696 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x5697 = x5696 * x29;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x5698 = x5697 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":216:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5698);
          reg = x5698;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":217:83)
        auto x5699 = x5698 + x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5699);
          reg = x5699;
        }
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/sha.cpp":218:49))
        auto x5700 = args[2][167 * steps + ((cycle - 1) & mask)];
        assert(x5700 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5700);
          reg = x5700;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5701 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5701 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":221:10)
        auto x5702 = x5701 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5703 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5703 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":222:10)
        auto x5704 = x5703 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5705 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5705 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x5706 = x5705 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5707 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5707 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x5708 = x5707 * x84;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5709 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5709 != Fp::invalid());
        host_args.at(0) = x5702;
        host_args.at(1) = x5704;
        host_args.at(2) = x5706;
        host_args.at(3) = x5708;
        host_args.at(4) = x5709;
        host(ctx, "log", "  FromPageFault: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5556 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":228:42))
        auto x5710 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5710 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":228:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5710);
          reg = x5710;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":229:40))
        auto x5711 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5711 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":229:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5711);
          reg = x5711;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":230:36))
        auto x5712 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5712 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5712);
          reg = x5712;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":231:36))
        auto x5713 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5713 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5713);
          reg = x5713;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":232:38))
        auto x5714 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x5714 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":232:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5714);
          reg = x5714;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5715 = args[2][144 * steps + ((cycle - 1) & mask)];
        assert(x5715 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5715);
          reg = x5715;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5716 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5716 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":236:24)
        auto x5717 = x5716 + x5560;
        {
          host_args.at(0) = x5717;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5718 = host_outs.at(0);
          auto x5719 = host_outs.at(1);
          auto x5720 = host_outs.at(2);
          auto x5721 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5718);
            reg = x5718;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5719);
            reg = x5719;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5720);
            reg = x5720;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5721);
            reg = x5721;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5722 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5722 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5723 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5723 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5724 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5724 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5725 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x5725 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5717);
          reg = x5717;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5551);
          reg = x5551;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5722);
          reg = x5722;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5723);
          reg = x5723;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5724);
          reg = x5724;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5725);
          reg = x5725;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":237:24)
        auto x5726 = x5717 + x84;
        {
          host_args.at(0) = x5726;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5727 = host_outs.at(0);
          auto x5728 = host_outs.at(1);
          auto x5729 = host_outs.at(2);
          auto x5730 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5727);
            reg = x5727;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5728);
            reg = x5728;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5729);
            reg = x5729;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5730);
            reg = x5730;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5731 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5731 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5732 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5732 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5733 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5733 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5734 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5734 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5726);
          reg = x5726;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5551);
          reg = x5551;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5731);
          reg = x5731;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5732);
          reg = x5732;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5733);
          reg = x5733;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5734);
          reg = x5734;
        }
      }
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5735 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x5735 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5736 = (x5735 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5736);
          reg = x5736;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5737 = inv(x5735);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5737);
          reg = x5737;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5738 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x5738 != Fp::invalid());
      if (x5738 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5735 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5739 = x102 - x5738;
      if (x5739 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5740 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5740 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5741 = x5735 * x5740;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5742 = x5741 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5742 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5743 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5744 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5744 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5745 = x5744 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5746 = x5743 + x5745;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5747 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5747 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5748 = x5747 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5749 = x5746 + x5748;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5750 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5750 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5751 = x5750 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5752 = x5749 + x5751;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5753 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5753 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5754 = x5753 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5755 = x5752 + x5754;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5756 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5756 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5757 = x5756 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5758 = x5755 + x5757;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5759 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5759 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5760 = x5759 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5761 = x5758 + x5760;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5762 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x5762 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5763 = x5762 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5764 = x5761 + x5763;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5765 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x5765 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5766 = x5765 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5767 = x5764 + x5766;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5768 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x5768 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5769 = x5768 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5770 = x5767 + x5769;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5771 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5771 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5772 = x5771 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5773 = x5770 + x5772;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5774 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5774 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5775 = x5774 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5776 = x5773 + x5775;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5777 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5777 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5778 = x5777 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5779 = x5776 + x5778;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5780 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5780 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5781 = x5780 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5782 = x5779 + x5781;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5783 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5783 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5784 = x5783 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5785 = x5782 + x5784;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5786 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5786 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5787 = x5786 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5788 = x5785 + x5787;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5789 = x101 - x5788;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5790 = x5789 * x16;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5790);
        reg = x5790;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5791 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5791 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5792 = Fp(x5791.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5792);
          reg = x5792;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5793 = Fp(x5791.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5794 = x5793 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5794);
          reg = x5794;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5795 = Fp(x5791.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5796 = x5795 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5796);
          reg = x5796;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5797 = Fp(x5791.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5798 = x5797 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5798);
          reg = x5798;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5799 = Fp(x5791.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5800 = x5799 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5800);
          reg = x5800;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5801 = Fp(x5791.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5802 = x5801 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5802);
          reg = x5802;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5803 = Fp(x5791.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5804 = x5803 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5804);
          reg = x5804;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5805 = Fp(x5791.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5806 = x5805 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5806);
          reg = x5806;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5807 = Fp(x5791.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5808 = x5807 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5808);
          reg = x5808;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5809 = Fp(x5791.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5810 = x5809 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5810);
          reg = x5810;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5811 = Fp(x5791.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5812 = x5811 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5812);
          reg = x5812;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5813 = Fp(x5791.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5814 = x5813 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5814);
          reg = x5814;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5815 = Fp(x5791.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5816 = x5815 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5816);
          reg = x5816;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5817 = Fp(x5791.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5818 = x5817 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5818);
          reg = x5818;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5819 = Fp(x5791.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5820 = x5819 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5820);
          reg = x5820;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5821 = Fp(x5791.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5822 = x5821 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5822);
          reg = x5822;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5823 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5823 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5824 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5824 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5825 = x5824 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5826 = x5823 + x5825;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5827 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5828 = x5827 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5829 = x5826 + x5828;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5830 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5830 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5831 = x5830 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5832 = x5829 + x5831;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5833 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5833 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5834 = x5833 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5835 = x5832 + x5834;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5836 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5836 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5837 = x5836 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5838 = x5835 + x5837;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5839 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5839 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5840 = x5839 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5841 = x5838 + x5840;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5842 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5842 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5843 = x5842 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5844 = x5841 + x5843;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5845 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5845 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5846 = x5845 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5847 = x5844 + x5846;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5848 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5848 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5849 = x5848 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5850 = x5847 + x5849;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5851 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5851 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5852 = x5851 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5853 = x5850 + x5852;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5854 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5854 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5855 = x5854 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5856 = x5853 + x5855;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5857 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5857 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5858 = x5857 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5859 = x5856 + x5858;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5860 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5860 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5861 = x5860 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5862 = x5859 + x5861;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5863 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5863 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5864 = x5863 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5865 = x5862 + x5864;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5866 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x5866 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5867 = x5866 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5868 = x5865 + x5867;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5869 = x5791 - x5868;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5870 = x5869 * x16;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5870);
        reg = x5870;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5871 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5871 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5872 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5872 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5873 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5873 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5874 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x5874 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x5875 = x5873 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x5876 = x5874 + x5875;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x5877 = x5871 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x5878 = x5872 + x5877;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5879 = Fp(x5876.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5879);
          reg = x5879;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5880 = Fp(x5876.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5881 = x5880 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5881);
          reg = x5881;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5882 = Fp(x5876.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5883 = x5882 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5883);
          reg = x5883;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5884 = Fp(x5876.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5885 = x5884 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5885);
          reg = x5885;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5886 = Fp(x5876.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5887 = x5886 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5887);
          reg = x5887;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5888 = Fp(x5876.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5889 = x5888 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5889);
          reg = x5889;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5890 = Fp(x5876.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5891 = x5890 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5891);
          reg = x5891;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5892 = Fp(x5876.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5893 = x5892 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5893);
          reg = x5893;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5894 = Fp(x5876.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5895 = x5894 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5895);
          reg = x5895;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5896 = Fp(x5876.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5897 = x5896 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5897);
          reg = x5897;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5898 = Fp(x5876.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5899 = x5898 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5899);
          reg = x5899;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5900 = Fp(x5876.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5901 = x5900 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5901);
          reg = x5901;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5902 = Fp(x5876.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5903 = x5902 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5903);
          reg = x5903;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5904 = Fp(x5876.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5905 = x5904 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5905);
          reg = x5905;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5906 = Fp(x5876.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5907 = x5906 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5907);
          reg = x5907;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5908 = Fp(x5876.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5909 = x5908 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5909);
          reg = x5909;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5910 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x5910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5911 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x5911 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5912 = x5911 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5913 = x5910 + x5912;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5914 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x5914 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5915 = x5914 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5916 = x5913 + x5915;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5917 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x5917 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5918 = x5917 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5919 = x5916 + x5918;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5920 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x5920 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5921 = x5920 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5922 = x5919 + x5921;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5923 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x5923 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5924 = x5923 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5925 = x5922 + x5924;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5926 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x5926 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5927 = x5926 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5928 = x5925 + x5927;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5929 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x5929 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5930 = x5929 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5931 = x5928 + x5930;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5932 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x5932 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5933 = x5932 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5934 = x5931 + x5933;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5935 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x5935 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5936 = x5935 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5937 = x5934 + x5936;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5938 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x5938 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5939 = x5938 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5940 = x5937 + x5939;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5941 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x5941 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5942 = x5941 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5943 = x5940 + x5942;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5944 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x5944 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5945 = x5944 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5946 = x5943 + x5945;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5947 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x5947 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5948 = x5947 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5949 = x5946 + x5948;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5950 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x5950 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5951 = x5950 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5952 = x5949 + x5951;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5953 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x5953 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5954 = x5953 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5955 = x5952 + x5954;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5956 = x5876 - x5955;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5957 = x5956 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x5958 = Fp(x5957.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5958);
          reg = x5958;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5959 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5959 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x5960 = x5957 - x5959;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x5961 = x5960 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x5962 = x102 - x5961;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x5963 = x5961 * x5962;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x5963 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x5964 = x5878 + x5957;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5965 = Fp(x5964.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5965);
          reg = x5965;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5966 = Fp(x5964.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5967 = x5966 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5967);
          reg = x5967;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5968 = Fp(x5964.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5969 = x5968 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5969);
          reg = x5969;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5970 = Fp(x5964.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5971 = x5970 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5971);
          reg = x5971;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5972 = Fp(x5964.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5973 = x5972 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5973);
          reg = x5973;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5974 = Fp(x5964.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5975 = x5974 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5975);
          reg = x5975;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5976 = Fp(x5964.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5977 = x5976 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5977);
          reg = x5977;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5978 = Fp(x5964.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5979 = x5978 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5979);
          reg = x5979;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5980 = Fp(x5964.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5981 = x5980 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5981);
          reg = x5981;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5982 = Fp(x5964.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5983 = x5982 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5983);
          reg = x5983;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5984 = Fp(x5964.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5985 = x5984 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5985);
          reg = x5985;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5986 = Fp(x5964.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5987 = x5986 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5987);
          reg = x5987;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5988 = Fp(x5964.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5989 = x5988 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5989);
          reg = x5989;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5990 = Fp(x5964.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5991 = x5990 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5991);
          reg = x5991;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5992 = Fp(x5964.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5993 = x5992 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5993);
          reg = x5993;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5994 = Fp(x5964.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5995 = x5994 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5995);
          reg = x5995;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5996 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x5996 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5997 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x5997 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5998 = x5997 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5999 = x5996 + x5998;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6000 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x6000 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6001 = x6000 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6002 = x5999 + x6001;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6003 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x6003 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6004 = x6003 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6005 = x6002 + x6004;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6006 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x6006 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6007 = x6006 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6008 = x6005 + x6007;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6009 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x6009 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6010 = x6009 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6011 = x6008 + x6010;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6012 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x6012 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6013 = x6012 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6014 = x6011 + x6013;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6015 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x6015 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6016 = x6015 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6017 = x6014 + x6016;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6018 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x6018 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6019 = x6018 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6020 = x6017 + x6019;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6021 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x6021 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6022 = x6021 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6023 = x6020 + x6022;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6024 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x6024 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6025 = x6024 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6026 = x6023 + x6025;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6027 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x6027 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6028 = x6027 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6029 = x6026 + x6028;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6030 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x6030 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6031 = x6030 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6032 = x6029 + x6031;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6033 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x6033 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6034 = x6033 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6035 = x6032 + x6034;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6036 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x6036 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6037 = x6036 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6038 = x6035 + x6037;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6039 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6039 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6040 = x6039 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6041 = x6038 + x6040;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6042 = x5964 - x6041;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6043 = x6042 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6044 = Fp(x6043.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6044);
          reg = x6044;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6045 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x6045 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6046 = x6043 - x6045;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6047 = x6046 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6048 = x102 - x6047;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6049 = x6047 * x6048;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6049 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6050 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6050 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6051 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6051 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6052 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6052 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6053 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x6053 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6054 = x6052 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6055 = x6053 + x6054;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6056 = x6050 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6057 = x6051 + x6056;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6058 = Fp(x6055.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6058);
          reg = x6058;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6059 = Fp(x6055.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6060 = x6059 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6060);
          reg = x6060;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6061 = Fp(x6055.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6062 = x6061 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6062);
          reg = x6062;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6063 = Fp(x6055.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6064 = x6063 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6064);
          reg = x6064;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6065 = Fp(x6055.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6066 = x6065 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6066);
          reg = x6066;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6067 = Fp(x6055.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6068 = x6067 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6068);
          reg = x6068;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6069 = Fp(x6055.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6070 = x6069 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6070);
          reg = x6070;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6071 = Fp(x6055.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6072 = x6071 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6072);
          reg = x6072;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6073 = Fp(x6055.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6074 = x6073 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6074);
          reg = x6074;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6075 = Fp(x6055.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6076 = x6075 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6076);
          reg = x6076;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6077 = Fp(x6055.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6078 = x6077 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6078);
          reg = x6078;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6079 = Fp(x6055.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6080 = x6079 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6080);
          reg = x6080;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6081 = Fp(x6055.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6082 = x6081 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6082);
          reg = x6082;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6083 = Fp(x6055.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6084 = x6083 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6084);
          reg = x6084;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6085 = Fp(x6055.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6086 = x6085 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6086);
          reg = x6086;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6087 = Fp(x6055.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6088 = x6087 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6088);
          reg = x6088;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6089 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6089 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6090 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6090 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6091 = x6090 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6092 = x6089 + x6091;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6093 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6093 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6094 = x6093 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6095 = x6092 + x6094;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6096 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6096 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6097 = x6096 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6098 = x6095 + x6097;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6099 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6099 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6100 = x6099 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6101 = x6098 + x6100;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6102 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6102 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6103 = x6102 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6104 = x6101 + x6103;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6105 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6105 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6106 = x6105 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6107 = x6104 + x6106;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6108 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6108 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6109 = x6108 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6110 = x6107 + x6109;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6111 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6111 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6112 = x6111 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6113 = x6110 + x6112;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6114 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6114 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6115 = x6114 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6116 = x6113 + x6115;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6117 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6117 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6118 = x6117 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6119 = x6116 + x6118;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6120 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6120 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6121 = x6120 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6122 = x6119 + x6121;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6123 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6123 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6124 = x6123 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6125 = x6122 + x6124;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6126 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6126 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6127 = x6126 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6128 = x6125 + x6127;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6129 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6129 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6130 = x6129 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6131 = x6128 + x6130;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6132 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6132 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6133 = x6132 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6134 = x6131 + x6133;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6135 = x6055 - x6134;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6136 = x6135 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6137 = Fp(x6136.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6137);
          reg = x6137;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6138 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x6138 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6139 = x6136 - x6138;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6140 = x6139 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6141 = x102 - x6140;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6142 = x6140 * x6141;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6142 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6143 = x6057 + x6136;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6144 = Fp(x6143.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6144);
          reg = x6144;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6145 = Fp(x6143.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6146 = x6145 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6146);
          reg = x6146;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6147 = Fp(x6143.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6148 = x6147 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6148);
          reg = x6148;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6149 = Fp(x6143.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6150 = x6149 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6150);
          reg = x6150;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6151 = Fp(x6143.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6152 = x6151 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6152);
          reg = x6152;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6153 = Fp(x6143.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6154 = x6153 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6154);
          reg = x6154;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6155 = Fp(x6143.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6156 = x6155 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6156);
          reg = x6156;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6157 = Fp(x6143.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6158 = x6157 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6158);
          reg = x6158;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6159 = Fp(x6143.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6160 = x6159 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6160);
          reg = x6160;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6161 = Fp(x6143.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6162 = x6161 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6162);
          reg = x6162;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6163 = Fp(x6143.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6164 = x6163 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6164);
          reg = x6164;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6165 = Fp(x6143.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6166 = x6165 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6166);
          reg = x6166;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6167 = Fp(x6143.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6168 = x6167 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6168);
          reg = x6168;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6169 = Fp(x6143.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6170 = x6169 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6170);
          reg = x6170;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6171 = Fp(x6143.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6172 = x6171 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6172);
          reg = x6172;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6173 = Fp(x6143.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6174 = x6173 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6174);
          reg = x6174;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6175 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6175 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6176 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6176 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6177 = x6176 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6178 = x6175 + x6177;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6179 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6180 = x6179 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6181 = x6178 + x6180;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6182 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6183 = x6182 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6184 = x6181 + x6183;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6185 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6185 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6186 = x6185 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6187 = x6184 + x6186;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6188 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6188 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6189 = x6188 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6190 = x6187 + x6189;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6191 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6191 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6192 = x6191 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6193 = x6190 + x6192;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6194 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6194 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6195 = x6194 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6196 = x6193 + x6195;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6197 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6197 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6198 = x6197 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6199 = x6196 + x6198;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6200 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6200 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6201 = x6200 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6202 = x6199 + x6201;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6203 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6203 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6204 = x6203 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6205 = x6202 + x6204;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6206 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6206 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6207 = x6206 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6208 = x6205 + x6207;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6209 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6209 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6210 = x6209 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6211 = x6208 + x6210;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6212 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x6212 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6213 = x6212 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6214 = x6211 + x6213;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6215 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x6215 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6216 = x6215 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6217 = x6214 + x6216;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6218 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x6218 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6219 = x6218 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6220 = x6217 + x6219;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6221 = x6143 - x6220;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6222 = x6221 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6223 = Fp(x6222.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6223);
          reg = x6223;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6224 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6224 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6225 = x6222 - x6224;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6226 = x6225 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6227 = x102 - x6226;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6228 = x6226 * x6227;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6228 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/components/mux.h":39:25))
    auto x6229 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x6229 != Fp::invalid());
    if (x6229 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6230 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x6230 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[9](Reg)"("cirgen/circuit/rv32im/sha.cpp":259:70))
      auto x6231 = args[2][103 * steps + ((cycle - 1) & mask)];
      assert(x6231 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[11](Reg)"("cirgen/circuit/rv32im/sha.cpp":260:70))
      auto x6232 = args[2][105 * steps + ((cycle - 1) & mask)];
      assert(x6232 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":261:29)
      auto x6233 = x6231 + x6232;
      if (x6233 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":263:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6234 = x102 - x6231;
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6235 = x6234 - x6232;
      if (x6235 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6236 = args[2][137 * steps + ((cycle - 1) & mask)];
        assert(x6236 != Fp::invalid());
        if (x6236 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":269:7)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":271:20)
        auto x6237 = x102 - x6236;
        if (x6237 != 0) {
          // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6238 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x6238 != Fp::invalid());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6238);
            reg = x6238;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":274:42))
          auto x6239 = args[2][136 * steps + ((cycle - 1) & mask)];
          assert(x6239 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":274:42)
          auto x6240 = x6239 - x102;
          // loc("cirgen/circuit/rv32im/sha.cpp":274:7)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6240);
            reg = x6240;
          }
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6241 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x6241 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6242 = (x6241 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6242);
          reg = x6242;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6243 = inv(x6241);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6243);
          reg = x6243;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6244 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x6244 != Fp::invalid());
      if (x6244 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6241 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6245 = x102 - x6244;
      if (x6245 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6246 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x6246 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6247 = x6241 * x6246;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6248 = x6247 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6248 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x6244 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6249 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x6249 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":281:17)
        auto x6250 = x102 - x6249;
        if (x6250 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":281:21)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x75);
            reg = x75;
          }
        }
        if (x6249 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":282:17)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
      }
      if (x6245 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6251 = x2144 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6252 = x1359 + x6251;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6253 = x2848 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6254 = x6252 + x6253;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6255 = x3605 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6256 = x6254 + x6255;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6257 = x4057 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6258 = x6256 + x6257;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6259 = x4422 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6260 = x6258 + x6259;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6261 = x4854 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6262 = x6260 + x6261;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6263 = x5199 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6264 = x6262 + x6263;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6265 = x5550 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6266 = x6264 + x6265;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6267 = x6229 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6268 = x6266 + x6267;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6269 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x6269 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6270 = x6269 * x74;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6271 = x6268 + x6270;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6272 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x6272 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6273 = x6272 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6274 = x6271 + x6273;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6275 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x6275 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6276 = x6275 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6277 = x6274 + x6276;
        // loc("Top/Mux/4/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6278 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x6278 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6279 = x6278 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6280 = x6277 + x6279;
        // loc("cirgen/circuit/rv32im/sha.cpp":284:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6280);
          reg = x6280;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x6281 = x605 + x84;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6282 = Fp(x6281.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6282);
          reg = x6282;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x6283 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x6283 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6284 = x6281 - x6283;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x6285 = x6284 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6286 = Fp(x6285.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6286);
          reg = x6286;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x6287 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x6287 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6288 = x6285 - x6287;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x6289 = x6288 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6290 = Fp(x6289.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6290);
          reg = x6290;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x6291 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6291 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6292 = x6289 - x6291;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x6293 = x6292 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x6294 = Fp(x6293.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6294);
          reg = x6294;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6295 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x6295 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x6296 = x6293 - x6295;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x6297 = x6296 * x82;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6297);
        reg = x6297;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6298 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6298 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x6299 = x102 - x6298;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x6300 = x6298 * x6299;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6300);
        reg = x6300;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6301 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x6301 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x6302 = x99 - x6298;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x6303 = x6301 * x6302;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x6303 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":287:40))
      auto x6304 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x6304 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":287:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6304);
        reg = x6304;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":288:38))
      auto x6305 = args[2][133 * steps + ((cycle - 1) & mask)];
      assert(x6305 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":288:3)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6305);
        reg = x6305;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":289:34))
      auto x6306 = args[2][134 * steps + ((cycle - 1) & mask)];
      assert(x6306 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":289:3)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6306);
        reg = x6306;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":290:34))
      auto x6307 = args[2][135 * steps + ((cycle - 1) & mask)];
      assert(x6307 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":290:3)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6307);
        reg = x6307;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":291:36))
      auto x6308 = args[2][139 * steps + ((cycle - 1) & mask)];
      assert(x6308 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":291:3)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6308);
        reg = x6308;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6309 = args[2][144 * steps + ((cycle - 1) & mask)];
      assert(x6309 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6309);
        reg = x6309;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6310 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x6310 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6311 = (x6310 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6311);
          reg = x6311;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6312 = inv(x6310);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6312);
          reg = x6312;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6313 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x6313 != Fp::invalid());
      if (x6313 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6310 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6314 = x102 - x6313;
      if (x6314 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6315 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x6315 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6316 = x6310 * x6315;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6317 = x6316 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6317 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6318 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x6318 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":300:8)
      auto x6319 = x6318 * x84;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6320 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x6320 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":301:8)
      auto x6321 = x6320 * x84;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6322 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x6322 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":302:8)
      auto x6323 = x6322 * x84;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6324 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x6324 != Fp::invalid());
      host_args.at(0) = x75;
      host_args.at(1) = x6324;
      host_args.at(2) = x6241;
      host_args.at(3) = x6319;
      host_args.at(4) = x6321;
      host_args.at(5) = x6323;
      host_args.at(6) = x6310;
      host(ctx, "log", "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = 0x%x, data1 = 0x%x, state = 0x%x, repeat: %u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/sha.cpp":306:15)
      auto x6325 = x102 - x6324;
      if (x6325 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6326 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x6326 != Fp::invalid());
        if (x6326 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6327 = x6318 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6328 = x6327 - x6241;
          {
            host_args.at(0) = x6328;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6329 = host_outs.at(0);
            auto x6330 = host_outs.at(1);
            auto x6331 = host_outs.at(2);
            auto x6332 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6329);
              reg = x6329;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6330);
              reg = x6330;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6331);
              reg = x6331;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6332);
              reg = x6332;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6333 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6333 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6334 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6334 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6335 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6335 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6336 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x6336 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6328);
            reg = x6328;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6230);
            reg = x6230;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6333);
            reg = x6333;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6334);
            reg = x6334;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6335);
            reg = x6335;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6336);
            reg = x6336;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":308:16)
        auto x6337 = x102 - x6326;
        if (x6337 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6338 = x6318 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6339 = x6338 - x6241;
          {
            host_args.at(0) = x6339;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6340 = host_outs.at(0);
            auto x6341 = host_outs.at(1);
            auto x6342 = host_outs.at(2);
            auto x6343 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6340);
              reg = x6340;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6341);
              reg = x6341;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6342);
              reg = x6342;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6343);
              reg = x6343;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6344 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6344 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6345 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6345 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6346 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6346 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6347 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x6347 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6339);
            reg = x6339;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6230);
            reg = x6230;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6344);
            reg = x6344;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6345);
            reg = x6345;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6346);
            reg = x6346;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6347);
            reg = x6347;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
        auto x6348 = x15 - x6241;
        {
          host_args.at(0) = x6348;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6349 = host_outs.at(0);
          auto x6350 = host_outs.at(1);
          auto x6351 = host_outs.at(2);
          auto x6352 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6349);
            reg = x6349;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6350);
            reg = x6350;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6351);
            reg = x6351;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6352);
            reg = x6352;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6353 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6353 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6354 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6354 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6355 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6355 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6356 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6356 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6348);
          reg = x6348;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6230);
          reg = x6230;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6353);
          reg = x6353;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6354);
          reg = x6354;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6355);
          reg = x6355;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6356);
          reg = x6356;
        }
      }
      if (x6324 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6357 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x6357 != Fp::invalid());
        if (x6357 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6358 = x6320 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6359 = x6358 - x6241;
          {
            host_args.at(0) = x6359;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6360 = host_outs.at(0);
            auto x6361 = host_outs.at(1);
            auto x6362 = host_outs.at(2);
            auto x6363 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6360);
              reg = x6360;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6361);
              reg = x6361;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6362);
              reg = x6362;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6363);
              reg = x6363;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6364 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6364 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6365 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6365 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6366 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6366 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6367 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x6367 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6359);
            reg = x6359;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6230);
            reg = x6230;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6364);
            reg = x6364;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6365);
            reg = x6365;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6366);
            reg = x6366;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6367);
            reg = x6367;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":313:16)
        auto x6368 = x102 - x6357;
        if (x6368 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6369 = x6320 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6370 = x6369 - x6241;
          {
            host_args.at(0) = x6370;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6371 = host_outs.at(0);
            auto x6372 = host_outs.at(1);
            auto x6373 = host_outs.at(2);
            auto x6374 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6371);
              reg = x6371;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6372);
              reg = x6372;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6373);
              reg = x6373;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6374);
              reg = x6374;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6375 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6375 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6376 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6376 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6377 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6377 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6378 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x6378 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6370);
            reg = x6370;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6230);
            reg = x6230;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6375);
            reg = x6375;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6376);
            reg = x6376;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6377);
            reg = x6377;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6378);
            reg = x6378;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
        auto x6379 = x14 - x6241;
        {
          host_args.at(0) = x6379;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6380 = host_outs.at(0);
          auto x6381 = host_outs.at(1);
          auto x6382 = host_outs.at(2);
          auto x6383 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6380);
            reg = x6380;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6381);
            reg = x6381;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6382);
            reg = x6382;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6383);
            reg = x6383;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6384 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6384 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6385 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6385 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6386 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6386 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6387 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6387 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6379);
          reg = x6379;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6230);
          reg = x6230;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6384);
          reg = x6384;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6385);
          reg = x6385;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6386);
          reg = x6386;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6387);
          reg = x6387;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6388 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x6388 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6389 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x6389 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6390 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x6390 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6391 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x6391 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6392 = x6390 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6393 = x6391 + x6392;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6394 = x6388 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6395 = x6389 + x6394;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6396 = Fp(x6393.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6396);
          reg = x6396;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6397 = Fp(x6393.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6398 = x6397 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6398);
          reg = x6398;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6399 = Fp(x6393.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6400 = x6399 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6400);
          reg = x6400;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6401 = Fp(x6393.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6402 = x6401 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6402);
          reg = x6402;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6403 = Fp(x6393.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6404 = x6403 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6404);
          reg = x6404;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6405 = Fp(x6393.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6406 = x6405 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6406);
          reg = x6406;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6407 = Fp(x6393.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6408 = x6407 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6408);
          reg = x6408;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6409 = Fp(x6393.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6410 = x6409 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6410);
          reg = x6410;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6411 = Fp(x6393.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6412 = x6411 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6412);
          reg = x6412;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6413 = Fp(x6393.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6414 = x6413 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6414);
          reg = x6414;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6415 = Fp(x6393.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6416 = x6415 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6416);
          reg = x6416;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6417 = Fp(x6393.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6418 = x6417 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6418);
          reg = x6418;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6419 = Fp(x6393.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6420 = x6419 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6420);
          reg = x6420;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6421 = Fp(x6393.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6422 = x6421 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6422);
          reg = x6422;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6423 = Fp(x6393.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6424 = x6423 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6424);
          reg = x6424;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6425 = Fp(x6393.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6426 = x6425 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6426);
          reg = x6426;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6427 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6427 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6428 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6428 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6429 = x6428 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6430 = x6427 + x6429;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6431 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6431 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6432 = x6431 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6433 = x6430 + x6432;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6434 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6434 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6435 = x6434 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6436 = x6433 + x6435;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6437 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6437 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6438 = x6437 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6439 = x6436 + x6438;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6440 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6440 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6441 = x6440 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6442 = x6439 + x6441;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6443 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6443 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6444 = x6443 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6445 = x6442 + x6444;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6446 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x6446 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6447 = x6446 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6448 = x6445 + x6447;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6449 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x6449 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6450 = x6449 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6451 = x6448 + x6450;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6452 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x6452 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6453 = x6452 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6454 = x6451 + x6453;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6455 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6455 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6456 = x6455 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6457 = x6454 + x6456;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6458 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6458 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6459 = x6458 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6460 = x6457 + x6459;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6461 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6461 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6462 = x6461 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6463 = x6460 + x6462;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6464 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6464 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6465 = x6464 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6466 = x6463 + x6465;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6467 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6467 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6468 = x6467 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6469 = x6466 + x6468;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6470 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6470 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6471 = x6470 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6472 = x6469 + x6471;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6473 = x6393 - x6472;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6474 = x6473 * x16;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6474);
        reg = x6474;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6475 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6475 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
      auto x6476 = x6395 + x6475;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6477 = Fp(x6476.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6477);
          reg = x6477;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6478 = Fp(x6476.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6479 = x6478 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6479);
          reg = x6479;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6480 = Fp(x6476.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6481 = x6480 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6481);
          reg = x6481;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6482 = Fp(x6476.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6483 = x6482 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6483);
          reg = x6483;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6484 = Fp(x6476.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6485 = x6484 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6485);
          reg = x6485;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6486 = Fp(x6476.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6487 = x6486 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6487);
          reg = x6487;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6488 = Fp(x6476.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6489 = x6488 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6489);
          reg = x6489;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6490 = Fp(x6476.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6491 = x6490 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6491);
          reg = x6491;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6492 = Fp(x6476.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6493 = x6492 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6493);
          reg = x6493;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6494 = Fp(x6476.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6495 = x6494 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6495);
          reg = x6495;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6496 = Fp(x6476.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6497 = x6496 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6497);
          reg = x6497;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6498 = Fp(x6476.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6499 = x6498 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6499);
          reg = x6499;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6500 = Fp(x6476.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6501 = x6500 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6501);
          reg = x6501;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6502 = Fp(x6476.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6503 = x6502 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6503);
          reg = x6503;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6504 = Fp(x6476.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6505 = x6504 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6505);
          reg = x6505;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6506 = Fp(x6476.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6507 = x6506 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6507);
          reg = x6507;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6508 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6508 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6509 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6509 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6510 = x6509 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6511 = x6508 + x6510;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6512 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6512 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6513 = x6512 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6514 = x6511 + x6513;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6515 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6515 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6516 = x6515 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6517 = x6514 + x6516;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6518 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6518 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6519 = x6518 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6520 = x6517 + x6519;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6521 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6521 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6522 = x6521 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6523 = x6520 + x6522;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6524 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6524 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6525 = x6524 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6526 = x6523 + x6525;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6527 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6527 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6528 = x6527 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6529 = x6526 + x6528;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6530 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6530 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6531 = x6530 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6532 = x6529 + x6531;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6533 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x6533 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6534 = x6533 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6535 = x6532 + x6534;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6536 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x6536 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6537 = x6536 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6538 = x6535 + x6537;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6539 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x6539 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6540 = x6539 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6541 = x6538 + x6540;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6542 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x6542 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6543 = x6542 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6544 = x6541 + x6543;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6545 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x6545 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6546 = x6545 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6547 = x6544 + x6546;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6548 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x6548 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6549 = x6548 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6550 = x6547 + x6549;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6551 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x6551 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6552 = x6551 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6553 = x6550 + x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6554 = x6476 - x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6555 = x6554 * x16;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6555);
        reg = x6555;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6556 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6557 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x6557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6558 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x6558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6559 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x6559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6560 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x6560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6561 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x6561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6562 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x6562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6563 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x6563 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6564 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6564 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6565 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6565 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6566 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6566 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6567 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6567 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6568 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6569 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6570 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6571 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6571 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6572 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6573 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6574 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6575 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6576 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6577 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6578 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6579 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6580 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6581 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6582 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6583 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6584 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6585 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6586 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6587 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6588 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x6588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6589 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x6589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6590 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x6590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6591 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x6591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6592 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x6592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6593 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6594 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x6594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6595 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6596 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6597 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6598 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6599 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6600 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6601 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6602 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6603 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6604 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6605 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6606 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6607 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6608 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6609 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6610 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6611 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6612 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6613 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6614 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6615 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6616 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6617 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6618 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6619 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6620 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x6620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6621 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x6621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6622 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x6622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6623 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6624 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x6624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6625 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x6625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6626 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x6626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6627 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x6627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6628 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x6628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6629 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x6629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6630 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x6630 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6631 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x6631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6632 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x6632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6633 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x6633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6634 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x6634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6635 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x6635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6636 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x6636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6637 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x6637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6638 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x6638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6639 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x6639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6640 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x6640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6641 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x6641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6642 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x6642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6643 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x6643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6644 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x6644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6645 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x6645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6646 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x6646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6647 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x6647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6648 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x6648 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6649 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x6649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6650 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x6650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6651 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x6651 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6652 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x6652 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6653 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x6653 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6654 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x6654 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6655 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x6655 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6656 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x6656 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6657 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x6657 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6658 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x6658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6659 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x6659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6660 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x6660 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6661 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x6661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6662 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x6662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6663 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x6663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6664 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x6664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6665 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x6665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6666 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x6666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6667 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6668 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6669 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x6669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6670 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6671 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x6671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6672 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x6672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6673 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x6673 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6674 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x6674 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6675 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x6675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6676 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x6676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6677 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x6677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6678 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x6678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6679 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6680 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x6680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6681 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x6681 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6682 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x6682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6683 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x6683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6684 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6685 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6686 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6687 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6687 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6688 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6689 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6690 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6690 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6691 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6692 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6693 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x6693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6694 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x6694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6695 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x6695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6696 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x6696 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6697 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x6697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6698 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x6698 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6699 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x6699 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6700 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x6700 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6701 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x6701 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6702 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x6702 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6703 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6704 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x6704 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6705 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6706 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6707 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6708 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6709 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6710 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6711 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6712 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6713 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6714 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6715 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6716 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6717 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6718 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6719 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6720 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6721 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6722 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6723 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6724 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6725 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6726 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6727 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6728 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6729 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6730 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6731 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6732 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6733 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6734 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6735 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6736 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6737 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6738 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6739 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6740 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6741 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x6741 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6742 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x6742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6743 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x6743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6744 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x6744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6745 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x6745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6746 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x6746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6747 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x6747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6748 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x6748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6749 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x6749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6750 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x6750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6751 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x6751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6752 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x6752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6753 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x6753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6754 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x6754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6755 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x6755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6756 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x6756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6757 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x6757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6758 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x6758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6759 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x6759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6760 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x6760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6761 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x6761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6762 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x6762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6763 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x6763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6764 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x6764 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6765 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x6765 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6766 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x6766 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6767 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x6767 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6768 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x6768 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6769 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x6769 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6770 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x6770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6771 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x6771 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6772 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x6772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6773 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x6773 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6774 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x6774 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6775 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x6775 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6776 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x6776 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6777 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x6777 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6778 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x6778 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6779 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x6779 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6780 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x6780 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6781 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x6781 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6782 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x6782 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6783 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x6783 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6784 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x6784 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6785 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x6785 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6786 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x6786 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6787 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x6787 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6788 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x6788 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6789 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x6789 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6790 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x6790 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6791 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x6791 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6792 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x6792 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6793 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x6793 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6794 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x6794 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6795 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x6795 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6796 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x6796 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6797 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x6797 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6798 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x6798 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6799 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x6799 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6800 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x6800 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6801 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x6801 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6802 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x6802 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6803 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x6803 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6804 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x6804 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6805 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x6805 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6806 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x6806 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6807 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x6807 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6808 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x6808 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6809 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x6809 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6810 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x6810 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6811 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x6811 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6812 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6812 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6813 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6813 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6814 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6814 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6815 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x6815 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x6816 = x6813 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x6817 = x6812 + x6816;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x6818 = x6815 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x6819 = x6814 + x6818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6820 = x6569 + x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6821 = x6569 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6822 = x6821 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6823 = x6820 - x6822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6824 = x6570 + x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6825 = x6570 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6826 = x6825 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6827 = x6824 - x6826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6828 = x6571 + x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6829 = x6571 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6830 = x6829 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6831 = x6828 - x6830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6832 = x6572 + x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6833 = x6572 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6834 = x6833 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6835 = x6832 - x6834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6836 = x6573 + x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6837 = x6573 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6838 = x6837 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6839 = x6836 - x6838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6840 = x6574 + x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6841 = x6574 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6842 = x6841 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6843 = x6840 - x6842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6844 = x6575 + x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6845 = x6575 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6846 = x6845 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6847 = x6844 - x6846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6848 = x6576 + x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6849 = x6576 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6850 = x6849 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6851 = x6848 - x6850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6852 = x6577 + x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6853 = x6577 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6854 = x6853 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6855 = x6852 - x6854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6856 = x6578 + x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6857 = x6578 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6858 = x6857 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6859 = x6856 - x6858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6860 = x6579 + x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6861 = x6579 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6862 = x6861 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6863 = x6860 - x6862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6864 = x6580 + x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6865 = x6580 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6866 = x6865 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6867 = x6864 - x6866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6868 = x6581 + x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6869 = x6581 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6870 = x6869 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6871 = x6868 - x6870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6872 = x6582 + x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6873 = x6582 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6874 = x6873 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6875 = x6872 - x6874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6876 = x6583 + x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6877 = x6583 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6878 = x6877 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6879 = x6876 - x6878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6880 = x6584 + x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6881 = x6584 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6882 = x6881 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6883 = x6880 - x6882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6884 = x6585 + x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6885 = x6585 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6886 = x6885 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6887 = x6884 - x6886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6888 = x6586 + x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6889 = x6586 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6890 = x6889 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6891 = x6888 - x6890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6892 = x6587 + x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6893 = x6587 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6894 = x6893 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6895 = x6892 - x6894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6896 = x6556 + x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6897 = x6556 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6898 = x6897 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6899 = x6896 - x6898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6900 = x6557 + x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6901 = x6557 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6902 = x6901 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6903 = x6900 - x6902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6904 = x6558 + x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6905 = x6558 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6906 = x6905 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6907 = x6904 - x6906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6908 = x6559 + x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6909 = x6559 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6910 = x6909 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6911 = x6908 - x6910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6912 = x6560 + x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6913 = x6560 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6914 = x6913 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6915 = x6912 - x6914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6916 = x6561 + x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6917 = x6561 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6918 = x6917 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6919 = x6916 - x6918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6920 = x6562 + x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6921 = x6562 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6922 = x6921 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6923 = x6920 - x6922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6924 = x6563 + x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6925 = x6563 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6926 = x6925 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6927 = x6924 - x6926;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6928 = x6564 + x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6929 = x6564 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6930 = x6929 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6931 = x6928 - x6930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6932 = x6565 + x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6933 = x6565 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6934 = x6933 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6935 = x6932 - x6934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6936 = x6566 + x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6937 = x6566 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6938 = x6937 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6939 = x6936 - x6938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6940 = x6567 + x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6941 = x6567 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6942 = x6941 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6943 = x6940 - x6942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6944 = x6568 + x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6945 = x6568 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6946 = x6945 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6947 = x6944 - x6946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6948 = x6558 + x6823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6949 = x6905 * x6823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6950 = x6948 - x6949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6951 = x6559 + x6827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6952 = x6909 * x6827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6953 = x6951 - x6952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6954 = x6560 + x6831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6955 = x6913 * x6831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6956 = x6954 - x6955;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6957 = x6561 + x6835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6958 = x6917 * x6835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6959 = x6957 - x6958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6960 = x6562 + x6839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6961 = x6921 * x6839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6962 = x6960 - x6961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6963 = x6563 + x6843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6964 = x6925 * x6843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6965 = x6963 - x6964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6966 = x6564 + x6847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6967 = x6929 * x6847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6968 = x6966 - x6967;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6969 = x6565 + x6851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6970 = x6933 * x6851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6971 = x6969 - x6970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6972 = x6566 + x6855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6973 = x6937 * x6855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6974 = x6972 - x6973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6975 = x6567 + x6859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6976 = x6941 * x6859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6977 = x6975 - x6976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6978 = x6568 + x6863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6979 = x6945 * x6863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6980 = x6978 - x6979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6981 = x6569 + x6867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6982 = x6821 * x6867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6983 = x6981 - x6982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6984 = x6570 + x6871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6985 = x6825 * x6871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6986 = x6984 - x6985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6987 = x6571 + x6875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6988 = x6829 * x6875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6989 = x6987 - x6988;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6990 = x6572 + x6879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6991 = x6833 * x6879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6992 = x6990 - x6991;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6993 = x6573 + x6883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6994 = x6837 * x6883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6995 = x6993 - x6994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6996 = x6574 + x6887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6997 = x6841 * x6887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6998 = x6996 - x6997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6999 = x6575 + x6891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7000 = x6845 * x6891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7001 = x6999 - x7000;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7002 = x6576 + x6895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7003 = x6849 * x6895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7004 = x7002 - x7003;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7005 = x6577 + x6899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7006 = x6853 * x6899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7007 = x7005 - x7006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7008 = x6578 + x6903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7009 = x6857 * x6903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7010 = x7008 - x7009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7011 = x6579 + x6907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7012 = x6861 * x6907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7013 = x7011 - x7012;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7014 = x6580 + x6911;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7015 = x6865 * x6911;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7016 = x7014 - x7015;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7017 = x6581 + x6915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7018 = x6869 * x6915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7019 = x7017 - x7018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7020 = x6582 + x6919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7021 = x6873 * x6919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7022 = x7020 - x7021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7023 = x6583 + x6923;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7024 = x6877 * x6923;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7025 = x7023 - x7024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7026 = x6584 + x6927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7027 = x6881 * x6927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7028 = x7026 - x7027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7029 = x6585 + x6931;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7030 = x6885 * x6931;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7031 = x7029 - x7030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7032 = x6586 + x6935;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7033 = x6889 * x6935;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7034 = x7032 - x7033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7035 = x6587 + x6939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7036 = x6893 * x6939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7037 = x7035 - x7036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7038 = x6556 + x6943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7039 = x6897 * x6943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7040 = x7038 - x7039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7041 = x6557 + x6947;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7042 = x6901 * x6947;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7043 = x7041 - x7042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7044 = x6695 + x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7045 = x6695 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7046 = x7045 * x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7047 = x7044 - x7046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7048 = x6696 + x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7049 = x6696 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7050 = x7049 * x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7051 = x7048 - x7050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7052 = x6697 + x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7053 = x6697 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7054 = x7053 * x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7055 = x7052 - x7054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7056 = x6698 + x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7057 = x6698 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7058 = x7057 * x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7059 = x7056 - x7058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7060 = x6699 + x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7061 = x6699 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7062 = x7061 * x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7063 = x7060 - x7062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7064 = x6700 + x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7065 = x6700 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7066 = x7065 * x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7067 = x7064 - x7066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7068 = x6701 + x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7069 = x6701 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7070 = x7069 * x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7071 = x7068 - x7070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7072 = x6702 + x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7073 = x6702 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7074 = x7073 * x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7075 = x7072 - x7074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7076 = x6703 + x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7077 = x6703 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7078 = x7077 * x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7079 = x7076 - x7078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7080 = x6704 + x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7081 = x6704 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7082 = x7081 * x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7083 = x7080 - x7082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7084 = x6705 + x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7085 = x6705 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7086 = x7085 * x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7087 = x7084 - x7086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7088 = x6706 + x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7089 = x6706 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7090 = x7089 * x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7091 = x7088 - x7090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7092 = x6707 + x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7093 = x6707 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7094 = x7093 * x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7095 = x7092 - x7094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7096 = x6708 + x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7097 = x6708 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7098 = x7097 * x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7099 = x7096 - x7098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7100 = x6709 + x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7101 = x6709 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7102 = x7101 * x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7103 = x7100 - x7102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7104 = x6710 + x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7105 = x6710 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7106 = x7105 * x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7107 = x7104 - x7106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7108 = x6711 + x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7109 = x6711 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7110 = x7109 * x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7111 = x7108 - x7110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7112 = x6712 + x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7113 = x6712 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7114 = x7113 * x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7115 = x7112 - x7114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7116 = x6713 + x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7117 = x6713 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7118 = x7117 * x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7119 = x7116 - x7118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7120 = x6714 + x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7121 = x6714 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7122 = x7121 * x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7123 = x7120 - x7122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7124 = x6715 + x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7125 = x6715 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7126 = x7125 * x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7127 = x7124 - x7126;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7128 = x6684 + x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7129 = x6684 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7130 = x7129 * x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7131 = x7128 - x7130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7132 = x6685 + x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7133 = x6685 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7134 = x7133 * x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7135 = x7132 - x7134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7136 = x6686 + x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7137 = x6686 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7138 = x7137 * x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7139 = x7136 - x7138;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7140 = x6687 + x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7141 = x6687 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7142 = x7141 * x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7143 = x7140 - x7142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7144 = x6688 + x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7145 = x6688 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7146 = x7145 * x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7147 = x7144 - x7146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7148 = x6689 + x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7149 = x6689 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7150 = x7149 * x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7151 = x7148 - x7150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7152 = x6690 + x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7153 = x6690 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7154 = x7153 * x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7155 = x7152 - x7154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7156 = x6691 + x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7157 = x6691 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7158 = x7157 * x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7159 = x7156 - x7158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7160 = x6692 + x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7161 = x6692 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7162 = x7161 * x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7163 = x7160 - x7162;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7164 = x6693 + x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7165 = x6693 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7166 = x7165 * x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7167 = x7164 - x7166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7168 = x6694 + x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7169 = x6694 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7170 = x7169 * x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7171 = x7168 - x7170;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7172 = x6690 + x7047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7173 = x7153 * x7047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7174 = x7172 - x7173;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7175 = x6691 + x7051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7176 = x7157 * x7051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7177 = x7175 - x7176;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7178 = x6692 + x7055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7179 = x7161 * x7055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7180 = x7178 - x7179;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7181 = x6693 + x7059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7182 = x7165 * x7059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7183 = x7181 - x7182;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7184 = x6694 + x7063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7185 = x7169 * x7063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7186 = x7184 - x7185;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7187 = x6695 + x7067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7188 = x7045 * x7067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7189 = x7187 - x7188;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7190 = x6696 + x7071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7191 = x7049 * x7071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7192 = x7190 - x7191;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7193 = x6697 + x7075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7194 = x7053 * x7075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7195 = x7193 - x7194;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7196 = x6698 + x7079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7197 = x7057 * x7079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7198 = x7196 - x7197;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7199 = x6699 + x7083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7200 = x7061 * x7083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7201 = x7199 - x7200;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7202 = x6700 + x7087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7203 = x7065 * x7087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7204 = x7202 - x7203;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7205 = x6701 + x7091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7206 = x7069 * x7091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7207 = x7205 - x7206;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7208 = x6702 + x7095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7209 = x7073 * x7095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7210 = x7208 - x7209;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7211 = x6703 + x7099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7212 = x7077 * x7099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7213 = x7211 - x7212;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7214 = x6704 + x7103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7215 = x7081 * x7103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7216 = x7214 - x7215;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7217 = x6705 + x7107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7218 = x7085 * x7107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7219 = x7217 - x7218;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7220 = x6706 + x7111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7221 = x7089 * x7111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7222 = x7220 - x7221;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7223 = x6707 + x7115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7224 = x7093 * x7115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7225 = x7223 - x7224;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7226 = x6708 + x7119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7227 = x7097 * x7119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7228 = x7226 - x7227;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7229 = x6709 + x7123;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7230 = x7101 * x7123;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7231 = x7229 - x7230;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7232 = x6710 + x7127;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7233 = x7105 * x7127;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7234 = x7232 - x7233;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7235 = x6711 + x7131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7236 = x7109 * x7131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7237 = x7235 - x7236;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7238 = x6712 + x7135;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7239 = x7113 * x7135;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7240 = x7238 - x7239;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7241 = x6713 + x7139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7242 = x7117 * x7139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7243 = x7241 - x7242;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7244 = x6714 + x7143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7245 = x7121 * x7143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7246 = x7244 - x7245;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7247 = x6715 + x7147;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7248 = x7125 * x7147;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7249 = x7247 - x7248;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7250 = x6684 + x7151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7251 = x7129 * x7151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7252 = x7250 - x7251;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7253 = x6685 + x7155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7254 = x7133 * x7155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7255 = x7253 - x7254;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7256 = x6686 + x7159;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7257 = x7137 * x7159;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7258 = x7256 - x7257;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7259 = x6687 + x7163;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7260 = x7141 * x7163;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7261 = x7259 - x7260;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7262 = x6688 + x7167;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7263 = x7145 * x7167;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7264 = x7262 - x7263;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7265 = x6689 + x7171;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7266 = x7149 * x7171;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7267 = x7265 - x7266;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7268 = x6781 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7269 = x6780 + x7268;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7270 = x6782 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7271 = x7269 + x7270;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7272 = x6783 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7273 = x7271 + x7272;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7274 = x6784 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7275 = x7273 + x7274;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7276 = x6785 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7277 = x7275 + x7276;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7278 = x6786 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7279 = x7277 + x7278;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7280 = x6787 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7281 = x7279 + x7280;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7282 = x6788 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7283 = x7281 + x7282;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7284 = x6789 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7285 = x7283 + x7284;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7286 = x6790 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7287 = x7285 + x7286;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7288 = x6791 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7289 = x7287 + x7288;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7290 = x6792 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7291 = x7289 + x7290;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7292 = x6793 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7293 = x7291 + x7292;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7294 = x6794 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7295 = x7293 + x7294;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7296 = x6795 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7297 = x7295 + x7296;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7298 = x6797 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7299 = x6796 + x7298;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7300 = x6798 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7301 = x7299 + x7300;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7302 = x6799 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7303 = x7301 + x7302;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7304 = x6800 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7305 = x7303 + x7304;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7306 = x6801 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7307 = x7305 + x7306;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7308 = x6802 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7309 = x7307 + x7308;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7310 = x6803 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7311 = x7309 + x7310;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7312 = x6804 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7313 = x7311 + x7312;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7314 = x6805 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7315 = x7313 + x7314;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7316 = x6806 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7317 = x7315 + x7316;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7318 = x6807 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7319 = x7317 + x7318;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7320 = x6808 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7321 = x7319 + x7320;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7322 = x6809 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7323 = x7321 + x7322;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7324 = x6810 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7325 = x7323 + x7324;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7326 = x6811 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7327 = x7325 + x7326;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7328 = x6684 * x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7329 = x102 - x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7330 = x7329 * x6748;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7331 = x7328 + x7330;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7332 = x6685 * x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7333 = x102 - x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7334 = x7333 * x6749;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7335 = x7332 + x7334;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7336 = x6686 * x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7337 = x102 - x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7338 = x7337 * x6750;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7339 = x7336 + x7338;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7340 = x6687 * x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7341 = x102 - x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7342 = x7341 * x6751;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7343 = x7340 + x7342;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7344 = x6688 * x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7345 = x102 - x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7346 = x7345 * x6752;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7347 = x7344 + x7346;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7348 = x6689 * x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7349 = x102 - x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7350 = x7349 * x6753;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7351 = x7348 + x7350;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7352 = x6690 * x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7353 = x102 - x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7354 = x7353 * x6754;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7355 = x7352 + x7354;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7356 = x6691 * x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7357 = x102 - x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7358 = x7357 * x6755;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7359 = x7356 + x7358;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7360 = x6692 * x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7361 = x102 - x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7362 = x7361 * x6756;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7363 = x7360 + x7362;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7364 = x6693 * x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7365 = x102 - x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7366 = x7365 * x6757;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7367 = x7364 + x7366;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7368 = x6694 * x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7369 = x102 - x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7370 = x7369 * x6758;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7371 = x7368 + x7370;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7372 = x6695 * x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7373 = x102 - x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7374 = x7373 * x6759;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7375 = x7372 + x7374;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7376 = x6696 * x6728;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7377 = x102 - x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7378 = x7377 * x6760;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7379 = x7376 + x7378;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7380 = x6697 * x6729;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7381 = x102 - x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7382 = x7381 * x6761;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7383 = x7380 + x7382;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7384 = x6698 * x6730;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7385 = x102 - x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7386 = x7385 * x6762;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7387 = x7384 + x7386;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7388 = x6699 * x6731;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7389 = x102 - x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7390 = x7389 * x6763;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7391 = x7388 + x7390;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7392 = x6700 * x6732;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7393 = x102 - x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7394 = x7393 * x6764;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7395 = x7392 + x7394;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7396 = x6701 * x6733;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7397 = x102 - x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7398 = x7397 * x6765;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7399 = x7396 + x7398;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7400 = x6702 * x6734;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7401 = x102 - x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7402 = x7401 * x6766;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7403 = x7400 + x7402;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7404 = x6703 * x6735;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7405 = x102 - x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7406 = x7405 * x6767;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7407 = x7404 + x7406;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7408 = x6704 * x6736;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7409 = x102 - x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7410 = x7409 * x6768;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7411 = x7408 + x7410;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7412 = x6705 * x6737;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7413 = x102 - x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7414 = x7413 * x6769;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7415 = x7412 + x7414;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7416 = x6706 * x6738;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7417 = x102 - x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7418 = x7417 * x6770;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7419 = x7416 + x7418;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7420 = x6707 * x6739;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7421 = x102 - x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7422 = x7421 * x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7423 = x7420 + x7422;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7424 = x6708 * x6740;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7425 = x102 - x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7426 = x7425 * x6772;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7427 = x7424 + x7426;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7428 = x6709 * x6741;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7429 = x102 - x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7430 = x7429 * x6773;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7431 = x7428 + x7430;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7432 = x6710 * x6742;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7433 = x102 - x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7434 = x7433 * x6774;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7435 = x7432 + x7434;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7436 = x6711 * x6743;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7437 = x102 - x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7438 = x7437 * x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7439 = x7436 + x7438;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7440 = x6712 * x6744;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7441 = x102 - x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7442 = x7441 * x6776;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7443 = x7440 + x7442;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7444 = x6713 * x6745;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7445 = x102 - x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7446 = x7445 * x6777;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7447 = x7444 + x7446;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7448 = x6714 * x6746;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7449 = x102 - x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7450 = x7449 * x6778;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7451 = x7448 + x7450;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7452 = x6715 * x6747;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7453 = x102 - x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7454 = x7453 * x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7455 = x7452 + x7454;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7456 = x7335 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7457 = x7331 + x7456;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7458 = x7339 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7459 = x7457 + x7458;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7460 = x7343 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7461 = x7459 + x7460;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7462 = x7347 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7463 = x7461 + x7462;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7464 = x7351 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7465 = x7463 + x7464;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7466 = x7355 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7467 = x7465 + x7466;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7468 = x7359 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7469 = x7467 + x7468;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7470 = x7363 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7471 = x7469 + x7470;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7472 = x7367 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7473 = x7471 + x7472;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7474 = x7371 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7475 = x7473 + x7474;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7476 = x7375 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7477 = x7475 + x7476;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7478 = x7379 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7479 = x7477 + x7478;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7480 = x7383 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7481 = x7479 + x7480;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7482 = x7387 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7483 = x7481 + x7482;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7484 = x7391 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7485 = x7483 + x7484;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7486 = x7399 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7487 = x7395 + x7486;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7488 = x7403 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7489 = x7487 + x7488;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7490 = x7407 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7491 = x7489 + x7490;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7492 = x7411 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7493 = x7491 + x7492;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7494 = x7415 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7495 = x7493 + x7494;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7496 = x7419 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7497 = x7495 + x7496;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7498 = x7423 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7499 = x7497 + x7498;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7500 = x7427 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7501 = x7499 + x7500;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7502 = x7431 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7503 = x7501 + x7502;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7504 = x7435 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7505 = x7503 + x7504;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7506 = x7439 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7507 = x7505 + x7506;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7508 = x7443 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7509 = x7507 + x7508;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7510 = x7447 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7511 = x7509 + x7510;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7512 = x7451 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7513 = x7511 + x7512;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7514 = x7455 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7515 = x7513 + x7514;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7516 = x7177 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7517 = x7174 + x7516;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7518 = x7180 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7519 = x7517 + x7518;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7520 = x7183 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7521 = x7519 + x7520;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7522 = x7186 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7523 = x7521 + x7522;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7524 = x7189 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7525 = x7523 + x7524;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7526 = x7192 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7527 = x7525 + x7526;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7528 = x7195 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7529 = x7527 + x7528;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7530 = x7198 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7531 = x7529 + x7530;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7532 = x7201 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7533 = x7531 + x7532;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7534 = x7204 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7535 = x7533 + x7534;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7536 = x7207 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7537 = x7535 + x7536;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7538 = x7210 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7539 = x7537 + x7538;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7540 = x7213 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7541 = x7539 + x7540;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7542 = x7216 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7543 = x7541 + x7542;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7544 = x7219 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7545 = x7543 + x7544;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7546 = x7225 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7547 = x7222 + x7546;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7548 = x7228 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7549 = x7547 + x7548;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7550 = x7231 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7551 = x7549 + x7550;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7552 = x7234 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7553 = x7551 + x7552;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7554 = x7237 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7555 = x7553 + x7554;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7556 = x7240 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7557 = x7555 + x7556;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7558 = x7243 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7559 = x7557 + x7558;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7560 = x7246 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7561 = x7559 + x7560;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7562 = x7249 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7563 = x7561 + x7562;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7564 = x7252 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7565 = x7563 + x7564;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7566 = x7255 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7567 = x7565 + x7566;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7568 = x7258 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7569 = x7567 + x7568;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7570 = x7261 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7571 = x7569 + x7570;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7572 = x7264 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7573 = x7571 + x7572;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7574 = x7267 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7575 = x7573 + x7574;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7576 = x7485 + x7545;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7577 = x7515 + x7575;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7578 = x7297 + x7576;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7579 = x7327 + x7577;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7580 = x6817 + x7578;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7581 = x6819 + x7579;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7582 = x6472 + x7580;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7583 = x6553 + x7581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7584 = x6556 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7585 = x102 - x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7586 = x7584 * x7585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7587 = x102 - x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7588 = x6556 * x7587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7589 = x7588 * x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7590 = x7586 + x7589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7591 = x102 - x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7592 = x7591 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7593 = x7592 * x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7594 = x7590 + x7593;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7595 = x7584 * x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7596 = x7594 + x7595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7597 = x6557 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7598 = x102 - x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7599 = x7597 * x7598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7600 = x102 - x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7601 = x6557 * x7600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7602 = x7601 * x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7603 = x7599 + x7602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7604 = x102 - x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7605 = x7604 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7606 = x7605 * x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7607 = x7603 + x7606;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7608 = x7597 * x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7609 = x7607 + x7608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7610 = x6558 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7611 = x102 - x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7612 = x7610 * x7611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7613 = x102 - x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7614 = x6558 * x7613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7615 = x7614 * x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7616 = x7612 + x7615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7617 = x102 - x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7618 = x7617 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7619 = x7618 * x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7620 = x7616 + x7619;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7621 = x7610 * x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7622 = x7620 + x7621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7623 = x6559 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7624 = x102 - x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7625 = x7623 * x7624;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7626 = x102 - x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7627 = x6559 * x7626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7628 = x7627 * x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7629 = x7625 + x7628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7630 = x102 - x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7631 = x7630 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7632 = x7631 * x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7633 = x7629 + x7632;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7634 = x7623 * x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7635 = x7633 + x7634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7636 = x6560 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7637 = x102 - x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7638 = x7636 * x7637;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7639 = x102 - x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7640 = x6560 * x7639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7641 = x7640 * x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7642 = x7638 + x7641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7643 = x102 - x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7644 = x7643 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7645 = x7644 * x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7646 = x7642 + x7645;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7647 = x7636 * x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7648 = x7646 + x7647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7649 = x6561 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7650 = x102 - x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7651 = x7649 * x7650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7652 = x102 - x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7653 = x6561 * x7652;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7654 = x7653 * x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7655 = x7651 + x7654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7656 = x102 - x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7657 = x7656 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7658 = x7657 * x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7659 = x7655 + x7658;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7660 = x7649 * x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7661 = x7659 + x7660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7662 = x6562 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7663 = x102 - x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7664 = x7662 * x7663;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7665 = x102 - x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7666 = x6562 * x7665;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7667 = x7666 * x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7668 = x7664 + x7667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7669 = x102 - x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7670 = x7669 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7671 = x7670 * x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7672 = x7668 + x7671;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7673 = x7662 * x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7674 = x7672 + x7673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7675 = x6563 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7676 = x102 - x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7677 = x7675 * x7676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7678 = x102 - x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7679 = x6563 * x7678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7680 = x7679 * x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7681 = x7677 + x7680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7682 = x102 - x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7683 = x7682 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7684 = x7683 * x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7685 = x7681 + x7684;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7686 = x7675 * x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7687 = x7685 + x7686;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7688 = x6564 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7689 = x102 - x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7690 = x7688 * x7689;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7691 = x102 - x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7692 = x6564 * x7691;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7693 = x7692 * x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7694 = x7690 + x7693;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7695 = x102 - x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7696 = x7695 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7697 = x7696 * x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7698 = x7694 + x7697;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7699 = x7688 * x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7700 = x7698 + x7699;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7701 = x6565 * x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7702 = x102 - x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7703 = x7701 * x7702;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7704 = x102 - x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7705 = x6565 * x7704;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7706 = x7705 * x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7707 = x7703 + x7706;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7708 = x102 - x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7709 = x7708 * x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7710 = x7709 * x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7711 = x7707 + x7710;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7712 = x7701 * x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7713 = x7711 + x7712;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7714 = x6566 * x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7715 = x102 - x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7716 = x7714 * x7715;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7717 = x102 - x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7718 = x6566 * x7717;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7719 = x7718 * x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7720 = x7716 + x7719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7721 = x102 - x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7722 = x7721 * x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7723 = x7722 * x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7724 = x7720 + x7723;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7725 = x7714 * x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7726 = x7724 + x7725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7727 = x6567 * x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7728 = x102 - x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7729 = x7727 * x7728;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7730 = x102 - x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7731 = x6567 * x7730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7732 = x7731 * x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7733 = x7729 + x7732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7734 = x102 - x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7735 = x7734 * x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7736 = x7735 * x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7737 = x7733 + x7736;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7738 = x7727 * x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7739 = x7737 + x7738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7740 = x6568 * x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7741 = x102 - x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7742 = x7740 * x7741;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7743 = x102 - x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7744 = x6568 * x7743;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7745 = x7744 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7746 = x7742 + x7745;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7747 = x102 - x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7748 = x7747 * x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7749 = x7748 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7750 = x7746 + x7749;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7751 = x7740 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7752 = x7750 + x7751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7753 = x6569 * x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7754 = x102 - x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7755 = x7753 * x7754;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7756 = x102 - x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7757 = x6569 * x7756;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7758 = x7757 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7759 = x7755 + x7758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7760 = x102 - x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7761 = x7760 * x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7762 = x7761 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7763 = x7759 + x7762;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7764 = x7753 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7765 = x7763 + x7764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7766 = x6570 * x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7767 = x102 - x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7768 = x7766 * x7767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7769 = x102 - x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7770 = x6570 * x7769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7771 = x7770 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7772 = x7768 + x7771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7773 = x102 - x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7774 = x7773 * x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7775 = x7774 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7776 = x7772 + x7775;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7777 = x7766 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7778 = x7776 + x7777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7779 = x6571 * x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7780 = x102 - x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7781 = x7779 * x7780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7782 = x102 - x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7783 = x6571 * x7782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7784 = x7783 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7785 = x7781 + x7784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7786 = x102 - x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7787 = x7786 * x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7788 = x7787 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7789 = x7785 + x7788;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7790 = x7779 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7791 = x7789 + x7790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7792 = x6572 * x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7793 = x102 - x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7794 = x7792 * x7793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7795 = x102 - x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7796 = x6572 * x7795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7797 = x7796 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7798 = x7794 + x7797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7799 = x102 - x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7800 = x7799 * x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7801 = x7800 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7802 = x7798 + x7801;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7803 = x7792 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7804 = x7802 + x7803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7805 = x6573 * x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7806 = x102 - x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7807 = x7805 * x7806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7808 = x102 - x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7809 = x6573 * x7808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7810 = x7809 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7811 = x7807 + x7810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7812 = x102 - x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7813 = x7812 * x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7814 = x7813 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7815 = x7811 + x7814;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7816 = x7805 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7817 = x7815 + x7816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7818 = x6574 * x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7819 = x102 - x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7820 = x7818 * x7819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7821 = x102 - x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7822 = x6574 * x7821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7823 = x7822 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7824 = x7820 + x7823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7825 = x102 - x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7826 = x7825 * x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7827 = x7826 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7828 = x7824 + x7827;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7829 = x7818 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7830 = x7828 + x7829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7831 = x6575 * x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7832 = x102 - x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7833 = x7831 * x7832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7834 = x102 - x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7835 = x6575 * x7834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7836 = x7835 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7837 = x7833 + x7836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7838 = x102 - x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7839 = x7838 * x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7840 = x7839 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7841 = x7837 + x7840;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7842 = x7831 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7843 = x7841 + x7842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7844 = x6576 * x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7845 = x102 - x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7846 = x7844 * x7845;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7847 = x102 - x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7848 = x6576 * x7847;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7849 = x7848 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7850 = x7846 + x7849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7851 = x102 - x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7852 = x7851 * x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7853 = x7852 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7854 = x7850 + x7853;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7855 = x7844 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7856 = x7854 + x7855;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7857 = x6577 * x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7858 = x102 - x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7859 = x7857 * x7858;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7860 = x102 - x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7861 = x6577 * x7860;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7862 = x7861 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7863 = x7859 + x7862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7864 = x102 - x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7865 = x7864 * x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7866 = x7865 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7867 = x7863 + x7866;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7868 = x7857 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7869 = x7867 + x7868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7870 = x6578 * x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7871 = x102 - x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7872 = x7870 * x7871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7873 = x102 - x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7874 = x6578 * x7873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7875 = x7874 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7876 = x7872 + x7875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7877 = x102 - x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7878 = x7877 * x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7879 = x7878 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7880 = x7876 + x7879;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7881 = x7870 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7882 = x7880 + x7881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7883 = x6579 * x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7884 = x102 - x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7885 = x7883 * x7884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7886 = x102 - x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7887 = x6579 * x7886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7888 = x7887 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7889 = x7885 + x7888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7890 = x102 - x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7891 = x7890 * x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7892 = x7891 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7893 = x7889 + x7892;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7894 = x7883 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7895 = x7893 + x7894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7896 = x6580 * x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7897 = x102 - x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7898 = x7896 * x7897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7899 = x102 - x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7900 = x6580 * x7899;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7901 = x7900 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7902 = x7898 + x7901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7903 = x102 - x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7904 = x7903 * x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7905 = x7904 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7906 = x7902 + x7905;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7907 = x7896 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7908 = x7906 + x7907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7909 = x6581 * x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7910 = x102 - x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7911 = x7909 * x7910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7912 = x102 - x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7913 = x6581 * x7912;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7914 = x7913 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7915 = x7911 + x7914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7916 = x102 - x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7917 = x7916 * x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7918 = x7917 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7919 = x7915 + x7918;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7920 = x7909 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7921 = x7919 + x7920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7922 = x6582 * x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7923 = x102 - x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7924 = x7922 * x7923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7925 = x102 - x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7926 = x6582 * x7925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7927 = x7926 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7928 = x7924 + x7927;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7929 = x102 - x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7930 = x7929 * x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7931 = x7930 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7932 = x7928 + x7931;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7933 = x7922 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7934 = x7932 + x7933;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7935 = x6583 * x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7936 = x102 - x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7937 = x7935 * x7936;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7938 = x102 - x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7939 = x6583 * x7938;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7940 = x7939 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7941 = x7937 + x7940;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7942 = x102 - x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7943 = x7942 * x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7944 = x7943 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7945 = x7941 + x7944;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7946 = x7935 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7947 = x7945 + x7946;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7948 = x6584 * x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7949 = x102 - x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7950 = x7948 * x7949;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7951 = x102 - x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7952 = x6584 * x7951;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7953 = x7952 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7954 = x7950 + x7953;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7955 = x102 - x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7956 = x7955 * x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7957 = x7956 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7958 = x7954 + x7957;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7959 = x7948 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7960 = x7958 + x7959;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7961 = x6585 * x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7962 = x102 - x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7963 = x7961 * x7962;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7964 = x102 - x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7965 = x6585 * x7964;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7966 = x7965 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7967 = x7963 + x7966;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7968 = x102 - x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7969 = x7968 * x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7970 = x7969 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7971 = x7967 + x7970;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7972 = x7961 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7973 = x7971 + x7972;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7974 = x6586 * x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7975 = x102 - x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7976 = x7974 * x7975;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7977 = x102 - x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7978 = x6586 * x7977;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7979 = x7978 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7980 = x7976 + x7979;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7981 = x102 - x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7982 = x7981 * x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7983 = x7982 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7984 = x7980 + x7983;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7985 = x7974 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7986 = x7984 + x7985;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7987 = x6587 * x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7988 = x102 - x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7989 = x7987 * x7988;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7990 = x102 - x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7991 = x6587 * x7990;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7992 = x7991 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7993 = x7989 + x7992;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7994 = x102 - x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7995 = x7994 * x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7996 = x7995 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7997 = x7993 + x7996;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7998 = x7987 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7999 = x7997 + x7998;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8000 = x7609 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8001 = x7596 + x8000;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8002 = x7622 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8003 = x8001 + x8002;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8004 = x7635 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8005 = x8003 + x8004;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8006 = x7648 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8007 = x8005 + x8006;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8008 = x7661 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8009 = x8007 + x8008;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8010 = x7674 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8011 = x8009 + x8010;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8012 = x7687 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8013 = x8011 + x8012;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8014 = x7700 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8015 = x8013 + x8014;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8016 = x7713 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8017 = x8015 + x8016;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8018 = x7726 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8019 = x8017 + x8018;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8020 = x7739 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8021 = x8019 + x8020;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8022 = x7752 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8023 = x8021 + x8022;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8024 = x7765 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8025 = x8023 + x8024;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8026 = x7778 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8027 = x8025 + x8026;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8028 = x7791 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8029 = x8027 + x8028;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8030 = x7817 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8031 = x7804 + x8030;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8032 = x7830 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8033 = x8031 + x8032;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8034 = x7843 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8035 = x8033 + x8034;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8036 = x7856 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8037 = x8035 + x8036;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8038 = x7869 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8039 = x8037 + x8038;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8040 = x7882 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8041 = x8039 + x8040;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8042 = x7895 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8043 = x8041 + x8042;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8044 = x7908 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8045 = x8043 + x8044;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8046 = x7921 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8047 = x8045 + x8046;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8048 = x7934 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8049 = x8047 + x8048;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8050 = x7947 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8051 = x8049 + x8050;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8052 = x7960 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8053 = x8051 + x8052;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8054 = x7973 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8055 = x8053 + x8054;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8056 = x7986 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8057 = x8055 + x8056;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8058 = x7999 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8059 = x8057 + x8058;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8060 = x6953 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8061 = x6950 + x8060;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8062 = x6956 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8063 = x8061 + x8062;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8064 = x6959 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8065 = x8063 + x8064;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8066 = x6962 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8067 = x8065 + x8066;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8068 = x6965 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8069 = x8067 + x8068;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8070 = x6968 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8071 = x8069 + x8070;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8072 = x6971 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8073 = x8071 + x8072;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8074 = x6974 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8075 = x8073 + x8074;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8076 = x6977 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8077 = x8075 + x8076;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8078 = x6980 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8079 = x8077 + x8078;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8080 = x6983 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8081 = x8079 + x8080;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8082 = x6986 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8083 = x8081 + x8082;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8084 = x6989 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8085 = x8083 + x8084;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8086 = x6992 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8087 = x8085 + x8086;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8088 = x6995 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8089 = x8087 + x8088;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8090 = x7001 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8091 = x6998 + x8090;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8092 = x7004 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8093 = x8091 + x8092;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8094 = x7007 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8095 = x8093 + x8094;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8096 = x7010 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8097 = x8095 + x8096;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8098 = x7013 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8099 = x8097 + x8098;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8100 = x7016 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8101 = x8099 + x8100;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8102 = x7019 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8103 = x8101 + x8102;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8104 = x7022 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8105 = x8103 + x8104;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8106 = x7025 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8107 = x8105 + x8106;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8108 = x7028 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8109 = x8107 + x8108;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8110 = x7031 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8111 = x8109 + x8110;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8112 = x7034 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8113 = x8111 + x8112;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8114 = x7037 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8115 = x8113 + x8114;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8116 = x7040 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8117 = x8115 + x8116;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8118 = x7043 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8119 = x8117 + x8118;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8120 = x8029 + x8089;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8121 = x8059 + x8119;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8122 = x7582 + x8120;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8123 = x7583 + x8121;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8124 = x6653 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8125 = x6652 + x8124;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8126 = x6654 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8127 = x8125 + x8126;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8128 = x6655 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8129 = x8127 + x8128;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8130 = x6656 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8131 = x8129 + x8130;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8132 = x6657 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8133 = x8131 + x8132;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8134 = x6658 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8135 = x8133 + x8134;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8136 = x6659 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8137 = x8135 + x8136;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8138 = x6660 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8139 = x8137 + x8138;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8140 = x6661 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8141 = x8139 + x8140;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8142 = x6662 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8143 = x8141 + x8142;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8144 = x6663 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8145 = x8143 + x8144;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8146 = x6664 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8147 = x8145 + x8146;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8148 = x6665 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8149 = x8147 + x8148;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8150 = x6666 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8151 = x8149 + x8150;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8152 = x6667 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8153 = x8151 + x8152;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8154 = x6669 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8155 = x6668 + x8154;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8156 = x6670 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8157 = x8155 + x8156;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8158 = x6671 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8159 = x8157 + x8158;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8160 = x6672 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8161 = x8159 + x8160;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8162 = x6673 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8163 = x8161 + x8162;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8164 = x6674 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8165 = x8163 + x8164;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8166 = x6675 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8167 = x8165 + x8166;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8168 = x6676 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8169 = x8167 + x8168;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8170 = x6677 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8171 = x8169 + x8170;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8172 = x6678 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8173 = x8171 + x8172;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8174 = x6679 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8175 = x8173 + x8174;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8176 = x6680 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8177 = x8175 + x8176;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8178 = x6681 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8179 = x8177 + x8178;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8180 = x6682 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8181 = x8179 + x8180;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8182 = x6683 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8183 = x8181 + x8182;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8184 = x7582 + x8153;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8185 = x7583 + x8183;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8122);
        reg = x8122;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8184);
        reg = x8184;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8123);
        reg = x8123;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][148 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8185);
        reg = x8185;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8186 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x8186 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8187 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x8187 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8188 = Fp(x8186.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8188);
          reg = x8188;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8189 = Fp(x8186.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8190 = x8189 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8190);
          reg = x8190;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8191 = Fp(x8186.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8192 = x8191 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8192);
          reg = x8192;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8193 = Fp(x8186.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8194 = x8193 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8194);
          reg = x8194;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8195 = Fp(x8186.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8196 = x8195 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8196);
          reg = x8196;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8197 = Fp(x8186.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8198 = x8197 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8198);
          reg = x8198;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8199 = Fp(x8186.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8200 = x8199 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8200);
          reg = x8200;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8201 = Fp(x8186.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8202 = x8201 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8202);
          reg = x8202;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8203 = Fp(x8186.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8204 = x8203 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8204);
          reg = x8204;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8205 = Fp(x8186.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8206 = x8205 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8206);
          reg = x8206;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8207 = Fp(x8186.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8208 = x8207 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8208);
          reg = x8208;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8209 = Fp(x8186.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8210 = x8209 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8210);
          reg = x8210;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8211 = Fp(x8186.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8212 = x8211 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8212);
          reg = x8212;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8213 = Fp(x8186.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8214 = x8213 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8214);
          reg = x8214;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8215 = Fp(x8186.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8216 = x8215 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8216);
          reg = x8216;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8217 = Fp(x8186.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8218 = x8217 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8218);
          reg = x8218;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8219 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x8219 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8220 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x8220 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8221 = x8220 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8222 = x8219 + x8221;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8223 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8223 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8224 = x8223 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8225 = x8222 + x8224;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8226 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8226 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8227 = x8226 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8228 = x8225 + x8227;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8229 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8229 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8230 = x8229 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8231 = x8228 + x8230;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8232 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x8232 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8233 = x8232 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8234 = x8231 + x8233;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8235 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x8235 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8236 = x8235 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8237 = x8234 + x8236;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8238 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x8238 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8239 = x8238 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8240 = x8237 + x8239;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8241 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8241 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8242 = x8241 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8243 = x8240 + x8242;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8244 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8244 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8245 = x8244 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8246 = x8243 + x8245;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8247 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8247 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8248 = x8247 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8249 = x8246 + x8248;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8250 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8250 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8251 = x8250 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8252 = x8249 + x8251;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8253 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8253 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8254 = x8253 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8255 = x8252 + x8254;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8256 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8256 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8257 = x8256 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8258 = x8255 + x8257;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8259 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8259 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8260 = x8259 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8261 = x8258 + x8260;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8262 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8262 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8263 = x8262 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8264 = x8261 + x8263;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8265 = x8186 - x8264;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8266 = x8265 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8267 = Fp(x8266.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8267);
          reg = x8267;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8268 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8268 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8269 = x8266 - x8268;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8270 = x8269 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8271 = x102 - x8270;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8272 = x8270 * x8271;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8272 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8273 = x8187 + x8266;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8274 = Fp(x8273.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8274);
          reg = x8274;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8275 = Fp(x8273.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8276 = x8275 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8276);
          reg = x8276;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8277 = Fp(x8273.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8278 = x8277 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8278);
          reg = x8278;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8279 = Fp(x8273.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8280 = x8279 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8280);
          reg = x8280;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8281 = Fp(x8273.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8282 = x8281 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8282);
          reg = x8282;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8283 = Fp(x8273.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8284 = x8283 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8284);
          reg = x8284;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8285 = Fp(x8273.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8286 = x8285 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8286);
          reg = x8286;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8287 = Fp(x8273.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8288 = x8287 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8288);
          reg = x8288;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8289 = Fp(x8273.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8290 = x8289 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8290);
          reg = x8290;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8291 = Fp(x8273.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8292 = x8291 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8292);
          reg = x8292;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8293 = Fp(x8273.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8294 = x8293 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8294);
          reg = x8294;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8295 = Fp(x8273.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8296 = x8295 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8296);
          reg = x8296;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8297 = Fp(x8273.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8298 = x8297 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8298);
          reg = x8298;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8299 = Fp(x8273.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8300 = x8299 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8300);
          reg = x8300;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8301 = Fp(x8273.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8302 = x8301 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8302);
          reg = x8302;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8303 = Fp(x8273.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8304 = x8303 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8304);
          reg = x8304;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8305 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8305 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8306 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8306 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8307 = x8306 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8308 = x8305 + x8307;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8309 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8309 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8310 = x8309 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8311 = x8308 + x8310;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8312 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8312 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8313 = x8312 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8314 = x8311 + x8313;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8315 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8315 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8316 = x8315 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8317 = x8314 + x8316;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8318 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8318 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8319 = x8318 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8320 = x8317 + x8319;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8321 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8321 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8322 = x8321 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8323 = x8320 + x8322;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8324 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8324 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8325 = x8324 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8326 = x8323 + x8325;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8327 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8327 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8328 = x8327 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8329 = x8326 + x8328;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8330 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8330 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8331 = x8330 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8332 = x8329 + x8331;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8333 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8333 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8334 = x8333 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8335 = x8332 + x8334;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8336 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8336 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8337 = x8336 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8338 = x8335 + x8337;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8339 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8339 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8340 = x8339 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8341 = x8338 + x8340;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8342 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8342 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8343 = x8342 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8344 = x8341 + x8343;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8345 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8345 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8346 = x8345 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8347 = x8344 + x8346;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8348 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8348 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8349 = x8348 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8350 = x8347 + x8349;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8351 = x8273 - x8350;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8352 = x8351 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8353 = Fp(x8352.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8353);
          reg = x8353;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8354 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x8354 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8355 = x8352 - x8354;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8356 = x8355 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8357 = x102 - x8356;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8358 = x8356 * x8357;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8358 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8359 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x8359 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8360 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x8360 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8361 = Fp(x8359.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8361);
          reg = x8361;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8362 = Fp(x8359.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8363 = x8362 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8363);
          reg = x8363;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8364 = Fp(x8359.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8365 = x8364 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8365);
          reg = x8365;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8366 = Fp(x8359.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8367 = x8366 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8367);
          reg = x8367;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8368 = Fp(x8359.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8369 = x8368 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8369);
          reg = x8369;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8370 = Fp(x8359.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8371 = x8370 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8371);
          reg = x8371;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8372 = Fp(x8359.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8373 = x8372 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8373);
          reg = x8373;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8374 = Fp(x8359.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8375 = x8374 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8375);
          reg = x8375;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8376 = Fp(x8359.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8377 = x8376 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8377);
          reg = x8377;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8378 = Fp(x8359.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8379 = x8378 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8379);
          reg = x8379;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8380 = Fp(x8359.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8381 = x8380 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8381);
          reg = x8381;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8382 = Fp(x8359.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8383 = x8382 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8383);
          reg = x8383;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8384 = Fp(x8359.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8385 = x8384 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8385);
          reg = x8385;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8386 = Fp(x8359.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8387 = x8386 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8387);
          reg = x8387;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8388 = Fp(x8359.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8389 = x8388 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8389);
          reg = x8389;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8390 = Fp(x8359.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8391 = x8390 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8391);
          reg = x8391;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8392 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8392 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8393 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8393 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8394 = x8393 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8395 = x8392 + x8394;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8396 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8396 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8397 = x8396 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8398 = x8395 + x8397;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8399 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8399 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8400 = x8399 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8401 = x8398 + x8400;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8402 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8402 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8403 = x8402 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8404 = x8401 + x8403;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8405 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8405 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8406 = x8405 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8407 = x8404 + x8406;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8408 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8408 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8409 = x8408 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8410 = x8407 + x8409;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8411 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8411 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8412 = x8411 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8413 = x8410 + x8412;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8414 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8414 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8415 = x8414 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8416 = x8413 + x8415;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8417 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8417 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8418 = x8417 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8419 = x8416 + x8418;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8420 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8420 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8421 = x8420 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8422 = x8419 + x8421;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8423 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8423 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8424 = x8423 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8425 = x8422 + x8424;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8426 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8426 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8427 = x8426 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8428 = x8425 + x8427;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8429 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8429 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8430 = x8429 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8431 = x8428 + x8430;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8432 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8432 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8433 = x8432 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8434 = x8431 + x8433;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8435 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8435 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8436 = x8435 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8437 = x8434 + x8436;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8438 = x8359 - x8437;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8439 = x8438 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8440 = Fp(x8439.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8440);
          reg = x8440;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8441 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x8441 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8442 = x8439 - x8441;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8443 = x8442 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8444 = x102 - x8443;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8445 = x8443 * x8444;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8445 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8446 = x8360 + x8439;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8447 = Fp(x8446.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8447);
          reg = x8447;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8448 = Fp(x8446.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8449 = x8448 * x62;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8449);
          reg = x8449;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8450 = Fp(x8446.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8451 = x8450 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8451);
          reg = x8451;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8452 = Fp(x8446.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8453 = x8452 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8453);
          reg = x8453;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8454 = Fp(x8446.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8455 = x8454 * x64;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8455);
          reg = x8455;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8456 = Fp(x8446.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8457 = x8456 * x66;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8457);
          reg = x8457;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8458 = Fp(x8446.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8459 = x8458 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8459);
          reg = x8459;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8460 = Fp(x8446.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8461 = x8460 * x69;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8461);
          reg = x8461;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8462 = Fp(x8446.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8463 = x8462 * x96;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8463);
          reg = x8463;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8464 = Fp(x8446.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8465 = x8464 * x27;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8465);
          reg = x8465;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8466 = Fp(x8446.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8467 = x8466 * x26;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8467);
          reg = x8467;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8468 = Fp(x8446.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8469 = x8468 * x24;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8469);
          reg = x8469;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8470 = Fp(x8446.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8471 = x8470 * x22;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8471);
          reg = x8471;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8472 = Fp(x8446.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8473 = x8472 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8473);
          reg = x8473;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8474 = Fp(x8446.asUInt32() & x42.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8475 = x8474 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8475);
          reg = x8475;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8476 = Fp(x8446.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8477 = x8476 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8477);
          reg = x8477;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8478 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8478 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8479 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8479 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8480 = x8479 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8481 = x8478 + x8480;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8482 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8482 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8483 = x8482 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8484 = x8481 + x8483;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8485 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8485 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8486 = x8485 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8487 = x8484 + x8486;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8488 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8488 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8489 = x8488 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8490 = x8487 + x8489;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8491 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8491 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8492 = x8491 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8493 = x8490 + x8492;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8494 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8494 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8495 = x8494 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8496 = x8493 + x8495;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8497 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8497 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8498 = x8497 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8499 = x8496 + x8498;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8500 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8500 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8501 = x8500 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8502 = x8499 + x8501;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8503 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8503 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8504 = x8503 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8505 = x8502 + x8504;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8506 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8506 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8507 = x8506 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8508 = x8505 + x8507;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8509 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8509 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8510 = x8509 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8511 = x8508 + x8510;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8512 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8512 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8513 = x8512 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8514 = x8511 + x8513;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8515 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x8515 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8516 = x8515 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8517 = x8514 + x8516;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8518 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x8518 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8519 = x8518 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8520 = x8517 + x8519;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8521 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x8521 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8522 = x8521 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8523 = x8520 + x8522;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8524 = x8446 - x8523;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8525 = x8524 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8526 = Fp(x8525.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8526);
          reg = x8526;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8527 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x8527 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8528 = x8525 - x8527;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8529 = x8528 * x82;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8530 = x102 - x8529;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8531 = x8529 * x8530;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8531 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/components/mux.h":39:25))
    auto x8532 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x8532 != Fp::invalid());
    if (x8532 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8533 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x8533 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8534 = args[2][137 * steps + ((cycle - 1) & mask)];
      assert(x8534 != Fp::invalid());
      if (x8534 != 0) {
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("cirgen/circuit/rv32im/sha.cpp":339:72))
        auto x8535 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x8535 != Fp::invalid());
        if (x8535 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":342:7)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13);
            reg = x13;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":343:40))
          auto x8536 = args[2][139 * steps + ((cycle - 1) & mask)];
          assert(x8536 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":343:7)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8536);
            reg = x8536;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":345:22)
        auto x8537 = x102 - x8535;
        if (x8537 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":347:7)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x83);
            reg = x83;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":348:44))
          auto x8538 = args[2][139 * steps + ((cycle - 1) & mask)];
          assert(x8538 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":348:44)
          auto x8539 = x8538 - x102;
          // loc("cirgen/circuit/rv32im/sha.cpp":348:7)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8539);
            reg = x8539;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":351:18)
      auto x8540 = x102 - x8534;
      if (x8540 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8541 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x8541 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8541);
          reg = x8541;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":354:40))
        auto x8542 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x8542 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":354:40)
        auto x8543 = x8542 - x102;
        // loc("cirgen/circuit/rv32im/sha.cpp":354:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8543);
          reg = x8543;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":355:38))
        auto x8544 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x8544 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":355:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8544);
          reg = x8544;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8545 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x8545 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8546 = (x8545 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8546);
          reg = x8546;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8547 = inv(x8545);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8547);
          reg = x8547;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8548 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x8548 != Fp::invalid());
      if (x8548 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8545 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8549 = x102 - x8548;
      if (x8549 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8550 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x8550 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8551 = x8545 * x8550;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8552 = x8551 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8552 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8553 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x8553 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":359:15)
      auto x8554 = x102 - x8553;
      if (x8548 != 0) {
        if (x8554 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        if (x8553 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
        }
      }
      if (x8549 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":369:38))
      auto x8555 = args[2][133 * steps + ((cycle - 1) & mask)];
      assert(x8555 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":369:3)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8555);
        reg = x8555;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":370:40))
      auto x8556 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x8556 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":370:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8556);
        reg = x8556;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8557 = args[2][144 * steps + ((cycle - 1) & mask)];
      assert(x8557 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8557);
        reg = x8557;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8558 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x8558 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8559 = (x8558 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8559);
          reg = x8559;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8560 = inv(x8558);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8560);
          reg = x8560;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8561 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x8561 != Fp::invalid());
      if (x8561 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8558 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8562 = x102 - x8561;
      if (x8562 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8563 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x8563 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8564 = x8558 * x8563;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8565 = x8564 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8565 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x8566 = x605 + x84;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8567 = Fp(x8566.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8567);
          reg = x8567;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x8568 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x8568 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8569 = x8566 - x8568;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x8570 = x8569 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8571 = Fp(x8570.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8571);
          reg = x8571;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x8572 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x8572 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8573 = x8570 - x8572;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x8574 = x8573 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8575 = Fp(x8574.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8575);
          reg = x8575;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x8576 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x8576 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8577 = x8574 - x8576;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x8578 = x8577 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x8579 = Fp(x8578.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8579);
          reg = x8579;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8580 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x8580 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x8581 = x8578 - x8580;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x8582 = x8581 * x82;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8582);
        reg = x8582;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8583 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8583 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x8584 = x102 - x8583;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x8585 = x8583 * x8584;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8585);
        reg = x8585;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x8586 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x8586 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x8587 = x99 - x8583;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x8588 = x8586 * x8587;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x8588 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x74;
      host_args.at(1) = x8553;
      host_args.at(2) = x8545;
      host_args.at(3) = x8558;
      host(ctx, "log", "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", host_args.data(), 4, host_outs.data(), 0);
      if (x8554 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
        auto x8589 = x12 - x8545;
        {
          host_args.at(0) = x8589;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x8590 = host_outs.at(0);
          auto x8591 = host_outs.at(1);
          auto x8592 = host_outs.at(2);
          auto x8593 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8590);
            reg = x8590;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8591);
            reg = x8591;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8592);
            reg = x8592;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8593);
            reg = x8593;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8594 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x8594 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8595 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x8595 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8596 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x8596 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8597 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x8597 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8589);
          reg = x8589;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8533);
          reg = x8533;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8594);
          reg = x8594;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8595);
          reg = x8595;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8596);
          reg = x8596;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8597);
          reg = x8597;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8598 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8599 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8600 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8601 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8602 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8603 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8604 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8605 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x8605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8606 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8607 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x8607 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8608 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8608 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8609 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8609 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8610 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8610 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8611 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8611 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8612 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8612 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8613 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x8613 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8614 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x8614 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8615 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x8615 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8616 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x8616 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8617 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x8617 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8618 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x8618 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8619 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x8619 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8620 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x8620 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8621 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x8621 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8622 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x8622 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8623 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x8623 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8624 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x8624 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8625 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x8625 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8626 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x8626 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8627 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x8627 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8628 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x8628 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8629 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x8629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8630 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x8630 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8631 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x8631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8632 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x8632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8633 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8634 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x8634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8635 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x8635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8636 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x8636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8637 = args[2][89 * steps + ((cycle - 7) & mask)];
      assert(x8637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8638 = args[2][90 * steps + ((cycle - 7) & mask)];
      assert(x8638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8639 = args[2][91 * steps + ((cycle - 7) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8640 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x8640 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8641 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x8641 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8642 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8643 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x8643 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8644 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x8644 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8645 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x8645 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8646 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x8646 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8647 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x8647 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8648 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x8648 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8649 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x8649 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8650 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x8650 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8651 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x8651 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8652 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x8652 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8653 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x8653 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8654 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x8654 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8655 = args[2][34 * steps + ((cycle - 7) & mask)];
      assert(x8655 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8656 = args[2][35 * steps + ((cycle - 7) & mask)];
      assert(x8656 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8657 = args[2][36 * steps + ((cycle - 7) & mask)];
      assert(x8657 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8658 = args[2][37 * steps + ((cycle - 7) & mask)];
      assert(x8658 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8659 = args[2][38 * steps + ((cycle - 7) & mask)];
      assert(x8659 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8660 = args[2][39 * steps + ((cycle - 7) & mask)];
      assert(x8660 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8661 = args[2][40 * steps + ((cycle - 7) & mask)];
      assert(x8661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8662 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x8662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8663 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x8663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8664 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x8664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8665 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x8665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8666 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x8666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8667 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x8667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8668 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x8668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8669 = args[2][89 * steps + ((cycle - 15) & mask)];
      assert(x8669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8670 = args[2][90 * steps + ((cycle - 15) & mask)];
      assert(x8670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8671 = args[2][91 * steps + ((cycle - 15) & mask)];
      assert(x8671 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8672 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x8672 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8673 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x8673 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8674 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x8674 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8675 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x8675 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8676 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x8676 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8677 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x8677 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8678 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x8678 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8679 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x8679 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8680 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x8680 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8681 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x8681 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8682 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x8682 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8683 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x8683 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8684 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x8684 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8685 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x8685 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8686 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x8686 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8687 = args[2][34 * steps + ((cycle - 15) & mask)];
      assert(x8687 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8688 = args[2][35 * steps + ((cycle - 15) & mask)];
      assert(x8688 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8689 = args[2][36 * steps + ((cycle - 15) & mask)];
      assert(x8689 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8690 = args[2][37 * steps + ((cycle - 15) & mask)];
      assert(x8690 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8691 = args[2][38 * steps + ((cycle - 15) & mask)];
      assert(x8691 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8692 = args[2][39 * steps + ((cycle - 15) & mask)];
      assert(x8692 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8693 = args[2][40 * steps + ((cycle - 15) & mask)];
      assert(x8693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8694 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x8694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8695 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x8695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8696 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x8696 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8697 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x8697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8698 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x8698 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8699 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x8699 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8700 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x8700 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8701 = args[2][89 * steps + ((cycle - 16) & mask)];
      assert(x8701 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8702 = args[2][90 * steps + ((cycle - 16) & mask)];
      assert(x8702 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8703 = args[2][91 * steps + ((cycle - 16) & mask)];
      assert(x8703 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8704 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x8704 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8705 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x8705 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8706 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x8706 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8707 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x8707 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8708 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x8708 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8709 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x8709 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8710 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x8710 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8711 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x8711 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8712 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x8712 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8713 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x8713 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8714 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x8714 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8715 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x8715 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8716 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x8716 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8717 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x8717 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8718 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x8718 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8719 = args[2][34 * steps + ((cycle - 16) & mask)];
      assert(x8719 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8720 = args[2][35 * steps + ((cycle - 16) & mask)];
      assert(x8720 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8721 = args[2][36 * steps + ((cycle - 16) & mask)];
      assert(x8721 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8722 = args[2][37 * steps + ((cycle - 16) & mask)];
      assert(x8722 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8723 = args[2][38 * steps + ((cycle - 16) & mask)];
      assert(x8723 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8724 = args[2][39 * steps + ((cycle - 16) & mask)];
      assert(x8724 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8725 = args[2][40 * steps + ((cycle - 16) & mask)];
      assert(x8725 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8726 = x8680 + x8665;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8727 = x8680 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8728 = x8727 * x8665;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8729 = x8726 - x8728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8730 = x8681 + x8666;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8731 = x8681 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8732 = x8731 * x8666;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8733 = x8730 - x8732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8734 = x8682 + x8667;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8735 = x8682 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8736 = x8735 * x8667;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8737 = x8734 - x8736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8738 = x8683 + x8668;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8739 = x8683 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8740 = x8739 * x8668;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8741 = x8738 - x8740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8742 = x8684 + x8669;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8743 = x8684 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8744 = x8743 * x8669;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8745 = x8742 - x8744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8746 = x8685 + x8670;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8747 = x8685 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8748 = x8747 * x8670;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8749 = x8746 - x8748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8750 = x8686 + x8671;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8751 = x8686 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8752 = x8751 * x8671;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8753 = x8750 - x8752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8754 = x8687 + x8672;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8755 = x8687 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8756 = x8755 * x8672;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8757 = x8754 - x8756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8758 = x8688 + x8673;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8759 = x8688 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8760 = x8759 * x8673;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8761 = x8758 - x8760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8762 = x8689 + x8674;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8763 = x8689 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8764 = x8763 * x8674;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8765 = x8762 - x8764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8766 = x8690 + x8675;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8767 = x8690 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8768 = x8767 * x8675;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8769 = x8766 - x8768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8770 = x8691 + x8676;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8771 = x8691 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8772 = x8771 * x8676;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8773 = x8770 - x8772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8774 = x8692 + x8677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8775 = x8692 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8776 = x8775 * x8677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8777 = x8774 - x8776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8778 = x8693 + x8678;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8779 = x8693 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8780 = x8779 * x8678;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8781 = x8778 - x8780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8782 = x8662 + x8679;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8783 = x8662 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8784 = x8783 * x8679;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8785 = x8782 - x8784;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8786 = x8663 + x8680;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8787 = x8663 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8788 = x8787 * x8680;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8789 = x8786 - x8788;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8790 = x8664 + x8681;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8791 = x8664 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8792 = x8791 * x8681;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8793 = x8790 - x8792;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8794 = x8665 + x8682;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8795 = x8665 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8796 = x8795 * x8682;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8797 = x8794 - x8796;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8798 = x8666 + x8683;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8799 = x8666 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8800 = x8799 * x8683;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8801 = x8798 - x8800;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8802 = x8667 + x8684;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8803 = x8667 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8804 = x8803 * x8684;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8805 = x8802 - x8804;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8806 = x8668 + x8685;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8807 = x8668 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8808 = x8807 * x8685;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8809 = x8806 - x8808;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8810 = x8669 + x8686;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8811 = x8669 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8812 = x8811 * x8686;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8813 = x8810 - x8812;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8814 = x8670 + x8687;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8815 = x8670 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8816 = x8815 * x8687;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8817 = x8814 - x8816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8818 = x8671 + x8688;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8819 = x8671 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8820 = x8819 * x8688;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8821 = x8818 - x8820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8822 = x8672 + x8689;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8823 = x8672 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8824 = x8823 * x8689;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8825 = x8822 - x8824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8826 = x8673 + x8690;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8827 = x8673 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8828 = x8827 * x8690;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8829 = x8826 - x8828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8830 = x8674 + x8691;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8831 = x8674 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8832 = x8831 * x8691;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8833 = x8830 - x8832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8834 = x8675 + x8692;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8835 = x8675 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8836 = x8835 * x8692;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8837 = x8834 - x8836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8838 = x8676 + x8693;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8839 = x8676 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8840 = x8839 * x8693;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8841 = x8838 - x8840;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8842 = x8669 + x8729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8843 = x8811 * x8729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8844 = x8842 - x8843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8845 = x8670 + x8733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8846 = x8815 * x8733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8847 = x8845 - x8846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8848 = x8671 + x8737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8849 = x8819 * x8737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8850 = x8848 - x8849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8851 = x8672 + x8741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8852 = x8823 * x8741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8853 = x8851 - x8852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8854 = x8673 + x8745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8855 = x8827 * x8745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8856 = x8854 - x8855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8857 = x8674 + x8749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8858 = x8831 * x8749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8859 = x8857 - x8858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8860 = x8675 + x8753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8861 = x8835 * x8753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8862 = x8860 - x8861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8863 = x8676 + x8757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8864 = x8839 * x8757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8865 = x8863 - x8864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8866 = x8677 + x8761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8867 = x8677 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8868 = x8867 * x8761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8869 = x8866 - x8868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8870 = x8678 + x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8871 = x8678 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8872 = x8871 * x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8873 = x8870 - x8872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8874 = x8679 + x8769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8875 = x8679 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8876 = x8875 * x8769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8877 = x8874 - x8876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8878 = x8680 + x8773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8879 = x8727 * x8773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8880 = x8878 - x8879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8881 = x8681 + x8777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8882 = x8731 * x8777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8883 = x8881 - x8882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8884 = x8682 + x8781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8885 = x8735 * x8781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8886 = x8884 - x8885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8887 = x8683 + x8785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8888 = x8739 * x8785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8889 = x8887 - x8888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8890 = x8684 + x8789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8891 = x8743 * x8789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8892 = x8890 - x8891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8893 = x8685 + x8793;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8894 = x8747 * x8793;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8895 = x8893 - x8894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8896 = x8686 + x8797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8897 = x8751 * x8797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8898 = x8896 - x8897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8899 = x8687 + x8801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8900 = x8755 * x8801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8901 = x8899 - x8900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8902 = x8688 + x8805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8903 = x8759 * x8805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8904 = x8902 - x8903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8905 = x8689 + x8809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8906 = x8763 * x8809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8907 = x8905 - x8906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8908 = x8690 + x8813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8909 = x8767 * x8813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8910 = x8908 - x8909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8911 = x8691 + x8817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8912 = x8771 * x8817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8913 = x8911 - x8912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8914 = x8692 + x8821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8915 = x8775 * x8821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8916 = x8914 - x8915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8917 = x8693 + x8825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8918 = x8779 * x8825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8919 = x8917 - x8918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8920 = x8662 + x8829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8921 = x8783 * x8829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8922 = x8920 - x8921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8923 = x8663 + x8833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8924 = x8787 * x8833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8925 = x8923 - x8924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8926 = x8664 + x8837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8927 = x8791 * x8837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8928 = x8926 - x8927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8929 = x8665 + x8841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8930 = x8795 * x8841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8931 = x8929 - x8930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8932 = x8666 + x8677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8933 = x8799 * x8677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8934 = x8932 - x8933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8935 = x8667 + x8678;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8936 = x8803 * x8678;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8937 = x8935 - x8936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8938 = x8668 + x8679;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8939 = x8807 * x8679;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8940 = x8938 - x8939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8941 = x8617 + x8608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8942 = x8617 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8943 = x8942 * x8608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8944 = x8941 - x8943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8945 = x8618 + x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8946 = x8618 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8947 = x8946 * x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8948 = x8945 - x8947;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8949 = x8619 + x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8950 = x8619 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8951 = x8950 * x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8952 = x8949 - x8951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8953 = x8620 + x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8954 = x8620 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8955 = x8954 * x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8956 = x8953 - x8955;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8957 = x8621 + x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8958 = x8621 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8959 = x8958 * x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8960 = x8957 - x8959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8961 = x8622 + x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8962 = x8622 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8963 = x8962 * x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8964 = x8961 - x8963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8965 = x8623 + x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8966 = x8623 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8967 = x8966 * x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8968 = x8965 - x8967;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8969 = x8624 + x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8970 = x8624 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8971 = x8970 * x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8972 = x8969 - x8971;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8973 = x8625 + x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8974 = x8625 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8975 = x8974 * x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8976 = x8973 - x8975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8977 = x8626 + x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8978 = x8626 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8979 = x8978 * x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8980 = x8977 - x8979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8981 = x8627 + x8618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8982 = x8627 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8983 = x8982 * x8618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8984 = x8981 - x8983;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8985 = x8628 + x8619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8986 = x8628 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8987 = x8986 * x8619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8988 = x8985 - x8987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8989 = x8629 + x8620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8990 = x8629 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8991 = x8990 * x8620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8992 = x8989 - x8991;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8993 = x8598 + x8621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8994 = x8598 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8995 = x8994 * x8621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8996 = x8993 - x8995;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8997 = x8599 + x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8998 = x8599 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8999 = x8998 * x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9000 = x8997 - x8999;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9001 = x8600 + x8623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9002 = x8600 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9003 = x9002 * x8623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9004 = x9001 - x9003;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9005 = x8601 + x8624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9006 = x8601 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9007 = x9006 * x8624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9008 = x9005 - x9007;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9009 = x8602 + x8625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9010 = x8602 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9011 = x9010 * x8625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9012 = x9009 - x9011;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9013 = x8603 + x8626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9014 = x8603 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9015 = x9014 * x8626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9016 = x9013 - x9015;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9017 = x8604 + x8627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9018 = x8604 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9019 = x9018 * x8627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9020 = x9017 - x9019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9021 = x8605 + x8628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9022 = x8605 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9023 = x9022 * x8628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9024 = x9021 - x9023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9025 = x8606 + x8629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9026 = x8606 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9027 = x9026 * x8629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9028 = x9025 - x9027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9029 = x8615 + x8944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9030 = x8615 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9031 = x9030 * x8944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9032 = x9029 - x9031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9033 = x8616 + x8948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9034 = x8616 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9035 = x9034 * x8948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9036 = x9033 - x9035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9037 = x8617 + x8952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9038 = x8942 * x8952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9039 = x9037 - x9038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9040 = x8618 + x8956;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9041 = x8946 * x8956;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9042 = x9040 - x9041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9043 = x8619 + x8960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9044 = x8950 * x8960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9045 = x9043 - x9044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9046 = x8620 + x8964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9047 = x8954 * x8964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9048 = x9046 - x9047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9049 = x8621 + x8968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9050 = x8958 * x8968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9051 = x9049 - x9050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9052 = x8622 + x8972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9053 = x8962 * x8972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9054 = x9052 - x9053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9055 = x8623 + x8976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9056 = x8966 * x8976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9057 = x9055 - x9056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9058 = x8624 + x8980;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9059 = x8970 * x8980;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9060 = x9058 - x9059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9061 = x8625 + x8984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9062 = x8974 * x8984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9063 = x9061 - x9062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9064 = x8626 + x8988;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9065 = x8978 * x8988;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9066 = x9064 - x9065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9067 = x8627 + x8992;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9068 = x8982 * x8992;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9069 = x9067 - x9068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9070 = x8628 + x8996;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9071 = x8986 * x8996;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9072 = x9070 - x9071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9073 = x8629 + x9000;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9074 = x8990 * x9000;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9075 = x9073 - x9074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9076 = x8598 + x9004;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9077 = x8994 * x9004;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9078 = x9076 - x9077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9079 = x8599 + x9008;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9080 = x8998 * x9008;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9081 = x9079 - x9080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9082 = x8600 + x9012;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9083 = x9002 * x9012;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9084 = x9082 - x9083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9085 = x8601 + x9016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9086 = x9006 * x9016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9087 = x9085 - x9086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9088 = x8602 + x9020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9089 = x9010 * x9020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9090 = x9088 - x9089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9091 = x8603 + x9024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9092 = x9014 * x9024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9093 = x9091 - x9092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9094 = x8604 + x9028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9095 = x9018 * x9028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9096 = x9094 - x9095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9097 = x8605 + x8607;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9098 = x9022 * x8607;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9099 = x9097 - x9098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9100 = x8606 + x8608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9101 = x9026 * x8608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9102 = x9100 - x9101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9103 = x8607 + x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9104 = x8607 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9105 = x9104 * x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9106 = x9103 - x9105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9107 = x8608 + x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9108 = x8608 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9109 = x9108 * x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9110 = x9107 - x9109;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9111 = x8609 + x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9112 = x8609 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9113 = x9112 * x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9114 = x9111 - x9113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9115 = x8610 + x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9116 = x8610 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9117 = x9116 * x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9118 = x9115 - x9117;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9119 = x8611 + x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9120 = x8611 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9121 = x9120 * x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9122 = x9119 - x9121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9123 = x8612 + x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9124 = x8612 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9125 = x9124 * x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9126 = x9123 - x9125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9127 = x8613 + x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9128 = x8613 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9129 = x9128 * x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9130 = x9127 - x9129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9131 = x8614 + x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9132 = x8614 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9133 = x9132 * x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9134 = x9131 - x9133;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9135 = x8695 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9136 = x8694 + x9135;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9137 = x8696 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9138 = x9136 + x9137;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9139 = x8697 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9140 = x9138 + x9139;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9141 = x8698 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9142 = x9140 + x9141;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9143 = x8699 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9144 = x9142 + x9143;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9145 = x8700 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9146 = x9144 + x9145;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9147 = x8701 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9148 = x9146 + x9147;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9149 = x8702 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9150 = x9148 + x9149;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9151 = x8703 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9152 = x9150 + x9151;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9153 = x8704 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9154 = x9152 + x9153;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9155 = x8705 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9156 = x9154 + x9155;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9157 = x8706 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9158 = x9156 + x9157;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9159 = x8707 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9160 = x9158 + x9159;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9161 = x8708 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9162 = x9160 + x9161;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9163 = x8709 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9164 = x9162 + x9163;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9165 = x8711 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9166 = x8710 + x9165;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9167 = x8712 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9168 = x9166 + x9167;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9169 = x8713 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9170 = x9168 + x9169;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9171 = x8714 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9172 = x9170 + x9171;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9173 = x8715 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9174 = x9172 + x9173;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9175 = x8716 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9176 = x9174 + x9175;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9177 = x8717 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9178 = x9176 + x9177;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9179 = x8718 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9180 = x9178 + x9179;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9181 = x8719 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9182 = x9180 + x9181;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9183 = x8720 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9184 = x9182 + x9183;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9185 = x8721 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9186 = x9184 + x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9187 = x8722 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9188 = x9186 + x9187;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9189 = x8723 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9190 = x9188 + x9189;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9191 = x8724 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9192 = x9190 + x9191;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9193 = x8725 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9194 = x9192 + x9193;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9195 = x8847 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9196 = x8844 + x9195;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9197 = x8850 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9198 = x9196 + x9197;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9199 = x8853 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9200 = x9198 + x9199;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9201 = x8856 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9202 = x9200 + x9201;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9203 = x8859 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9204 = x9202 + x9203;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9205 = x8862 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9206 = x9204 + x9205;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9207 = x8865 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9208 = x9206 + x9207;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9209 = x8869 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9210 = x9208 + x9209;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9211 = x8873 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9212 = x9210 + x9211;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9213 = x8877 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9214 = x9212 + x9213;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9215 = x8880 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9216 = x9214 + x9215;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9217 = x8883 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9218 = x9216 + x9217;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9219 = x8886 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9220 = x9218 + x9219;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9221 = x8889 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9222 = x9220 + x9221;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9223 = x8892 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9224 = x9222 + x9223;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9225 = x8898 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9226 = x8895 + x9225;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9227 = x8901 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9228 = x9226 + x9227;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9229 = x8904 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9230 = x9228 + x9229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9231 = x8907 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9232 = x9230 + x9231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9233 = x8910 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9234 = x9232 + x9233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9235 = x8913 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9236 = x9234 + x9235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9237 = x8916 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9238 = x9236 + x9237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9239 = x8919 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9240 = x9238 + x9239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9241 = x8922 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9242 = x9240 + x9241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9243 = x8925 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9244 = x9242 + x9243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9245 = x8928 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9246 = x9244 + x9245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9247 = x8931 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9248 = x9246 + x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9249 = x8934 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9250 = x9248 + x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9251 = x8937 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9252 = x9250 + x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9253 = x8940 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9254 = x9252 + x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9255 = x8631 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9256 = x8630 + x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9257 = x8632 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9258 = x9256 + x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9259 = x8633 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9260 = x9258 + x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9261 = x8634 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9262 = x9260 + x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9263 = x8635 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9264 = x9262 + x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9265 = x8636 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9266 = x9264 + x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9267 = x8637 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9268 = x9266 + x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9269 = x8638 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9270 = x9268 + x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9271 = x8639 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9272 = x9270 + x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9273 = x8640 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9274 = x9272 + x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9275 = x8641 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9276 = x9274 + x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9277 = x8642 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9278 = x9276 + x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9279 = x8643 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9280 = x9278 + x9279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9281 = x8644 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9282 = x9280 + x9281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9283 = x8645 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9284 = x9282 + x9283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9285 = x8647 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9286 = x8646 + x9285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9287 = x8648 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9288 = x9286 + x9287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9289 = x8649 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9290 = x9288 + x9289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9291 = x8650 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9292 = x9290 + x9291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9293 = x8651 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9294 = x9292 + x9293;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9295 = x8652 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9296 = x9294 + x9295;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9297 = x8653 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9298 = x9296 + x9297;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9299 = x8654 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9300 = x9298 + x9299;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9301 = x8655 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9302 = x9300 + x9301;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9303 = x8656 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9304 = x9302 + x9303;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9305 = x8657 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9306 = x9304 + x9305;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9307 = x8658 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9308 = x9306 + x9307;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9309 = x8659 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9310 = x9308 + x9309;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9311 = x8660 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9312 = x9310 + x9311;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9313 = x8661 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9314 = x9312 + x9313;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9315 = x9036 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9316 = x9032 + x9315;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9317 = x9039 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9318 = x9316 + x9317;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9319 = x9042 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9320 = x9318 + x9319;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9321 = x9045 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9322 = x9320 + x9321;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9323 = x9048 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9324 = x9322 + x9323;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9325 = x9051 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9326 = x9324 + x9325;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9327 = x9054 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9328 = x9326 + x9327;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9329 = x9057 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9330 = x9328 + x9329;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9331 = x9060 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9332 = x9330 + x9331;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9333 = x9063 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9334 = x9332 + x9333;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9335 = x9066 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9336 = x9334 + x9335;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9337 = x9069 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9338 = x9336 + x9337;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9339 = x9072 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9340 = x9338 + x9339;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9341 = x9075 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9342 = x9340 + x9341;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9343 = x9078 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9344 = x9342 + x9343;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9345 = x9084 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9346 = x9081 + x9345;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9347 = x9087 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9348 = x9346 + x9347;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9349 = x9090 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9350 = x9348 + x9349;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9351 = x9093 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9352 = x9350 + x9351;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9353 = x9096 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9354 = x9352 + x9353;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9355 = x9099 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9356 = x9354 + x9355;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9357 = x9102 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9358 = x9356 + x9357;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9359 = x9106 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9360 = x9358 + x9359;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9361 = x9110 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9362 = x9360 + x9361;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9363 = x9114 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9364 = x9362 + x9363;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9365 = x9118 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9366 = x9364 + x9365;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9367 = x9122 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9368 = x9366 + x9367;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9369 = x9126 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9370 = x9368 + x9369;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9371 = x9130 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9372 = x9370 + x9371;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9373 = x9134 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9374 = x9372 + x9373;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9375 = x9284 + x9344;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9376 = x9314 + x9374;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9377 = x9224 + x9375;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9378 = x9254 + x9376;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9379 = x9164 + x9377;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9380 = x9194 + x9378;
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][149 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9379);
        reg = x9379;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][150 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9380);
        reg = x9380;
      }
      if (x8553 != 0) {
        {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9381 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9381 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9382 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9382 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9383 = x9382 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9384 = x9381 + x9383;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9385 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9385 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9386 = x9385 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9387 = x9384 + x9386;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9388 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9388 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9389 = x9388 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9390 = x9387 + x9389;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9391 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9391 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9392 = x9391 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9393 = x9390 + x9392;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9394 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9394 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9395 = x9394 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9396 = x9393 + x9395;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9397 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9397 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9398 = x9397 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9399 = x9396 + x9398;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9400 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9400 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9401 = x9400 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9402 = x9399 + x9401;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9403 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9403 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9404 = x9403 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9405 = x9402 + x9404;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9406 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9406 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9407 = x9406 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9408 = x9405 + x9407;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9409 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9409 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9410 = x9409 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9411 = x9408 + x9410;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9412 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9412 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9413 = x9412 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9414 = x9411 + x9413;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9415 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9415 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9416 = x9415 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9417 = x9414 + x9416;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9418 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9418 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9419 = x9418 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9420 = x9417 + x9419;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9421 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9421 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9422 = x9421 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9423 = x9420 + x9422;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9424 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9424 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9425 = x9424 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9426 = x9423 + x9425;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9427 = x101 - x9426;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9428 = x9427 * x16;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9428);
          reg = x9428;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9429 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9429 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9430 = Fp(x9429.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9430);
            reg = x9430;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9431 = Fp(x9429.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9432 = x9431 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9432);
            reg = x9432;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9433 = Fp(x9429.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9434 = x9433 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9434);
            reg = x9434;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9435 = Fp(x9429.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9436 = x9435 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9436);
            reg = x9436;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9437 = Fp(x9429.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9438 = x9437 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9438);
            reg = x9438;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9439 = Fp(x9429.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9440 = x9439 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9440);
            reg = x9440;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9441 = Fp(x9429.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9442 = x9441 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9442);
            reg = x9442;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9443 = Fp(x9429.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9444 = x9443 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9444);
            reg = x9444;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9445 = Fp(x9429.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9446 = x9445 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9446);
            reg = x9446;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9447 = Fp(x9429.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9448 = x9447 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9448);
            reg = x9448;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9449 = Fp(x9429.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9450 = x9449 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9450);
            reg = x9450;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9451 = Fp(x9429.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9452 = x9451 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9452);
            reg = x9452;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9453 = Fp(x9429.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9454 = x9453 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9454);
            reg = x9454;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9455 = Fp(x9429.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9456 = x9455 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9456);
            reg = x9456;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9457 = Fp(x9429.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9458 = x9457 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9458);
            reg = x9458;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9459 = Fp(x9429.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9460 = x9459 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9460);
            reg = x9460;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9461 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9461 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9462 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9462 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9463 = x9462 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9464 = x9461 + x9463;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9465 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9465 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9466 = x9465 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9467 = x9464 + x9466;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9468 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9468 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9469 = x9468 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9470 = x9467 + x9469;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9471 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9471 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9472 = x9471 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9473 = x9470 + x9472;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9474 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9474 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9475 = x9474 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9476 = x9473 + x9475;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9477 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9477 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9478 = x9477 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9479 = x9476 + x9478;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9480 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9480 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9481 = x9480 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9482 = x9479 + x9481;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9483 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9483 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9484 = x9483 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9485 = x9482 + x9484;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9486 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9486 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9487 = x9486 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9488 = x9485 + x9487;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9489 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9489 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9490 = x9489 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9491 = x9488 + x9490;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9492 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9492 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9493 = x9492 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9494 = x9491 + x9493;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9495 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9495 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9496 = x9495 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9497 = x9494 + x9496;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9498 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9498 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9499 = x9498 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9500 = x9497 + x9499;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9501 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9501 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9502 = x9501 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9503 = x9500 + x9502;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9504 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9504 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9505 = x9504 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9506 = x9503 + x9505;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9507 = x9429 - x9506;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9508 = x9507 * x16;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9508);
          reg = x9508;
        }
      }
      if (x8554 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x9509 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x9509 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x9510 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x9510 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9511 = Fp(x9509.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9511);
            reg = x9511;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9512 = Fp(x9509.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9513 = x9512 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9513);
            reg = x9513;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9514 = Fp(x9509.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9515 = x9514 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9515);
            reg = x9515;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9516 = Fp(x9509.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9517 = x9516 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9517);
            reg = x9517;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9518 = Fp(x9509.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9519 = x9518 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9519);
            reg = x9519;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9520 = Fp(x9509.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9521 = x9520 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9521);
            reg = x9521;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9522 = Fp(x9509.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9523 = x9522 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9523);
            reg = x9523;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9524 = Fp(x9509.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9525 = x9524 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9525);
            reg = x9525;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9526 = Fp(x9509.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9527 = x9526 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9527);
            reg = x9527;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9528 = Fp(x9509.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9529 = x9528 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9529);
            reg = x9529;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9530 = Fp(x9509.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9531 = x9530 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9531);
            reg = x9531;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9532 = Fp(x9509.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9533 = x9532 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9533);
            reg = x9533;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9534 = Fp(x9509.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9535 = x9534 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9535);
            reg = x9535;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9536 = Fp(x9509.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9537 = x9536 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9537);
            reg = x9537;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9538 = Fp(x9509.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9539 = x9538 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9539);
            reg = x9539;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9540 = Fp(x9509.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9541 = x9540 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9541);
            reg = x9541;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9542 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9543 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9543 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9544 = x9543 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9545 = x9542 + x9544;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9546 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9546 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9547 = x9546 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9548 = x9545 + x9547;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9549 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9549 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9550 = x9549 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9551 = x9548 + x9550;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9552 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9552 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9553 = x9552 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9554 = x9551 + x9553;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9555 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9555 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9556 = x9555 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9557 = x9554 + x9556;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9558 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9558 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9559 = x9558 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9560 = x9557 + x9559;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9561 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9561 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9562 = x9561 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9563 = x9560 + x9562;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9564 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9564 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9565 = x9564 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9566 = x9563 + x9565;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9567 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9567 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9568 = x9567 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9569 = x9566 + x9568;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9570 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9570 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9571 = x9570 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9572 = x9569 + x9571;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9573 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9573 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9574 = x9573 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9575 = x9572 + x9574;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9576 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9576 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9577 = x9576 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9578 = x9575 + x9577;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9579 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9579 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9580 = x9579 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9581 = x9578 + x9580;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9582 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9582 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9583 = x9582 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9584 = x9581 + x9583;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9585 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9585 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9586 = x9585 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9587 = x9584 + x9586;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9588 = x9509 - x9587;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9589 = x9588 * x16;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9589);
          reg = x9589;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9590 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9590 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
        auto x9591 = x9510 + x9590;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9592 = Fp(x9591.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9592);
            reg = x9592;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9593 = Fp(x9591.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9594 = x9593 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9594);
            reg = x9594;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9595 = Fp(x9591.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9596 = x9595 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9596);
            reg = x9596;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9597 = Fp(x9591.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9598 = x9597 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9598);
            reg = x9598;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9599 = Fp(x9591.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9600 = x9599 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9600);
            reg = x9600;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9601 = Fp(x9591.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9602 = x9601 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9602);
            reg = x9602;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9603 = Fp(x9591.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9604 = x9603 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9604);
            reg = x9604;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9605 = Fp(x9591.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9606 = x9605 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9606);
            reg = x9606;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9607 = Fp(x9591.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9608 = x9607 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9608);
            reg = x9608;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9609 = Fp(x9591.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9610 = x9609 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9610);
            reg = x9610;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9611 = Fp(x9591.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9612 = x9611 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9612);
            reg = x9612;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9613 = Fp(x9591.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9614 = x9613 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9614);
            reg = x9614;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9615 = Fp(x9591.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9616 = x9615 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9616);
            reg = x9616;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9617 = Fp(x9591.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9618 = x9617 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9618);
            reg = x9618;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9619 = Fp(x9591.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9620 = x9619 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9620);
            reg = x9620;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9621 = Fp(x9591.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9622 = x9621 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9622);
            reg = x9622;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9623 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9623 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9624 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9624 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9625 = x9624 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9626 = x9623 + x9625;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9627 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9627 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9628 = x9627 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9629 = x9626 + x9628;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9630 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9631 = x9630 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9632 = x9629 + x9631;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9633 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9634 = x9633 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9635 = x9632 + x9634;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9636 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9636 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9637 = x9636 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9638 = x9635 + x9637;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9639 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9639 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9640 = x9639 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9641 = x9638 + x9640;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9642 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9642 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9643 = x9642 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9644 = x9641 + x9643;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9645 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9645 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9646 = x9645 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9647 = x9644 + x9646;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9648 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9648 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9649 = x9648 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9650 = x9647 + x9649;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9651 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9651 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9652 = x9651 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9653 = x9650 + x9652;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9654 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9654 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9655 = x9654 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9656 = x9653 + x9655;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9657 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9657 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9658 = x9657 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9659 = x9656 + x9658;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9660 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9660 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9661 = x9660 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9662 = x9659 + x9661;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9663 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9663 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9664 = x9663 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9665 = x9662 + x9664;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9666 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9666 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9667 = x9666 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9668 = x9665 + x9667;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9669 = x9591 - x9668;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9670 = x9669 * x16;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9670);
          reg = x9670;
        }
      }
      if (x8553 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9671 = args[2][151 * steps + ((cycle - 4) & mask)];
        assert(x9671 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9672 = args[2][152 * steps + ((cycle - 4) & mask)];
        assert(x9672 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9673 = args[2][153 * steps + ((cycle - 4) & mask)];
        assert(x9673 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9674 = args[2][154 * steps + ((cycle - 4) & mask)];
        assert(x9674 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9675 = args[2][155 * steps + ((cycle - 4) & mask)];
        assert(x9675 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9676 = args[2][156 * steps + ((cycle - 4) & mask)];
        assert(x9676 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9677 = args[2][157 * steps + ((cycle - 4) & mask)];
        assert(x9677 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9678 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x9678 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9679 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x9679 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9680 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x9680 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9681 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x9681 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9682 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x9682 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9683 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x9683 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9684 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x9684 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9685 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x9685 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9686 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x9686 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9687 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x9687 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9688 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x9688 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9689 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x9689 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9690 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x9690 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9691 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x9691 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9692 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x9692 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9693 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x9693 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9694 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x9694 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9695 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x9695 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9696 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x9696 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9697 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x9697 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9698 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x9698 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9699 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x9699 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9700 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x9700 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9701 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x9701 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9702 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x9702 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9703 = x9672 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9704 = x9671 + x9703;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9705 = x9673 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9706 = x9704 + x9705;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9707 = x9674 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9708 = x9706 + x9707;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9709 = x9675 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9710 = x9708 + x9709;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9711 = x9676 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9712 = x9710 + x9711;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9713 = x9677 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9714 = x9712 + x9713;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9715 = x9678 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9716 = x9714 + x9715;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9717 = x9679 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9718 = x9716 + x9717;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9719 = x9680 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9720 = x9718 + x9719;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9721 = x9681 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9722 = x9720 + x9721;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9723 = x9682 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9724 = x9722 + x9723;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9725 = x9683 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9726 = x9724 + x9725;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9727 = x9684 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9728 = x9726 + x9727;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9729 = x9685 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9730 = x9728 + x9729;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9731 = x9686 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9732 = x9730 + x9731;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9733 = x9688 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9734 = x9687 + x9733;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9735 = x9689 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9736 = x9734 + x9735;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9737 = x9690 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9738 = x9736 + x9737;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9739 = x9691 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9740 = x9738 + x9739;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9741 = x9692 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9742 = x9740 + x9741;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9743 = x9693 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9744 = x9742 + x9743;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9745 = x9694 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9746 = x9744 + x9745;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9747 = x9695 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9748 = x9746 + x9747;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9749 = x9696 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9750 = x9748 + x9749;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9751 = x9697 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9752 = x9750 + x9751;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9753 = x9698 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9754 = x9752 + x9753;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9755 = x9699 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9756 = x9754 + x9755;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9757 = x9700 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9758 = x9756 + x9757;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9759 = x9701 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9760 = x9758 + x9759;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9761 = x9702 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9762 = x9760 + x9761;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9763 = args[2][151 * steps + ((cycle - 68) & mask)];
        assert(x9763 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9764 = args[2][152 * steps + ((cycle - 68) & mask)];
        assert(x9764 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9765 = args[2][153 * steps + ((cycle - 68) & mask)];
        assert(x9765 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9766 = args[2][154 * steps + ((cycle - 68) & mask)];
        assert(x9766 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9767 = args[2][155 * steps + ((cycle - 68) & mask)];
        assert(x9767 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9768 = args[2][156 * steps + ((cycle - 68) & mask)];
        assert(x9768 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9769 = args[2][157 * steps + ((cycle - 68) & mask)];
        assert(x9769 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9770 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x9770 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9771 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x9771 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9772 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x9772 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9773 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x9773 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9774 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x9774 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9775 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x9775 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9776 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x9776 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9777 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x9777 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9778 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x9778 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9779 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x9779 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9780 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x9780 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9781 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x9781 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9782 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x9782 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9783 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x9783 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9784 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x9784 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9785 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x9785 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9786 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x9786 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9787 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x9787 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9788 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x9788 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9789 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x9789 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9790 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x9790 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9791 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x9791 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9792 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x9792 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9793 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x9793 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9794 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x9794 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9795 = x9764 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9796 = x9763 + x9795;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9797 = x9765 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9798 = x9796 + x9797;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9799 = x9766 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9800 = x9798 + x9799;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9801 = x9767 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9802 = x9800 + x9801;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9803 = x9768 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9804 = x9802 + x9803;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9805 = x9769 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9806 = x9804 + x9805;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9807 = x9770 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9808 = x9806 + x9807;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9809 = x9771 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9810 = x9808 + x9809;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9811 = x9772 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9812 = x9810 + x9811;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9813 = x9773 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9814 = x9812 + x9813;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9815 = x9774 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9816 = x9814 + x9815;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9817 = x9775 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9818 = x9816 + x9817;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9819 = x9776 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9820 = x9818 + x9819;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9821 = x9777 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9822 = x9820 + x9821;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9823 = x9778 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9824 = x9822 + x9823;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9825 = x9780 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9826 = x9779 + x9825;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9827 = x9781 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9828 = x9826 + x9827;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9829 = x9782 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9830 = x9828 + x9829;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9831 = x9783 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9832 = x9830 + x9831;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9833 = x9784 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9834 = x9832 + x9833;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9835 = x9785 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9836 = x9834 + x9835;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9837 = x9786 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9838 = x9836 + x9837;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9839 = x9787 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9840 = x9838 + x9839;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9841 = x9788 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9842 = x9840 + x9841;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9843 = x9789 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9844 = x9842 + x9843;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9845 = x9790 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9846 = x9844 + x9845;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9847 = x9791 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9848 = x9846 + x9847;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9849 = x9792 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9850 = x9848 + x9849;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9851 = x9793 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9852 = x9850 + x9851;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9853 = x9794 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9854 = x9852 + x9853;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9855 = x9732 + x9824;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9856 = x9762 + x9854;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9857 = Fp(x9855.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9857);
            reg = x9857;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9858 = Fp(x9855.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9859 = x9858 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9859);
            reg = x9859;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9860 = Fp(x9855.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9861 = x9860 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9861);
            reg = x9861;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9862 = Fp(x9855.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9863 = x9862 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9863);
            reg = x9863;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9864 = Fp(x9855.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9865 = x9864 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9865);
            reg = x9865;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9866 = Fp(x9855.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9867 = x9866 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9867);
            reg = x9867;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9868 = Fp(x9855.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9869 = x9868 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9869);
            reg = x9869;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9870 = Fp(x9855.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9871 = x9870 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9871);
            reg = x9871;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9872 = Fp(x9855.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9873 = x9872 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9873);
            reg = x9873;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9874 = Fp(x9855.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9875 = x9874 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9875);
            reg = x9875;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9876 = Fp(x9855.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9877 = x9876 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9877);
            reg = x9877;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9878 = Fp(x9855.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9879 = x9878 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9879);
            reg = x9879;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9880 = Fp(x9855.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9881 = x9880 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9881);
            reg = x9881;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9882 = Fp(x9855.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9883 = x9882 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9883);
            reg = x9883;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9884 = Fp(x9855.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9885 = x9884 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9885);
            reg = x9885;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9886 = Fp(x9855.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9887 = x9886 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9887);
            reg = x9887;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9888 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x9888 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9889 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x9889 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9890 = x9889 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9891 = x9888 + x9890;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9892 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x9892 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9893 = x9892 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9894 = x9891 + x9893;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9895 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x9895 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9896 = x9895 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9897 = x9894 + x9896;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9898 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x9898 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9899 = x9898 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9900 = x9897 + x9899;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9901 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x9901 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9902 = x9901 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9903 = x9900 + x9902;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9904 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9904 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9905 = x9904 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9906 = x9903 + x9905;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9907 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9907 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9908 = x9907 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9909 = x9906 + x9908;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9910 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x9910 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9911 = x9910 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9912 = x9909 + x9911;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9913 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x9913 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9914 = x9913 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9915 = x9912 + x9914;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9916 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x9916 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9917 = x9916 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9918 = x9915 + x9917;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9919 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x9919 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9920 = x9919 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9921 = x9918 + x9920;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9922 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x9922 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9923 = x9922 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9924 = x9921 + x9923;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9925 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x9925 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9926 = x9925 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9927 = x9924 + x9926;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9928 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x9928 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9929 = x9928 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9930 = x9927 + x9929;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9931 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x9931 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9932 = x9931 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9933 = x9930 + x9932;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9934 = x9855 - x9933;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9935 = x9934 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x9936 = Fp(x9935.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9936);
            reg = x9936;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9937 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x9937 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x9938 = x9935 - x9937;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x9939 = x9938 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x9940 = x102 - x9939;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x9941 = x9939 * x9940;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x9941 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x9942 = x9856 + x9935;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9943 = Fp(x9942.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9943);
            reg = x9943;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9944 = Fp(x9942.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9945 = x9944 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9945);
            reg = x9945;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9946 = Fp(x9942.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9947 = x9946 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9947);
            reg = x9947;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9948 = Fp(x9942.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9949 = x9948 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9949);
            reg = x9949;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9950 = Fp(x9942.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9951 = x9950 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9951);
            reg = x9951;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9952 = Fp(x9942.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9953 = x9952 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9953);
            reg = x9953;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9954 = Fp(x9942.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9955 = x9954 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9955);
            reg = x9955;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9956 = Fp(x9942.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9957 = x9956 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9957);
            reg = x9957;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9958 = Fp(x9942.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9959 = x9958 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9959);
            reg = x9959;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9960 = Fp(x9942.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9961 = x9960 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9961);
            reg = x9961;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9962 = Fp(x9942.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9963 = x9962 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9963);
            reg = x9963;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9964 = Fp(x9942.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9965 = x9964 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9965);
            reg = x9965;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9966 = Fp(x9942.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9967 = x9966 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9967);
            reg = x9967;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9968 = Fp(x9942.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9969 = x9968 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9969);
            reg = x9969;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9970 = Fp(x9942.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9971 = x9970 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9971);
            reg = x9971;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9972 = Fp(x9942.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9973 = x9972 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9973);
            reg = x9973;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9974 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x9974 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9975 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x9975 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9976 = x9975 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9977 = x9974 + x9976;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9978 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x9978 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9979 = x9978 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9980 = x9977 + x9979;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9981 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x9981 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9982 = x9981 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9983 = x9980 + x9982;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9984 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x9984 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9985 = x9984 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9986 = x9983 + x9985;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9987 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x9987 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9988 = x9987 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9989 = x9986 + x9988;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9990 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x9990 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9991 = x9990 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9992 = x9989 + x9991;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9993 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x9993 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9994 = x9993 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9995 = x9992 + x9994;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9996 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x9996 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9997 = x9996 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9998 = x9995 + x9997;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9999 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x9999 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10000 = x9999 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10001 = x9998 + x10000;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10002 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x10002 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10003 = x10002 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10004 = x10001 + x10003;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10005 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x10005 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10006 = x10005 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10007 = x10004 + x10006;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10008 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x10008 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10009 = x10008 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10010 = x10007 + x10009;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10011 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x10011 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10012 = x10011 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10013 = x10010 + x10012;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10014 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x10014 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10015 = x10014 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10016 = x10013 + x10015;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10017 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10017 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10018 = x10017 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10019 = x10016 + x10018;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10020 = x9942 - x10019;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10021 = x10020 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10022 = Fp(x10021.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10022);
            reg = x10022;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10023 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x10023 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10024 = x10021 - x10023;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10025 = x10024 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10026 = x102 - x10025;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10027 = x10025 * x10026;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10027 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10028 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x10028 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10029 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x10029 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10030 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x10030 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10031 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x10031 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10032 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x10032 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10033 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x10033 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10034 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x10034 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10035 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x10035 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10036 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x10036 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10037 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x10037 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10038 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x10038 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10039 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x10039 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10040 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x10040 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10041 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x10041 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10042 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x10042 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10043 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x10043 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10044 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x10044 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10045 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x10045 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10046 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x10046 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10047 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x10047 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10048 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x10048 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10049 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x10049 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10050 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x10050 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10051 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x10051 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10052 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x10052 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10053 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x10053 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10054 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x10054 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10055 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x10055 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10056 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x10056 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10057 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x10057 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10058 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x10058 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10059 = args[2][214 * steps + ((cycle - 4) & mask)];
        assert(x10059 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10060 = x10029 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10061 = x10028 + x10060;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10062 = x10030 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10063 = x10061 + x10062;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10064 = x10031 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10065 = x10063 + x10064;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10066 = x10032 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10067 = x10065 + x10066;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10068 = x10033 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10069 = x10067 + x10068;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10070 = x10034 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10071 = x10069 + x10070;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10072 = x10035 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10073 = x10071 + x10072;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10074 = x10036 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10075 = x10073 + x10074;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10076 = x10037 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10077 = x10075 + x10076;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10078 = x10038 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10079 = x10077 + x10078;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10080 = x10039 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10081 = x10079 + x10080;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10082 = x10040 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10083 = x10081 + x10082;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10084 = x10041 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10085 = x10083 + x10084;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10086 = x10042 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10087 = x10085 + x10086;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10088 = x10043 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10089 = x10087 + x10088;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10090 = x10045 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10091 = x10044 + x10090;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10092 = x10046 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10093 = x10091 + x10092;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10094 = x10047 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10095 = x10093 + x10094;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10096 = x10048 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10097 = x10095 + x10096;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10098 = x10049 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10099 = x10097 + x10098;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10100 = x10050 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10101 = x10099 + x10100;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10102 = x10051 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10103 = x10101 + x10102;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10104 = x10052 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10105 = x10103 + x10104;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10106 = x10053 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10107 = x10105 + x10106;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10108 = x10054 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10109 = x10107 + x10108;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10110 = x10055 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10111 = x10109 + x10110;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10112 = x10056 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10113 = x10111 + x10112;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10114 = x10057 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10115 = x10113 + x10114;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10116 = x10058 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10117 = x10115 + x10116;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10118 = x10059 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10119 = x10117 + x10118;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10120 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x10120 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10121 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x10121 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10122 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x10122 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10123 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x10123 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10124 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x10124 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10125 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x10125 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10126 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x10126 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10127 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x10127 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10128 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10128 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10129 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10129 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10130 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10130 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10131 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10131 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10132 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10132 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10133 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10133 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10134 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10134 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10135 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10135 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10136 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10136 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10137 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10137 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10138 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10138 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10139 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10139 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10140 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10140 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10141 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10141 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10142 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10142 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10143 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10143 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10144 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10144 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10145 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10145 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10146 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10146 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10147 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10147 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10148 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10148 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10149 = args[2][212 * steps + ((cycle - 68) & mask)];
        assert(x10149 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10150 = args[2][213 * steps + ((cycle - 68) & mask)];
        assert(x10150 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10151 = args[2][214 * steps + ((cycle - 68) & mask)];
        assert(x10151 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10152 = x10121 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10153 = x10120 + x10152;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10154 = x10122 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10155 = x10153 + x10154;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10156 = x10123 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10157 = x10155 + x10156;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10158 = x10124 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10159 = x10157 + x10158;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10160 = x10125 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10161 = x10159 + x10160;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10162 = x10126 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10163 = x10161 + x10162;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10164 = x10127 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10165 = x10163 + x10164;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10166 = x10128 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10167 = x10165 + x10166;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10168 = x10129 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10169 = x10167 + x10168;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10170 = x10130 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10171 = x10169 + x10170;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10172 = x10131 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10173 = x10171 + x10172;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10174 = x10132 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10175 = x10173 + x10174;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10176 = x10133 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10177 = x10175 + x10176;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10178 = x10134 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10179 = x10177 + x10178;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10180 = x10135 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10181 = x10179 + x10180;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10182 = x10137 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10183 = x10136 + x10182;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10184 = x10138 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10185 = x10183 + x10184;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10186 = x10139 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10187 = x10185 + x10186;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10188 = x10140 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10189 = x10187 + x10188;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10190 = x10141 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10191 = x10189 + x10190;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10192 = x10142 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10193 = x10191 + x10192;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10194 = x10143 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10195 = x10193 + x10194;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10196 = x10144 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10197 = x10195 + x10196;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10198 = x10145 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10199 = x10197 + x10198;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10200 = x10146 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10201 = x10199 + x10200;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10202 = x10147 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10203 = x10201 + x10202;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10204 = x10148 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10205 = x10203 + x10204;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10206 = x10149 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10207 = x10205 + x10206;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10208 = x10150 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10209 = x10207 + x10208;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10210 = x10151 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10211 = x10209 + x10210;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10212 = x10089 + x10181;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10213 = x10119 + x10211;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10214 = Fp(x10212.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10214);
            reg = x10214;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10215 = Fp(x10212.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10216 = x10215 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10216);
            reg = x10216;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10217 = Fp(x10212.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10218 = x10217 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10218);
            reg = x10218;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10219 = Fp(x10212.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10220 = x10219 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10220);
            reg = x10220;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10221 = Fp(x10212.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10222 = x10221 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10222);
            reg = x10222;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10223 = Fp(x10212.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10224 = x10223 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10224);
            reg = x10224;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10225 = Fp(x10212.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10226 = x10225 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10226);
            reg = x10226;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10227 = Fp(x10212.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10228 = x10227 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10228);
            reg = x10228;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10229 = Fp(x10212.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10230 = x10229 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10230);
            reg = x10230;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10231 = Fp(x10212.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10232 = x10231 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10232);
            reg = x10232;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10233 = Fp(x10212.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10234 = x10233 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10234);
            reg = x10234;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10235 = Fp(x10212.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10236 = x10235 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10236);
            reg = x10236;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10237 = Fp(x10212.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10238 = x10237 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10238);
            reg = x10238;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10239 = Fp(x10212.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10240 = x10239 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10240);
            reg = x10240;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10241 = Fp(x10212.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10242 = x10241 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10242);
            reg = x10242;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10243 = Fp(x10212.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10244 = x10243 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10244);
            reg = x10244;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10245 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10245 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10246 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10246 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10247 = x10246 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10248 = x10245 + x10247;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10249 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10249 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10250 = x10249 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10251 = x10248 + x10250;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10252 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10252 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10253 = x10252 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10254 = x10251 + x10253;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10255 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10255 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10256 = x10255 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10257 = x10254 + x10256;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10258 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10258 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10259 = x10258 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10260 = x10257 + x10259;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10261 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10261 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10262 = x10261 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10263 = x10260 + x10262;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10264 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10264 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10265 = x10264 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10266 = x10263 + x10265;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10267 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10267 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10268 = x10267 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10269 = x10266 + x10268;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10270 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10270 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10271 = x10270 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10272 = x10269 + x10271;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10273 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10273 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10274 = x10273 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10275 = x10272 + x10274;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10276 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10276 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10277 = x10276 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10278 = x10275 + x10277;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10279 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10279 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10280 = x10279 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10281 = x10278 + x10280;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10282 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10282 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10283 = x10282 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10284 = x10281 + x10283;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10285 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10286 = x10285 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10287 = x10284 + x10286;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10288 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10289 = x10288 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10290 = x10287 + x10289;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10291 = x10212 - x10290;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10292 = x10291 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10293 = Fp(x10292.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10293);
            reg = x10293;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10294 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x10294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10295 = x10292 - x10294;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10296 = x10295 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10297 = x102 - x10296;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10298 = x10296 * x10297;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10298 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10299 = x10213 + x10292;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10300 = Fp(x10299.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10300);
            reg = x10300;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10301 = Fp(x10299.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10302 = x10301 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10302);
            reg = x10302;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10303 = Fp(x10299.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10304 = x10303 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10304);
            reg = x10304;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10305 = Fp(x10299.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10306 = x10305 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10306);
            reg = x10306;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10307 = Fp(x10299.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10308 = x10307 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10308);
            reg = x10308;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10309 = Fp(x10299.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10310 = x10309 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10310);
            reg = x10310;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10311 = Fp(x10299.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10312 = x10311 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10312);
            reg = x10312;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10313 = Fp(x10299.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10314 = x10313 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10314);
            reg = x10314;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10315 = Fp(x10299.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10316 = x10315 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10316);
            reg = x10316;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10317 = Fp(x10299.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10318 = x10317 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10318);
            reg = x10318;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10319 = Fp(x10299.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10320 = x10319 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10320);
            reg = x10320;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10321 = Fp(x10299.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10322 = x10321 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10322);
            reg = x10322;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10323 = Fp(x10299.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10324 = x10323 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10324);
            reg = x10324;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10325 = Fp(x10299.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10326 = x10325 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10326);
            reg = x10326;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10327 = Fp(x10299.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10328 = x10327 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10328);
            reg = x10328;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10329 = Fp(x10299.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10330 = x10329 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10330);
            reg = x10330;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10331 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10331 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10332 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10332 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10333 = x10332 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10334 = x10331 + x10333;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10335 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10335 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10336 = x10335 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10337 = x10334 + x10336;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10338 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10338 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10339 = x10338 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10340 = x10337 + x10339;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10341 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10341 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10342 = x10341 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10343 = x10340 + x10342;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10344 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10344 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10345 = x10344 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10346 = x10343 + x10345;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10347 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10347 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10348 = x10347 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10349 = x10346 + x10348;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10350 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10350 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10351 = x10350 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10352 = x10349 + x10351;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10353 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10353 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10354 = x10353 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10355 = x10352 + x10354;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10356 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10356 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10357 = x10356 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10358 = x10355 + x10357;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10359 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10359 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10360 = x10359 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10361 = x10358 + x10360;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10362 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10362 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10363 = x10362 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10364 = x10361 + x10363;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10365 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10365 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10366 = x10365 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10367 = x10364 + x10366;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10368 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x10368 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10369 = x10368 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10370 = x10367 + x10369;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10371 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x10371 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10372 = x10371 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10373 = x10370 + x10372;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10374 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x10374 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10375 = x10374 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10376 = x10373 + x10375;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10377 = x10299 - x10376;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10378 = x10377 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10379 = Fp(x10378.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10379);
            reg = x10379;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10380 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x10380 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10381 = x10378 - x10380;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10382 = x10381 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10383 = x102 - x10382;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10384 = x10382 * x10383;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10384 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10385 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x10385 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":399:17)
      auto x10386 = x102 - x10385;
      if (x8561 != 0) {
        if (x10385 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10387 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x10387 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":403:26)
          auto x10388 = x10387 + x8545;
          {
            host_args.at(0) = x10388;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10389 = host_outs.at(0);
            auto x10390 = host_outs.at(1);
            auto x10391 = host_outs.at(2);
            auto x10392 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10389);
              reg = x10389;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10390);
              reg = x10390;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10391);
              reg = x10391;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10392);
              reg = x10392;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10393 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10393 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10394 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10394 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10395 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10395 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10396 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x10396 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10388);
            reg = x10388;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8533);
            reg = x8533;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10393);
            reg = x10393;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10394);
            reg = x10394;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10395);
            reg = x10395;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10396);
            reg = x10396;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10397 = x10387 + x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10398 = x10397 + x8545;
          {
            host_args.at(0) = x10398;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10399 = host_outs.at(0);
            auto x10400 = host_outs.at(1);
            auto x10401 = host_outs.at(2);
            auto x10402 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10399);
              reg = x10399;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10400);
              reg = x10400;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10401);
              reg = x10401;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10402);
              reg = x10402;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10403 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10403 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10404 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10404 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10405 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10405 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10406 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x10406 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10398);
            reg = x10398;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8533);
            reg = x8533;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10403);
            reg = x10403;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10404);
            reg = x10404;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10405);
            reg = x10405;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10406);
            reg = x10406;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x10407 = args[2][109 * steps + ((cycle - 0) & mask)];
          assert(x10407 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":405:39)
          auto x10408 = x10407 * x84;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10409 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10409 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10410 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10410 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10411 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10411 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10412 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10412 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10413 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10413 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10414 = x10413 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10415 = x10409 + x10414;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10416 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10416 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10417 = x10416 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10418 = x10410 + x10417;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10419 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10419 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10420 = x10419 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10421 = x10411 + x10420;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10422 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10422 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10423 = x10422 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10424 = x10412 + x10423;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10425 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10425 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10426 = x10425 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10427 = x10415 + x10426;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10428 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10428 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10429 = x10428 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10430 = x10418 + x10429;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10431 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10431 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10432 = x10431 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10433 = x10421 + x10432;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10434 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10434 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10435 = x10434 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10436 = x10424 + x10435;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10437 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10437 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10438 = x10437 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10439 = x10427 + x10438;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10440 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10440 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10441 = x10440 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10442 = x10430 + x10441;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10443 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10443 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10444 = x10443 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10445 = x10433 + x10444;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10446 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10446 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10447 = x10446 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10448 = x10436 + x10447;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10449 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10449 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10450 = x10449 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10451 = x10439 + x10450;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10452 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10452 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10453 = x10452 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10454 = x10442 + x10453;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10455 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10455 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10456 = x10455 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10457 = x10445 + x10456;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10458 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10458 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10459 = x10458 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10460 = x10448 + x10459;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10461 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10461 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10462 = x10461 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10463 = x10451 + x10462;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10464 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10464 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10465 = x10464 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10466 = x10454 + x10465;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10467 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10467 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10468 = x10467 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10469 = x10457 + x10468;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10470 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10470 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10471 = x10470 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10472 = x10460 + x10471;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10473 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10473 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10474 = x10473 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10475 = x10463 + x10474;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10476 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10476 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10477 = x10476 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10478 = x10466 + x10477;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10479 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10479 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10480 = x10479 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10481 = x10469 + x10480;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10482 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10482 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10483 = x10482 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10484 = x10472 + x10483;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10485 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10485 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10486 = x10485 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10487 = x10475 + x10486;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10488 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10488 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10489 = x10488 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10490 = x10478 + x10489;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10491 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10491 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10492 = x10491 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10493 = x10481 + x10492;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10494 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10494 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10495 = x10494 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10496 = x10484 + x10495;
          host_args.at(0) = x10408;
          host_args.at(1) = x10393;
          host_args.at(2) = x10394;
          host_args.at(3) = x10395;
          host_args.at(4) = x10396;
          host_args.at(5) = x10496;
          host_args.at(6) = x10493;
          host_args.at(7) = x10490;
          host_args.at(8) = x10487;
          host(ctx, "log", "  io0: [0x%x] %w, a: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x10497 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x10497 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":406:39)
          auto x10498 = x10497 * x84;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10499 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10499 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10500 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10500 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10501 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10501 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10502 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10502 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10503 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10503 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10504 = x10503 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10505 = x10499 + x10504;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10506 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10506 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10507 = x10506 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10508 = x10500 + x10507;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10509 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10509 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10510 = x10509 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10511 = x10501 + x10510;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10512 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10512 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10513 = x10512 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10514 = x10502 + x10513;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10515 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10515 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10516 = x10515 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10517 = x10505 + x10516;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10518 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10518 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10519 = x10518 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10520 = x10508 + x10519;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10521 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10521 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10522 = x10521 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10523 = x10511 + x10522;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10524 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10524 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10525 = x10524 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10526 = x10514 + x10525;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10527 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10527 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10528 = x10527 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10529 = x10517 + x10528;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10530 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10530 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10531 = x10530 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10532 = x10520 + x10531;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10533 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10533 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10534 = x10533 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10535 = x10523 + x10534;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10536 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10536 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10537 = x10536 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10538 = x10526 + x10537;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10539 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10539 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10540 = x10539 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10541 = x10529 + x10540;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10542 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10542 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10543 = x10542 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10544 = x10532 + x10543;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10545 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10545 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10546 = x10545 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10547 = x10535 + x10546;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10548 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10548 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10549 = x10548 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10550 = x10538 + x10549;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10551 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10551 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10552 = x10551 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10553 = x10541 + x10552;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10554 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10554 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10555 = x10554 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10556 = x10544 + x10555;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10557 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10557 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10558 = x10557 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10559 = x10547 + x10558;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10560 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10560 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10561 = x10560 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10562 = x10550 + x10561;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10563 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10563 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10564 = x10563 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10565 = x10553 + x10564;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10566 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10566 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10567 = x10566 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10568 = x10556 + x10567;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10569 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10569 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10570 = x10569 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10571 = x10559 + x10570;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10572 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10572 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10573 = x10572 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10574 = x10562 + x10573;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10575 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10575 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10576 = x10575 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10577 = x10565 + x10576;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10578 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10578 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10579 = x10578 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10580 = x10568 + x10579;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10581 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10581 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10582 = x10581 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10583 = x10571 + x10582;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10584 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x10584 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10585 = x10584 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10586 = x10574 + x10585;
          host_args.at(0) = x10498;
          host_args.at(1) = x10403;
          host_args.at(2) = x10404;
          host_args.at(3) = x10405;
          host_args.at(4) = x10406;
          host_args.at(5) = x10586;
          host_args.at(6) = x10583;
          host_args.at(7) = x10580;
          host_args.at(8) = x10577;
          host(ctx, "log", "  io1: [0x%x] %w, e: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("./cirgen/components/u32.h":25:12)
          auto x10587 = x10394 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10588 = x10393 + x10587;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10589 = x10395 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10590 = x10588 + x10589;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10591 = x10396 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10592 = x10590 + x10591;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10593 = x10493 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10594 = x10496 + x10593;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10595 = x10490 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10596 = x10594 + x10595;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10597 = x10487 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10598 = x10596 + x10597;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          auto x10599 = x10592 - x10598;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          if (x10599 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:407");
          // loc("./cirgen/components/u32.h":25:12)
          auto x10600 = x10404 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10601 = x10403 + x10600;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10602 = x10405 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10603 = x10601 + x10602;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10604 = x10406 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10605 = x10603 + x10604;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10606 = x10583 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10607 = x10586 + x10606;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10608 = x10580 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10609 = x10607 + x10608;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10610 = x10577 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10611 = x10609 + x10610;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          auto x10612 = x10605 - x10611;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          if (x10612 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:408");
        }
        if (x10386 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10613 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x10613 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":411:27)
          auto x10614 = x10613 + x8545;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10615 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10615 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10616 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10616 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10617 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10617 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10618 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10618 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10619 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10619 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10620 = x10619 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10621 = x10615 + x10620;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10622 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10622 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10623 = x10622 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10624 = x10616 + x10623;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10625 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10625 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10626 = x10625 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10627 = x10617 + x10626;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10628 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10628 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10629 = x10628 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10630 = x10618 + x10629;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10631 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10631 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10632 = x10631 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10633 = x10621 + x10632;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10634 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10634 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10635 = x10634 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10636 = x10624 + x10635;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10637 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10637 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10638 = x10637 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10639 = x10627 + x10638;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10640 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10640 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10641 = x10640 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10642 = x10630 + x10641;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10643 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10643 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10644 = x10643 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10645 = x10633 + x10644;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10646 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10646 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10647 = x10646 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10648 = x10636 + x10647;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10649 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10649 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10650 = x10649 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10651 = x10639 + x10650;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10652 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10652 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10653 = x10652 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10654 = x10642 + x10653;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10655 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10655 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10656 = x10655 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10657 = x10645 + x10656;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10658 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10658 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10659 = x10658 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10660 = x10648 + x10659;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10661 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10661 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10662 = x10661 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10663 = x10651 + x10662;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10664 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10664 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10665 = x10664 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10666 = x10654 + x10665;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10667 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10667 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10668 = x10667 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10669 = x10657 + x10668;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10670 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10670 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10671 = x10670 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10672 = x10660 + x10671;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10673 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10673 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10674 = x10673 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10675 = x10663 + x10674;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10676 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10676 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10677 = x10676 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10678 = x10666 + x10677;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10679 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10679 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10680 = x10679 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10681 = x10669 + x10680;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10682 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10682 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10683 = x10682 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10684 = x10672 + x10683;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10685 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10685 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10686 = x10685 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10687 = x10675 + x10686;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10688 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10688 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10689 = x10688 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10690 = x10678 + x10689;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10691 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10691 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10692 = x10691 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10693 = x10681 + x10692;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10694 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10694 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10695 = x10694 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10696 = x10684 + x10695;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10697 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10697 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10698 = x10697 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10699 = x10687 + x10698;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10700 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10700 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10701 = x10700 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10702 = x10690 + x10701;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10702);
            reg = x10702;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10699);
            reg = x10699;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10696);
            reg = x10696;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10693);
            reg = x10693;
          }
          {
            host_args.at(0) = x10614;
            host_args.at(1) = x10702;
            host_args.at(2) = x10699;
            host_args.at(3) = x10696;
            host_args.at(4) = x10693;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10703 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10703 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10704 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10704 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10705 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10705 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10706 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x10706 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10614);
            reg = x10614;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8533);
            reg = x8533;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10703);
            reg = x10703;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10704);
            reg = x10704;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10705);
            reg = x10705;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10706);
            reg = x10706;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10707 = x10613 + x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10708 = x10707 + x8545;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10709 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10709 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10710 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10710 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10711 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10711 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10712 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10712 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10713 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10713 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10714 = x10713 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10715 = x10709 + x10714;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10716 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10716 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10717 = x10716 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10718 = x10710 + x10717;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10719 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10719 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10720 = x10719 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10721 = x10711 + x10720;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10722 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10722 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10723 = x10722 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10724 = x10712 + x10723;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10725 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10725 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10726 = x10725 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10727 = x10715 + x10726;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10728 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10728 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10729 = x10728 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10730 = x10718 + x10729;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10731 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10731 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10732 = x10731 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10733 = x10721 + x10732;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10734 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10734 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10735 = x10734 * x84;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10736 = x10724 + x10735;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10737 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10737 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10738 = x10737 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10739 = x10727 + x10738;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10740 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10740 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10741 = x10740 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10742 = x10730 + x10741;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10743 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10743 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10744 = x10743 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10745 = x10733 + x10744;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10746 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10746 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10747 = x10746 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10748 = x10736 + x10747;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10749 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10749 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10750 = x10749 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10751 = x10739 + x10750;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10752 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10752 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10753 = x10752 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10754 = x10742 + x10753;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10755 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10755 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10756 = x10755 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10757 = x10745 + x10756;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10758 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10758 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10759 = x10758 * x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10760 = x10748 + x10759;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10761 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10761 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10762 = x10761 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10763 = x10751 + x10762;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10764 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10764 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10765 = x10764 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10766 = x10754 + x10765;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10767 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10767 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10768 = x10767 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10769 = x10757 + x10768;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10770 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10770 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10771 = x10770 * x67;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10772 = x10760 + x10771;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10773 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10773 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10774 = x10773 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10775 = x10763 + x10774;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10776 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10776 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10777 = x10776 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10778 = x10766 + x10777;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10779 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10779 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10780 = x10779 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10781 = x10769 + x10780;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10782 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10782 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10783 = x10782 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10784 = x10772 + x10783;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10785 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10785 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10786 = x10785 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10787 = x10775 + x10786;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10788 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10788 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10789 = x10788 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10790 = x10778 + x10789;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10791 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10791 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10792 = x10791 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10793 = x10781 + x10792;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10794 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x10794 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10795 = x10794 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10796 = x10784 + x10795;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10796);
            reg = x10796;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10793);
            reg = x10793;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10790);
            reg = x10790;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10787);
            reg = x10787;
          }
          {
            host_args.at(0) = x10708;
            host_args.at(1) = x10796;
            host_args.at(2) = x10793;
            host_args.at(3) = x10790;
            host_args.at(4) = x10787;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10797 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10797 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10798 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10798 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10799 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10799 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10800 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x10800 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10708);
            reg = x10708;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8533);
            reg = x8533;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10797);
            reg = x10797;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10798);
            reg = x10798;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10799);
            reg = x10799;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10800);
            reg = x10800;
          }
        }
      }
      if (x8562 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        if (x8553 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10801 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x10801 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10802 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x10802 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10803 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x10803 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10804 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x10804 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10805 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x10805 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10806 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x10806 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10807 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x10807 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10808 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x10808 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10809 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x10809 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10810 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x10810 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10811 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x10811 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10812 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x10812 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10813 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x10813 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10814 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x10814 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10815 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x10815 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10816 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x10816 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10817 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x10817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10818 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x10818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10819 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x10819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10820 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x10820 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10821 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x10821 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10822 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x10822 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10823 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x10823 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10824 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x10824 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10825 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x10825 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10826 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x10826 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10827 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x10827 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10828 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x10828 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10829 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x10829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10830 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x10830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10831 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x10831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10832 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x10832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10833 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x10833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10834 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x10834 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10835 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x10835 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10836 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x10836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10837 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x10837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10838 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x10838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10839 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x10839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10840 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x10840 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10841 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x10841 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10842 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x10842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10843 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x10843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10844 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x10844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10845 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x10845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10846 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x10846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10847 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x10847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10848 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x10848 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10849 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x10849 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10850 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x10850 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10851 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x10851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10852 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x10852 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10853 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x10853 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10854 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x10854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10855 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x10855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10856 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x10856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10857 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x10857 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10858 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x10858 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10859 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x10859 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10860 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x10860 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10861 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x10861 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10862 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x10862 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10863 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x10863 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10864 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x10864 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10865 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x10865 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10866 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x10866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10867 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x10867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10868 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x10868 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10869 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x10869 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10870 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x10870 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10871 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x10871 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10872 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x10872 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10873 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x10873 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10874 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x10874 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10875 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x10875 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10876 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x10876 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10877 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x10877 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10878 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x10878 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10879 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x10879 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10880 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x10880 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10881 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x10881 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10882 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x10882 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10883 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x10883 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10884 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x10884 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10885 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x10885 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10886 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x10886 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10887 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x10887 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10888 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x10888 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10889 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x10889 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10890 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x10890 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10891 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x10891 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10892 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x10892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10893 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x10893 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10894 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x10894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10895 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x10895 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10896 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x10896 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10897 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x10897 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10898 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x10898 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10899 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x10899 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10900 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x10900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10901 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x10901 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10902 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x10902 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10903 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x10903 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10904 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x10904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10905 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x10905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10906 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x10906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10907 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x10907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10908 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x10908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10909 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x10909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10910 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x10910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10911 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x10911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10912 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x10912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10913 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x10913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10914 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x10914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10915 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x10915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10916 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x10916 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10917 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x10917 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10918 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x10918 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10919 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x10919 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10920 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x10920 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10921 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x10921 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10922 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x10922 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10923 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x10923 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10924 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x10924 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10925 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x10925 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10926 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x10926 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10927 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x10927 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10928 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x10928 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10929 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x10929 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10930 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x10930 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10931 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x10931 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10932 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x10932 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10933 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x10933 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10934 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x10934 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10935 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x10935 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10936 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x10936 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10937 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x10937 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10938 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x10938 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10939 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x10939 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10940 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x10940 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10941 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x10941 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10942 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x10942 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10943 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x10943 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10944 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x10944 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10945 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x10945 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10946 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x10946 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10947 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x10947 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10948 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x10948 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10949 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x10949 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10950 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x10950 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10951 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x10951 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10952 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x10952 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10953 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x10953 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10954 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x10954 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10955 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x10955 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10956 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x10956 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10957 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x10957 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10958 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x10958 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10959 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x10959 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10960 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x10960 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10961 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x10961 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10962 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x10962 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10963 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x10963 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10964 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x10964 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10965 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x10965 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10966 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x10966 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10967 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x10967 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10968 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x10968 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10969 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x10969 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10970 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x10970 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10971 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x10971 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10972 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x10972 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10973 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x10973 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10974 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x10974 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10975 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x10975 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10976 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x10976 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10977 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x10977 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10978 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x10978 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10979 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x10979 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10980 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x10980 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10981 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x10981 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10982 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x10982 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10983 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x10983 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10984 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x10984 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10985 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x10985 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10986 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x10986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10987 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x10987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10988 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x10988 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10989 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x10989 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10990 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x10990 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10991 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x10991 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10992 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x10992 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10993 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x10993 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10994 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x10994 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10995 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x10995 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10996 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x10996 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10997 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x10997 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10998 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x10998 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10999 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x10999 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11000 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x11000 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11001 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x11001 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11002 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x11002 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11003 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x11003 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11004 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x11004 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11005 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x11005 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11006 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x11006 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11007 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x11007 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11008 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x11008 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11009 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x11009 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11010 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x11010 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11011 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x11011 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11012 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x11012 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11013 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x11013 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11014 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x11014 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11015 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x11015 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11016 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x11016 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11017 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x11017 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11018 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x11018 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11019 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x11019 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11020 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x11020 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11021 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x11021 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11022 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x11022 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11023 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x11023 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11024 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x11024 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11025 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x11025 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11026 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x11026 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11027 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x11027 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11028 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x11028 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11029 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x11029 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11030 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x11030 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11031 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x11031 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11032 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x11032 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11033 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x11033 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11034 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x11034 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11035 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x11035 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11036 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x11036 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11037 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x11037 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11038 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x11038 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11039 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x11039 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11040 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x11040 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11041 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x11041 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11042 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x11042 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11043 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x11043 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11044 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x11044 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11045 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x11045 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11046 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x11046 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11047 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x11047 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11048 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x11048 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11049 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x11049 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11050 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x11050 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11051 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x11051 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11052 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x11052 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11053 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x11053 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11054 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x11054 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11055 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x11055 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11056 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x11056 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11057 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x11057 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11058 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x11058 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11059 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x11059 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11060 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x11060 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11061 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x11061 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11062 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x11062 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11063 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x11063 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11064 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x11064 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11065 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x11065 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11066 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x11066 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11067 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11067 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11068 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11068 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11069 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11069 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11070 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11070 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11071 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11071 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11072 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11072 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11073 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11073 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11074 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11074 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11075 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11075 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11076 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11076 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11077 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11077 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11078 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11078 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11079 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11079 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11080 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11080 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11081 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11081 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11082 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x11082 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11083 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x11083 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11084 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x11084 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11085 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x11085 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11086 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x11086 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11087 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x11087 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11088 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x11088 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11089 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x11089 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11090 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x11090 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11091 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x11091 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11092 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x11092 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x11093 = x11090 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x11094 = x11089 + x11093;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x11095 = x11092 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x11096 = x11091 + x11095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11097 = x10814 + x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11098 = x10814 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11099 = x11098 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11100 = x11097 - x11099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11101 = x10815 + x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11102 = x10815 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11103 = x11102 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11104 = x11101 - x11103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11105 = x10816 + x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11106 = x10816 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11107 = x11106 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11108 = x11105 - x11107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11109 = x10817 + x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11110 = x10817 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11111 = x11110 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11112 = x11109 - x11111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11113 = x10818 + x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11114 = x10818 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11115 = x11114 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11116 = x11113 - x11115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11117 = x10819 + x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11118 = x10819 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11119 = x11118 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11120 = x11117 - x11119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11121 = x10820 + x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11122 = x10820 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11123 = x11122 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11124 = x11121 - x11123;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11125 = x10821 + x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11126 = x10821 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11127 = x11126 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11128 = x11125 - x11127;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11129 = x10822 + x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11130 = x10822 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11131 = x11130 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11132 = x11129 - x11131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11133 = x10823 + x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11134 = x10823 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11135 = x11134 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11136 = x11133 - x11135;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11137 = x10824 + x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11138 = x10824 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11139 = x11138 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11140 = x11137 - x11139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11141 = x10825 + x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11142 = x10825 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11143 = x11142 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11144 = x11141 - x11143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11145 = x10826 + x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11146 = x10826 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11147 = x11146 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11148 = x11145 - x11147;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11149 = x10827 + x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11150 = x10827 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11151 = x11150 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11152 = x11149 - x11151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11153 = x10828 + x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11154 = x10828 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11155 = x11154 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11156 = x11153 - x11155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11157 = x10829 + x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11158 = x10829 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11159 = x11158 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11160 = x11157 - x11159;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11161 = x10830 + x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11162 = x10830 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11163 = x11162 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11164 = x11161 - x11163;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11165 = x10831 + x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11166 = x10831 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11167 = x11166 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11168 = x11165 - x11167;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11169 = x10832 + x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11170 = x10832 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11171 = x11170 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11172 = x11169 - x11171;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11173 = x10801 + x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11174 = x10801 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11175 = x11174 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11176 = x11173 - x11175;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11177 = x10802 + x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11178 = x10802 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11179 = x11178 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11180 = x11177 - x11179;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11181 = x10803 + x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11182 = x10803 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11183 = x11182 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11184 = x11181 - x11183;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11185 = x10804 + x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11186 = x10804 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11187 = x11186 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11188 = x11185 - x11187;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11189 = x10805 + x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11190 = x10805 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11191 = x11190 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11192 = x11189 - x11191;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11193 = x10806 + x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11194 = x10806 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11195 = x11194 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11196 = x11193 - x11195;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11197 = x10807 + x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11198 = x10807 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11199 = x11198 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11200 = x11197 - x11199;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11201 = x10808 + x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11202 = x10808 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11203 = x11202 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11204 = x11201 - x11203;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11205 = x10809 + x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11206 = x10809 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11207 = x11206 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11208 = x11205 - x11207;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11209 = x10810 + x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11210 = x10810 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11211 = x11210 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11212 = x11209 - x11211;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11213 = x10811 + x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11214 = x10811 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11215 = x11214 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11216 = x11213 - x11215;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11217 = x10812 + x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11218 = x10812 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11219 = x11218 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11220 = x11217 - x11219;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11221 = x10813 + x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11222 = x10813 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11223 = x11222 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11224 = x11221 - x11223;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11225 = x10803 + x11100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11226 = x11182 * x11100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11227 = x11225 - x11226;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11228 = x10804 + x11104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11229 = x11186 * x11104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11230 = x11228 - x11229;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11231 = x10805 + x11108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11232 = x11190 * x11108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11233 = x11231 - x11232;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11234 = x10806 + x11112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11235 = x11194 * x11112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11236 = x11234 - x11235;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11237 = x10807 + x11116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11238 = x11198 * x11116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11239 = x11237 - x11238;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11240 = x10808 + x11120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11241 = x11202 * x11120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11242 = x11240 - x11241;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11243 = x10809 + x11124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11244 = x11206 * x11124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11245 = x11243 - x11244;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11246 = x10810 + x11128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11247 = x11210 * x11128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11248 = x11246 - x11247;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11249 = x10811 + x11132;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11250 = x11214 * x11132;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11251 = x11249 - x11250;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11252 = x10812 + x11136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11253 = x11218 * x11136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11254 = x11252 - x11253;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11255 = x10813 + x11140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11256 = x11222 * x11140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11257 = x11255 - x11256;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11258 = x10814 + x11144;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11259 = x11098 * x11144;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11260 = x11258 - x11259;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11261 = x10815 + x11148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11262 = x11102 * x11148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11263 = x11261 - x11262;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11264 = x10816 + x11152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11265 = x11106 * x11152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11266 = x11264 - x11265;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11267 = x10817 + x11156;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11268 = x11110 * x11156;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11269 = x11267 - x11268;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11270 = x10818 + x11160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11271 = x11114 * x11160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11272 = x11270 - x11271;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11273 = x10819 + x11164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11274 = x11118 * x11164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11275 = x11273 - x11274;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11276 = x10820 + x11168;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11277 = x11122 * x11168;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11278 = x11276 - x11277;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11279 = x10821 + x11172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11280 = x11126 * x11172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11281 = x11279 - x11280;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11282 = x10822 + x11176;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11283 = x11130 * x11176;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11284 = x11282 - x11283;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11285 = x10823 + x11180;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11286 = x11134 * x11180;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11287 = x11285 - x11286;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11288 = x10824 + x11184;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11289 = x11138 * x11184;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11290 = x11288 - x11289;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11291 = x10825 + x11188;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11292 = x11142 * x11188;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11293 = x11291 - x11292;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11294 = x10826 + x11192;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11295 = x11146 * x11192;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11296 = x11294 - x11295;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11297 = x10827 + x11196;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11298 = x11150 * x11196;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11299 = x11297 - x11298;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11300 = x10828 + x11200;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11301 = x11154 * x11200;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11302 = x11300 - x11301;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11303 = x10829 + x11204;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11304 = x11158 * x11204;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11305 = x11303 - x11304;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11306 = x10830 + x11208;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11307 = x11162 * x11208;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11308 = x11306 - x11307;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11309 = x10831 + x11212;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11310 = x11166 * x11212;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11311 = x11309 - x11310;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11312 = x10832 + x11216;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11313 = x11170 * x11216;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11314 = x11312 - x11313;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11315 = x10801 + x11220;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11316 = x11174 * x11220;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11317 = x11315 - x11316;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11318 = x10802 + x11224;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11319 = x11178 * x11224;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11320 = x11318 - x11319;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11321 = x10940 + x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11322 = x10940 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11323 = x11322 * x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11324 = x11321 - x11323;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11325 = x10941 + x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11326 = x10941 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11327 = x11326 * x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11328 = x11325 - x11327;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11329 = x10942 + x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11330 = x10942 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11331 = x11330 * x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11332 = x11329 - x11331;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11333 = x10943 + x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11334 = x10943 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11335 = x11334 * x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11336 = x11333 - x11335;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11337 = x10944 + x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11338 = x10944 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11339 = x11338 * x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11340 = x11337 - x11339;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11341 = x10945 + x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11342 = x10945 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11343 = x11342 * x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11344 = x11341 - x11343;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11345 = x10946 + x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11346 = x10946 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11347 = x11346 * x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11348 = x11345 - x11347;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11349 = x10947 + x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11350 = x10947 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11351 = x11350 * x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11352 = x11349 - x11351;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11353 = x10948 + x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11354 = x10948 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11355 = x11354 * x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11356 = x11353 - x11355;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11357 = x10949 + x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11358 = x10949 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11359 = x11358 * x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11360 = x11357 - x11359;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11361 = x10950 + x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11362 = x10950 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11363 = x11362 * x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11364 = x11361 - x11363;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11365 = x10951 + x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11366 = x10951 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11367 = x11366 * x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11368 = x11365 - x11367;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11369 = x10952 + x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11370 = x10952 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11371 = x11370 * x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11372 = x11369 - x11371;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11373 = x10953 + x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11374 = x10953 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11375 = x11374 * x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11376 = x11373 - x11375;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11377 = x10954 + x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11378 = x10954 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11379 = x11378 * x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11380 = x11377 - x11379;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11381 = x10955 + x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11382 = x10955 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11383 = x11382 * x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11384 = x11381 - x11383;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11385 = x10956 + x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11386 = x10956 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11387 = x11386 * x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11388 = x11385 - x11387;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11389 = x10957 + x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11390 = x10957 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11391 = x11390 * x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11392 = x11389 - x11391;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11393 = x10958 + x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11394 = x10958 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11395 = x11394 * x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11396 = x11393 - x11395;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11397 = x10959 + x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11398 = x10959 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11399 = x11398 * x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11400 = x11397 - x11399;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11401 = x10960 + x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11402 = x10960 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11403 = x11402 * x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11404 = x11401 - x11403;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11405 = x10929 + x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11406 = x10929 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11407 = x11406 * x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11408 = x11405 - x11407;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11409 = x10930 + x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11410 = x10930 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11411 = x11410 * x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11412 = x11409 - x11411;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11413 = x10931 + x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11414 = x10931 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11415 = x11414 * x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11416 = x11413 - x11415;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11417 = x10932 + x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11418 = x10932 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11419 = x11418 * x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11420 = x11417 - x11419;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11421 = x10933 + x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11422 = x10933 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11423 = x11422 * x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11424 = x11421 - x11423;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11425 = x10934 + x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11426 = x10934 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11427 = x11426 * x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11428 = x11425 - x11427;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11429 = x10935 + x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11430 = x10935 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11431 = x11430 * x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11432 = x11429 - x11431;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11433 = x10936 + x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11434 = x10936 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11435 = x11434 * x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11436 = x11433 - x11435;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11437 = x10937 + x10951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11438 = x10937 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11439 = x11438 * x10951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11440 = x11437 - x11439;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11441 = x10938 + x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11442 = x10938 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11443 = x11442 * x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11444 = x11441 - x11443;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11445 = x10939 + x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11446 = x10939 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11447 = x11446 * x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11448 = x11445 - x11447;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11449 = x10935 + x11324;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11450 = x11430 * x11324;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11451 = x11449 - x11450;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11452 = x10936 + x11328;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11453 = x11434 * x11328;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11454 = x11452 - x11453;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11455 = x10937 + x11332;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11456 = x11438 * x11332;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11457 = x11455 - x11456;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11458 = x10938 + x11336;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11459 = x11442 * x11336;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11460 = x11458 - x11459;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11461 = x10939 + x11340;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11462 = x11446 * x11340;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11463 = x11461 - x11462;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11464 = x10940 + x11344;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11465 = x11322 * x11344;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11466 = x11464 - x11465;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11467 = x10941 + x11348;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11468 = x11326 * x11348;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11469 = x11467 - x11468;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11470 = x10942 + x11352;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11471 = x11330 * x11352;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11472 = x11470 - x11471;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11473 = x10943 + x11356;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11474 = x11334 * x11356;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11475 = x11473 - x11474;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11476 = x10944 + x11360;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11477 = x11338 * x11360;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11478 = x11476 - x11477;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11479 = x10945 + x11364;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11480 = x11342 * x11364;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11481 = x11479 - x11480;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11482 = x10946 + x11368;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11483 = x11346 * x11368;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11484 = x11482 - x11483;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11485 = x10947 + x11372;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11486 = x11350 * x11372;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11487 = x11485 - x11486;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11488 = x10948 + x11376;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11489 = x11354 * x11376;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11490 = x11488 - x11489;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11491 = x10949 + x11380;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11492 = x11358 * x11380;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11493 = x11491 - x11492;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11494 = x10950 + x11384;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11495 = x11362 * x11384;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11496 = x11494 - x11495;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11497 = x10951 + x11388;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11498 = x11366 * x11388;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11499 = x11497 - x11498;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11500 = x10952 + x11392;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11501 = x11370 * x11392;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11502 = x11500 - x11501;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11503 = x10953 + x11396;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11504 = x11374 * x11396;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11505 = x11503 - x11504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11506 = x10954 + x11400;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11507 = x11378 * x11400;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11508 = x11506 - x11507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11509 = x10955 + x11404;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11510 = x11382 * x11404;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11511 = x11509 - x11510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11512 = x10956 + x11408;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11513 = x11386 * x11408;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11514 = x11512 - x11513;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11515 = x10957 + x11412;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11516 = x11390 * x11412;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11517 = x11515 - x11516;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11518 = x10958 + x11416;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11519 = x11394 * x11416;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11520 = x11518 - x11519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11521 = x10959 + x11420;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11522 = x11398 * x11420;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11523 = x11521 - x11522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11524 = x10960 + x11424;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11525 = x11402 * x11424;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11526 = x11524 - x11525;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11527 = x10929 + x11428;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11528 = x11406 * x11428;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11529 = x11527 - x11528;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11530 = x10930 + x11432;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11531 = x11410 * x11432;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11532 = x11530 - x11531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11533 = x10931 + x11436;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11534 = x11414 * x11436;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11535 = x11533 - x11534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11536 = x10932 + x11440;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11537 = x11418 * x11440;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11538 = x11536 - x11537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11539 = x10933 + x11444;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11540 = x11422 * x11444;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11541 = x11539 - x11540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11542 = x10934 + x11448;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11543 = x11426 * x11448;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11544 = x11542 - x11543;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11545 = x11058 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11546 = x11057 + x11545;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11547 = x11059 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11548 = x11546 + x11547;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11549 = x11060 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11550 = x11548 + x11549;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11551 = x11061 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11552 = x11550 + x11551;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11553 = x11062 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11554 = x11552 + x11553;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11555 = x11063 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11556 = x11554 + x11555;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11557 = x11064 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11558 = x11556 + x11557;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11559 = x11065 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11560 = x11558 + x11559;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11561 = x11066 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11562 = x11560 + x11561;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11563 = x11067 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11564 = x11562 + x11563;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11565 = x11068 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11566 = x11564 + x11565;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11567 = x11069 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11568 = x11566 + x11567;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11569 = x11070 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11570 = x11568 + x11569;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11571 = x11071 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11572 = x11570 + x11571;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11573 = x11072 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11574 = x11572 + x11573;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11575 = x11074 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11576 = x11073 + x11575;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11577 = x11075 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11578 = x11576 + x11577;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11579 = x11076 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11580 = x11578 + x11579;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11581 = x11077 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11582 = x11580 + x11581;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11583 = x11078 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11584 = x11582 + x11583;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11585 = x11079 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11586 = x11584 + x11585;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11587 = x11080 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11588 = x11586 + x11587;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11589 = x11081 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11590 = x11588 + x11589;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11591 = x11082 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11592 = x11590 + x11591;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11593 = x11083 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11594 = x11592 + x11593;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11595 = x11084 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11596 = x11594 + x11595;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11597 = x11085 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11598 = x11596 + x11597;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11599 = x11086 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11600 = x11598 + x11599;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11601 = x11087 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11602 = x11600 + x11601;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11603 = x11088 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11604 = x11602 + x11603;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11605 = x11026 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11606 = x11025 + x11605;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11607 = x11027 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11608 = x11606 + x11607;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11609 = x11028 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11610 = x11608 + x11609;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11611 = x11029 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11612 = x11610 + x11611;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11613 = x11030 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11614 = x11612 + x11613;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11615 = x11031 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11616 = x11614 + x11615;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11617 = x11032 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11618 = x11616 + x11617;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11619 = x11033 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11620 = x11618 + x11619;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11621 = x11034 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11622 = x11620 + x11621;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11623 = x11035 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11624 = x11622 + x11623;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11625 = x11036 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11626 = x11624 + x11625;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11627 = x11037 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11628 = x11626 + x11627;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11629 = x11038 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11630 = x11628 + x11629;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11631 = x11039 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11632 = x11630 + x11631;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11633 = x11040 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11634 = x11632 + x11633;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11635 = x11042 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11636 = x11041 + x11635;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11637 = x11043 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11638 = x11636 + x11637;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11639 = x11044 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11640 = x11638 + x11639;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11641 = x11045 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11642 = x11640 + x11641;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11643 = x11046 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11644 = x11642 + x11643;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11645 = x11047 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11646 = x11644 + x11645;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11647 = x11048 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11648 = x11646 + x11647;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11649 = x11049 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11650 = x11648 + x11649;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11651 = x11050 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11652 = x11650 + x11651;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11653 = x11051 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11654 = x11652 + x11653;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11655 = x11052 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11656 = x11654 + x11655;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11657 = x11053 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11658 = x11656 + x11657;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11659 = x11054 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11660 = x11658 + x11659;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11661 = x11055 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11662 = x11660 + x11661;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11663 = x11056 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11664 = x11662 + x11663;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11665 = x10929 * x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11666 = x102 - x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11667 = x11666 * x10993;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11668 = x11665 + x11667;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11669 = x10930 * x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11670 = x102 - x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11671 = x11670 * x10994;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11672 = x11669 + x11671;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11673 = x10931 * x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11674 = x102 - x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11675 = x11674 * x10995;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11676 = x11673 + x11675;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11677 = x10932 * x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11678 = x102 - x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11679 = x11678 * x10996;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11680 = x11677 + x11679;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11681 = x10933 * x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11682 = x102 - x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11683 = x11682 * x10997;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11684 = x11681 + x11683;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11685 = x10934 * x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11686 = x102 - x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11687 = x11686 * x10998;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11688 = x11685 + x11687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11689 = x10935 * x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11690 = x102 - x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11691 = x11690 * x10999;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11692 = x11689 + x11691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11693 = x10936 * x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11694 = x102 - x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11695 = x11694 * x11000;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11696 = x11693 + x11695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11697 = x10937 * x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11698 = x102 - x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11699 = x11698 * x11001;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11700 = x11697 + x11699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11701 = x10938 * x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11702 = x102 - x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11703 = x11702 * x11002;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11704 = x11701 + x11703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11705 = x10939 * x10971;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11706 = x102 - x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11707 = x11706 * x11003;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11708 = x11705 + x11707;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11709 = x10940 * x10972;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11710 = x102 - x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11711 = x11710 * x11004;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11712 = x11709 + x11711;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11713 = x10941 * x10973;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11714 = x102 - x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11715 = x11714 * x11005;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11716 = x11713 + x11715;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11717 = x10942 * x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11718 = x102 - x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11719 = x11718 * x11006;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11720 = x11717 + x11719;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11721 = x10943 * x10975;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11722 = x102 - x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11723 = x11722 * x11007;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11724 = x11721 + x11723;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11725 = x10944 * x10976;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11726 = x102 - x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11727 = x11726 * x11008;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11728 = x11725 + x11727;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11729 = x10945 * x10977;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11730 = x102 - x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11731 = x11730 * x11009;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11732 = x11729 + x11731;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11733 = x10946 * x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11734 = x102 - x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11735 = x11734 * x11010;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11736 = x11733 + x11735;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11737 = x10947 * x10979;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11738 = x102 - x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11739 = x11738 * x11011;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11740 = x11737 + x11739;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11741 = x10948 * x10980;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11742 = x102 - x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11743 = x11742 * x11012;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11744 = x11741 + x11743;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11745 = x10949 * x10981;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11746 = x102 - x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11747 = x11746 * x11013;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11748 = x11745 + x11747;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11749 = x10950 * x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11750 = x102 - x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11751 = x11750 * x11014;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11752 = x11749 + x11751;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11753 = x10951 * x10983;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11754 = x102 - x10951;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11755 = x11754 * x11015;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11756 = x11753 + x11755;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11757 = x10952 * x10984;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11758 = x102 - x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11759 = x11758 * x11016;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11760 = x11757 + x11759;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11761 = x10953 * x10985;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11762 = x102 - x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11763 = x11762 * x11017;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11764 = x11761 + x11763;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11765 = x10954 * x10986;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11766 = x102 - x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11767 = x11766 * x11018;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11768 = x11765 + x11767;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11769 = x10955 * x10987;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11770 = x102 - x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11771 = x11770 * x11019;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11772 = x11769 + x11771;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11773 = x10956 * x10988;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11774 = x102 - x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11775 = x11774 * x11020;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11776 = x11773 + x11775;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11777 = x10957 * x10989;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11778 = x102 - x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11779 = x11778 * x11021;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11780 = x11777 + x11779;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11781 = x10958 * x10990;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11782 = x102 - x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11783 = x11782 * x11022;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11784 = x11781 + x11783;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11785 = x10959 * x10991;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11786 = x102 - x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11787 = x11786 * x11023;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11788 = x11785 + x11787;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11789 = x10960 * x10992;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11790 = x102 - x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11791 = x11790 * x11024;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11792 = x11789 + x11791;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11793 = x11672 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11794 = x11668 + x11793;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11795 = x11676 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11796 = x11794 + x11795;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11797 = x11680 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11798 = x11796 + x11797;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11799 = x11684 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11800 = x11798 + x11799;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11801 = x11688 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11802 = x11800 + x11801;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11803 = x11692 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11804 = x11802 + x11803;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11805 = x11696 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11806 = x11804 + x11805;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11807 = x11700 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11808 = x11806 + x11807;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11809 = x11704 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11810 = x11808 + x11809;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11811 = x11708 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11812 = x11810 + x11811;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11813 = x11712 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11814 = x11812 + x11813;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11815 = x11716 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11816 = x11814 + x11815;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11817 = x11720 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11818 = x11816 + x11817;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11819 = x11724 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11820 = x11818 + x11819;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11821 = x11728 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11822 = x11820 + x11821;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11823 = x11736 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11824 = x11732 + x11823;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11825 = x11740 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11826 = x11824 + x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11827 = x11744 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11828 = x11826 + x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11829 = x11748 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11830 = x11828 + x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11831 = x11752 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11832 = x11830 + x11831;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11833 = x11756 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11834 = x11832 + x11833;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11835 = x11760 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11836 = x11834 + x11835;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11837 = x11764 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11838 = x11836 + x11837;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11839 = x11768 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11840 = x11838 + x11839;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11841 = x11772 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11842 = x11840 + x11841;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11843 = x11776 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11844 = x11842 + x11843;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11845 = x11780 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11846 = x11844 + x11845;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11847 = x11784 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11848 = x11846 + x11847;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11849 = x11788 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11850 = x11848 + x11849;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11851 = x11792 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11852 = x11850 + x11851;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11853 = x11454 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11854 = x11451 + x11853;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11855 = x11457 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11856 = x11854 + x11855;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11857 = x11460 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11858 = x11856 + x11857;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11859 = x11463 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11860 = x11858 + x11859;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11861 = x11466 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11862 = x11860 + x11861;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11863 = x11469 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11864 = x11862 + x11863;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11865 = x11472 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11866 = x11864 + x11865;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11867 = x11475 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11868 = x11866 + x11867;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11869 = x11478 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11870 = x11868 + x11869;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11871 = x11481 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11872 = x11870 + x11871;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11873 = x11484 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11874 = x11872 + x11873;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11875 = x11487 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11876 = x11874 + x11875;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11877 = x11490 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11878 = x11876 + x11877;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11879 = x11493 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11880 = x11878 + x11879;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11881 = x11496 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11882 = x11880 + x11881;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11883 = x11502 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11884 = x11499 + x11883;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11885 = x11505 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11886 = x11884 + x11885;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11887 = x11508 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11888 = x11886 + x11887;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11889 = x11511 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11890 = x11888 + x11889;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11891 = x11514 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11892 = x11890 + x11891;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11893 = x11517 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11894 = x11892 + x11893;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11895 = x11520 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11896 = x11894 + x11895;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11897 = x11523 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11898 = x11896 + x11897;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11899 = x11526 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11900 = x11898 + x11899;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11901 = x11529 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11902 = x11900 + x11901;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11903 = x11532 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11904 = x11902 + x11903;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11905 = x11535 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11906 = x11904 + x11905;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11907 = x11538 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11908 = x11906 + x11907;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11909 = x11541 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11910 = x11908 + x11909;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11911 = x11544 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11912 = x11910 + x11911;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11913 = x11822 + x11882;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11914 = x11852 + x11912;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11915 = x11634 + x11913;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11916 = x11664 + x11914;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11917 = x11094 + x11915;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11918 = x11096 + x11916;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11919 = x11574 + x11917;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11920 = x11604 + x11918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11921 = x10801 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11922 = x102 - x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11923 = x11921 * x11922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11924 = x102 - x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11925 = x10801 * x11924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11926 = x11925 * x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11927 = x11923 + x11926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11928 = x102 - x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11929 = x11928 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11930 = x11929 * x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11931 = x11927 + x11930;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11932 = x11921 * x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11933 = x11931 + x11932;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11934 = x10802 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11935 = x102 - x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11936 = x11934 * x11935;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11937 = x102 - x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11938 = x10802 * x11937;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11939 = x11938 * x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11940 = x11936 + x11939;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11941 = x102 - x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11942 = x11941 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11943 = x11942 * x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11944 = x11940 + x11943;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11945 = x11934 * x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11946 = x11944 + x11945;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11947 = x10803 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11948 = x102 - x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11949 = x11947 * x11948;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11950 = x102 - x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11951 = x10803 * x11950;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11952 = x11951 * x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11953 = x11949 + x11952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11954 = x102 - x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11955 = x11954 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11956 = x11955 * x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11957 = x11953 + x11956;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11958 = x11947 * x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11959 = x11957 + x11958;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11960 = x10804 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11961 = x102 - x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11962 = x11960 * x11961;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11963 = x102 - x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11964 = x10804 * x11963;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11965 = x11964 * x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11966 = x11962 + x11965;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11967 = x102 - x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11968 = x11967 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11969 = x11968 * x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11970 = x11966 + x11969;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11971 = x11960 * x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11972 = x11970 + x11971;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11973 = x10805 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11974 = x102 - x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11975 = x11973 * x11974;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11976 = x102 - x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11977 = x10805 * x11976;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11978 = x11977 * x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11979 = x11975 + x11978;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11980 = x102 - x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11981 = x11980 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11982 = x11981 * x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11983 = x11979 + x11982;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11984 = x11973 * x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11985 = x11983 + x11984;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11986 = x10806 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11987 = x102 - x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11988 = x11986 * x11987;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11989 = x102 - x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11990 = x10806 * x11989;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11991 = x11990 * x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11992 = x11988 + x11991;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11993 = x102 - x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11994 = x11993 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11995 = x11994 * x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11996 = x11992 + x11995;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11997 = x11986 * x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11998 = x11996 + x11997;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11999 = x10807 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12000 = x102 - x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12001 = x11999 * x12000;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12002 = x102 - x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12003 = x10807 * x12002;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12004 = x12003 * x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12005 = x12001 + x12004;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12006 = x102 - x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12007 = x12006 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12008 = x12007 * x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12009 = x12005 + x12008;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12010 = x11999 * x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12011 = x12009 + x12010;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12012 = x10808 * x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12013 = x102 - x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12014 = x12012 * x12013;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12015 = x102 - x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12016 = x10808 * x12015;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12017 = x12016 * x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12018 = x12014 + x12017;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12019 = x102 - x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12020 = x12019 * x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12021 = x12020 * x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12022 = x12018 + x12021;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12023 = x12012 * x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12024 = x12022 + x12023;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12025 = x10809 * x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12026 = x102 - x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12027 = x12025 * x12026;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12028 = x102 - x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12029 = x10809 * x12028;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12030 = x12029 * x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12031 = x12027 + x12030;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12032 = x102 - x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12033 = x12032 * x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12034 = x12033 * x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12035 = x12031 + x12034;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12036 = x12025 * x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12037 = x12035 + x12036;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12038 = x10810 * x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12039 = x102 - x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12040 = x12038 * x12039;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12041 = x102 - x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12042 = x10810 * x12041;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12043 = x12042 * x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12044 = x12040 + x12043;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12045 = x102 - x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12046 = x12045 * x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12047 = x12046 * x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12048 = x12044 + x12047;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12049 = x12038 * x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12050 = x12048 + x12049;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12051 = x10811 * x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12052 = x102 - x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12053 = x12051 * x12052;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12054 = x102 - x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12055 = x10811 * x12054;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12056 = x12055 * x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12057 = x12053 + x12056;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12058 = x102 - x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12059 = x12058 * x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12060 = x12059 * x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12061 = x12057 + x12060;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12062 = x12051 * x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12063 = x12061 + x12062;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12064 = x10812 * x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12065 = x102 - x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12066 = x12064 * x12065;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12067 = x102 - x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12068 = x10812 * x12067;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12069 = x12068 * x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12070 = x12066 + x12069;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12071 = x102 - x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12072 = x12071 * x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12073 = x12072 * x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12074 = x12070 + x12073;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12075 = x12064 * x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12076 = x12074 + x12075;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12077 = x10813 * x10845;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12078 = x102 - x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12079 = x12077 * x12078;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12080 = x102 - x10845;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12081 = x10813 * x12080;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12082 = x12081 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12083 = x12079 + x12082;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12084 = x102 - x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12085 = x12084 * x10845;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12086 = x12085 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12087 = x12083 + x12086;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12088 = x12077 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12089 = x12087 + x12088;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12090 = x10814 * x10846;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12091 = x102 - x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12092 = x12090 * x12091;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12093 = x102 - x10846;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12094 = x10814 * x12093;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12095 = x12094 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12096 = x12092 + x12095;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12097 = x102 - x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12098 = x12097 * x10846;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12099 = x12098 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12100 = x12096 + x12099;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12101 = x12090 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12102 = x12100 + x12101;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12103 = x10815 * x10847;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12104 = x102 - x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12105 = x12103 * x12104;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12106 = x102 - x10847;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12107 = x10815 * x12106;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12108 = x12107 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12109 = x12105 + x12108;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12110 = x102 - x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12111 = x12110 * x10847;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12112 = x12111 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12113 = x12109 + x12112;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12114 = x12103 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12115 = x12113 + x12114;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12116 = x10816 * x10848;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12117 = x102 - x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12118 = x12116 * x12117;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12119 = x102 - x10848;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12120 = x10816 * x12119;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12121 = x12120 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12122 = x12118 + x12121;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12123 = x102 - x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12124 = x12123 * x10848;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12125 = x12124 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12126 = x12122 + x12125;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12127 = x12116 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12128 = x12126 + x12127;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12129 = x10817 * x10849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12130 = x102 - x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12131 = x12129 * x12130;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12132 = x102 - x10849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12133 = x10817 * x12132;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12134 = x12133 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12135 = x12131 + x12134;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12136 = x102 - x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12137 = x12136 * x10849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12138 = x12137 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12139 = x12135 + x12138;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12140 = x12129 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12141 = x12139 + x12140;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12142 = x10818 * x10850;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12143 = x102 - x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12144 = x12142 * x12143;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12145 = x102 - x10850;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12146 = x10818 * x12145;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12147 = x12146 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12148 = x12144 + x12147;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12149 = x102 - x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12150 = x12149 * x10850;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12151 = x12150 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12152 = x12148 + x12151;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12153 = x12142 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12154 = x12152 + x12153;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12155 = x10819 * x10851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12156 = x102 - x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12157 = x12155 * x12156;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12158 = x102 - x10851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12159 = x10819 * x12158;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12160 = x12159 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12161 = x12157 + x12160;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12162 = x102 - x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12163 = x12162 * x10851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12164 = x12163 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12165 = x12161 + x12164;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12166 = x12155 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12167 = x12165 + x12166;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12168 = x10820 * x10852;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12169 = x102 - x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12170 = x12168 * x12169;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12171 = x102 - x10852;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12172 = x10820 * x12171;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12173 = x12172 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12174 = x12170 + x12173;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12175 = x102 - x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12176 = x12175 * x10852;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12177 = x12176 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12178 = x12174 + x12177;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12179 = x12168 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12180 = x12178 + x12179;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12181 = x10821 * x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12182 = x102 - x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12183 = x12181 * x12182;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12184 = x102 - x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12185 = x10821 * x12184;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12186 = x12185 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12187 = x12183 + x12186;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12188 = x102 - x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12189 = x12188 * x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12190 = x12189 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12191 = x12187 + x12190;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12192 = x12181 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12193 = x12191 + x12192;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12194 = x10822 * x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12195 = x102 - x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12196 = x12194 * x12195;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12197 = x102 - x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12198 = x10822 * x12197;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12199 = x12198 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12200 = x12196 + x12199;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12201 = x102 - x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12202 = x12201 * x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12203 = x12202 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12204 = x12200 + x12203;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12205 = x12194 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12206 = x12204 + x12205;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12207 = x10823 * x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12208 = x102 - x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12209 = x12207 * x12208;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12210 = x102 - x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12211 = x10823 * x12210;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12212 = x12211 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12213 = x12209 + x12212;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12214 = x102 - x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12215 = x12214 * x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12216 = x12215 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12217 = x12213 + x12216;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12218 = x12207 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12219 = x12217 + x12218;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12220 = x10824 * x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12221 = x102 - x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12222 = x12220 * x12221;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12223 = x102 - x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12224 = x10824 * x12223;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12225 = x12224 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12226 = x12222 + x12225;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12227 = x102 - x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12228 = x12227 * x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12229 = x12228 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12230 = x12226 + x12229;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12231 = x12220 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12232 = x12230 + x12231;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12233 = x10825 * x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12234 = x102 - x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12235 = x12233 * x12234;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12236 = x102 - x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12237 = x10825 * x12236;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12238 = x12237 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12239 = x12235 + x12238;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12240 = x102 - x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12241 = x12240 * x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12242 = x12241 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12243 = x12239 + x12242;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12244 = x12233 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12245 = x12243 + x12244;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12246 = x10826 * x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12247 = x102 - x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12248 = x12246 * x12247;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12249 = x102 - x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12250 = x10826 * x12249;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12251 = x12250 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12252 = x12248 + x12251;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12253 = x102 - x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12254 = x12253 * x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12255 = x12254 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12256 = x12252 + x12255;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12257 = x12246 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12258 = x12256 + x12257;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12259 = x10827 * x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12260 = x102 - x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12261 = x12259 * x12260;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12262 = x102 - x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12263 = x10827 * x12262;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12264 = x12263 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12265 = x12261 + x12264;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12266 = x102 - x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12267 = x12266 * x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12268 = x12267 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12269 = x12265 + x12268;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12270 = x12259 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12271 = x12269 + x12270;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12272 = x10828 * x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12273 = x102 - x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12274 = x12272 * x12273;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12275 = x102 - x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12276 = x10828 * x12275;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12277 = x12276 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12278 = x12274 + x12277;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12279 = x102 - x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12280 = x12279 * x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12281 = x12280 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12282 = x12278 + x12281;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12283 = x12272 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12284 = x12282 + x12283;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12285 = x10829 * x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12286 = x102 - x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12287 = x12285 * x12286;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12288 = x102 - x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12289 = x10829 * x12288;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12290 = x12289 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12291 = x12287 + x12290;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12292 = x102 - x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12293 = x12292 * x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12294 = x12293 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12295 = x12291 + x12294;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12296 = x12285 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12297 = x12295 + x12296;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12298 = x10830 * x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12299 = x102 - x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12300 = x12298 * x12299;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12301 = x102 - x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12302 = x10830 * x12301;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12303 = x12302 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12304 = x12300 + x12303;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12305 = x102 - x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12306 = x12305 * x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12307 = x12306 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12308 = x12304 + x12307;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12309 = x12298 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12310 = x12308 + x12309;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12311 = x10831 * x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12312 = x102 - x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12313 = x12311 * x12312;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12314 = x102 - x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12315 = x10831 * x12314;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12316 = x12315 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12317 = x12313 + x12316;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12318 = x102 - x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12319 = x12318 * x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12320 = x12319 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12321 = x12317 + x12320;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12322 = x12311 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12323 = x12321 + x12322;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12324 = x10832 * x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12325 = x102 - x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12326 = x12324 * x12325;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12327 = x102 - x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12328 = x10832 * x12327;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12329 = x12328 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12330 = x12326 + x12329;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12331 = x102 - x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12332 = x12331 * x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12333 = x12332 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12334 = x12330 + x12333;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12335 = x12324 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12336 = x12334 + x12335;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12337 = x11946 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12338 = x11933 + x12337;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12339 = x11959 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12340 = x12338 + x12339;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12341 = x11972 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12342 = x12340 + x12341;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12343 = x11985 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12344 = x12342 + x12343;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12345 = x11998 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12346 = x12344 + x12345;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12347 = x12011 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12348 = x12346 + x12347;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12349 = x12024 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12350 = x12348 + x12349;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12351 = x12037 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12352 = x12350 + x12351;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12353 = x12050 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12354 = x12352 + x12353;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12355 = x12063 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12356 = x12354 + x12355;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12357 = x12076 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12358 = x12356 + x12357;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12359 = x12089 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12360 = x12358 + x12359;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12361 = x12102 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12362 = x12360 + x12361;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12363 = x12115 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12364 = x12362 + x12363;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12365 = x12128 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12366 = x12364 + x12365;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12367 = x12154 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12368 = x12141 + x12367;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12369 = x12167 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12370 = x12368 + x12369;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12371 = x12180 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12372 = x12370 + x12371;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12373 = x12193 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12374 = x12372 + x12373;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12375 = x12206 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12376 = x12374 + x12375;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12377 = x12219 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12378 = x12376 + x12377;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12379 = x12232 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12380 = x12378 + x12379;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12381 = x12245 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12382 = x12380 + x12381;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12383 = x12258 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12384 = x12382 + x12383;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12385 = x12271 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12386 = x12384 + x12385;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12387 = x12284 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12388 = x12386 + x12387;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12389 = x12297 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12390 = x12388 + x12389;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12391 = x12310 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12392 = x12390 + x12391;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12393 = x12323 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12394 = x12392 + x12393;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12395 = x12336 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12396 = x12394 + x12395;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12397 = x11230 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12398 = x11227 + x12397;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12399 = x11233 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12400 = x12398 + x12399;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12401 = x11236 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12402 = x12400 + x12401;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12403 = x11239 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12404 = x12402 + x12403;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12405 = x11242 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12406 = x12404 + x12405;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12407 = x11245 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12408 = x12406 + x12407;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12409 = x11248 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12410 = x12408 + x12409;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12411 = x11251 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12412 = x12410 + x12411;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12413 = x11254 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12414 = x12412 + x12413;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12415 = x11257 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12416 = x12414 + x12415;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12417 = x11260 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12418 = x12416 + x12417;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12419 = x11263 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12420 = x12418 + x12419;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12421 = x11266 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12422 = x12420 + x12421;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12423 = x11269 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12424 = x12422 + x12423;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12425 = x11272 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12426 = x12424 + x12425;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12427 = x11278 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12428 = x11275 + x12427;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12429 = x11281 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12430 = x12428 + x12429;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12431 = x11284 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12432 = x12430 + x12431;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12433 = x11287 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12434 = x12432 + x12433;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12435 = x11290 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12436 = x12434 + x12435;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12437 = x11293 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12438 = x12436 + x12437;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12439 = x11296 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12440 = x12438 + x12439;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12441 = x11299 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12442 = x12440 + x12441;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12443 = x11302 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12444 = x12442 + x12443;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12445 = x11305 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12446 = x12444 + x12445;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12447 = x11308 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12448 = x12446 + x12447;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12449 = x11311 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12450 = x12448 + x12449;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12451 = x11314 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12452 = x12450 + x12451;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12453 = x11317 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12454 = x12452 + x12453;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12455 = x11320 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12456 = x12454 + x12455;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12457 = x12366 + x12426;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12458 = x12396 + x12456;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12459 = x11919 + x12457;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12460 = x11920 + x12458;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12461 = x10898 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12462 = x10897 + x12461;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12463 = x10899 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12464 = x12462 + x12463;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12465 = x10900 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12466 = x12464 + x12465;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12467 = x10901 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12468 = x12466 + x12467;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12469 = x10902 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12470 = x12468 + x12469;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12471 = x10903 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12472 = x12470 + x12471;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12473 = x10904 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12474 = x12472 + x12473;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12475 = x10905 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12476 = x12474 + x12475;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12477 = x10906 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12478 = x12476 + x12477;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12479 = x10907 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12480 = x12478 + x12479;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12481 = x10908 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12482 = x12480 + x12481;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12483 = x10909 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12484 = x12482 + x12483;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12485 = x10910 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12486 = x12484 + x12485;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12487 = x10911 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12488 = x12486 + x12487;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12489 = x10912 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12490 = x12488 + x12489;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12491 = x10914 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12492 = x10913 + x12491;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12493 = x10915 * x84;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12494 = x12492 + x12493;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12495 = x10916 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12496 = x12494 + x12495;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12497 = x10917 * x65;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12498 = x12496 + x12497;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12499 = x10918 * x67;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12500 = x12498 + x12499;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12501 = x10919 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12502 = x12500 + x12501;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12503 = x10920 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12504 = x12502 + x12503;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12505 = x10921 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12506 = x12504 + x12505;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12507 = x10922 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12508 = x12506 + x12507;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12509 = x10923 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12510 = x12508 + x12509;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12511 = x10924 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12512 = x12510 + x12511;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12513 = x10925 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12514 = x12512 + x12513;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12515 = x10926 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12516 = x12514 + x12515;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12517 = x10927 * x42;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12518 = x12516 + x12517;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12519 = x10928 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12520 = x12518 + x12519;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12521 = x11919 + x12490;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12522 = x11920 + x12520;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12459);
        reg = x12459;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12521);
        reg = x12521;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12460);
        reg = x12460;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][148 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12522);
        reg = x12522;
      }
      if (x8554 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12523 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x12523 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12524 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x12524 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12525 = Fp(x12523.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12525);
            reg = x12525;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12526 = Fp(x12523.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12527 = x12526 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12527);
            reg = x12527;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12528 = Fp(x12523.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12529 = x12528 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12529);
            reg = x12529;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12530 = Fp(x12523.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12531 = x12530 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12531);
            reg = x12531;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12532 = Fp(x12523.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12533 = x12532 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12533);
            reg = x12533;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12534 = Fp(x12523.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12535 = x12534 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12535);
            reg = x12535;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12536 = Fp(x12523.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12537 = x12536 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12537);
            reg = x12537;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12538 = Fp(x12523.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12539 = x12538 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12539);
            reg = x12539;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12540 = Fp(x12523.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12541 = x12540 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12541);
            reg = x12541;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12542 = Fp(x12523.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12543 = x12542 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12543);
            reg = x12543;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12544 = Fp(x12523.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12545 = x12544 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12545);
            reg = x12545;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12546 = Fp(x12523.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12547 = x12546 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12547);
            reg = x12547;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12548 = Fp(x12523.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12549 = x12548 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12549);
            reg = x12549;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12550 = Fp(x12523.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12551 = x12550 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12551);
            reg = x12551;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12552 = Fp(x12523.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12553 = x12552 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12553);
            reg = x12553;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12554 = Fp(x12523.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12555 = x12554 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12555);
            reg = x12555;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12556 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x12556 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12557 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x12557 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12558 = x12557 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12559 = x12556 + x12558;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12560 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12560 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12561 = x12560 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12562 = x12559 + x12561;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12563 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12563 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12564 = x12563 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12565 = x12562 + x12564;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12566 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x12566 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12567 = x12566 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12568 = x12565 + x12567;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12569 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x12569 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12570 = x12569 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12571 = x12568 + x12570;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12572 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x12572 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12573 = x12572 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12574 = x12571 + x12573;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12575 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x12575 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12576 = x12575 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12577 = x12574 + x12576;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12578 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12578 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12579 = x12578 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12580 = x12577 + x12579;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12581 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12581 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12582 = x12581 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12583 = x12580 + x12582;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12584 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12584 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12585 = x12584 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12586 = x12583 + x12585;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12587 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12587 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12588 = x12587 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12589 = x12586 + x12588;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12590 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12590 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12591 = x12590 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12592 = x12589 + x12591;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12593 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12593 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12594 = x12593 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12595 = x12592 + x12594;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12596 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12596 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12597 = x12596 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12598 = x12595 + x12597;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12599 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12599 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12600 = x12599 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12601 = x12598 + x12600;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12602 = x12523 - x12601;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12603 = x12602 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12604 = Fp(x12603.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12604);
            reg = x12604;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12605 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x12605 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12606 = x12603 - x12605;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12607 = x12606 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12608 = x102 - x12607;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12609 = x12607 * x12608;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12609 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12610 = x12524 + x12603;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12611 = Fp(x12610.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12611);
            reg = x12611;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12612 = Fp(x12610.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12613 = x12612 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12613);
            reg = x12613;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12614 = Fp(x12610.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12615 = x12614 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12615);
            reg = x12615;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12616 = Fp(x12610.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12617 = x12616 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12617);
            reg = x12617;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12618 = Fp(x12610.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12619 = x12618 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12619);
            reg = x12619;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12620 = Fp(x12610.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12621 = x12620 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12621);
            reg = x12621;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12622 = Fp(x12610.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12623 = x12622 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12623);
            reg = x12623;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12624 = Fp(x12610.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12625 = x12624 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12625);
            reg = x12625;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12626 = Fp(x12610.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12627 = x12626 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12627);
            reg = x12627;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12628 = Fp(x12610.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12629 = x12628 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12629);
            reg = x12629;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12630 = Fp(x12610.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12631 = x12630 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12631);
            reg = x12631;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12632 = Fp(x12610.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12633 = x12632 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12633);
            reg = x12633;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12634 = Fp(x12610.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12635 = x12634 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12635);
            reg = x12635;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12636 = Fp(x12610.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12637 = x12636 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12637);
            reg = x12637;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12638 = Fp(x12610.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12639 = x12638 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12639);
            reg = x12639;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12640 = Fp(x12610.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12641 = x12640 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12641);
            reg = x12641;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12642 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12642 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12643 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12643 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12644 = x12643 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12645 = x12642 + x12644;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12646 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12646 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12647 = x12646 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12648 = x12645 + x12647;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12649 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12649 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12650 = x12649 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12651 = x12648 + x12650;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12652 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12652 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12653 = x12652 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12654 = x12651 + x12653;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12655 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12655 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12656 = x12655 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12657 = x12654 + x12656;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12658 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12658 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12659 = x12658 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12660 = x12657 + x12659;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12661 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12661 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12662 = x12661 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12663 = x12660 + x12662;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12664 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x12664 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12665 = x12664 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12666 = x12663 + x12665;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12667 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x12667 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12668 = x12667 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12669 = x12666 + x12668;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12670 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12670 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12671 = x12670 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12672 = x12669 + x12671;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12673 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x12673 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12674 = x12673 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12675 = x12672 + x12674;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12676 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x12676 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12677 = x12676 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12678 = x12675 + x12677;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12679 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x12679 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12680 = x12679 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12681 = x12678 + x12680;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12682 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x12682 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12683 = x12682 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12684 = x12681 + x12683;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12685 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x12685 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12686 = x12685 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12687 = x12684 + x12686;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12688 = x12610 - x12687;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12689 = x12688 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12690 = Fp(x12689.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12690);
            reg = x12690;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12691 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x12691 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12692 = x12689 - x12691;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12693 = x12692 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12694 = x102 - x12693;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12695 = x12693 * x12694;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12695 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12696 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x12696 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12697 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x12697 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12698 = Fp(x12696.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12698);
            reg = x12698;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12699 = Fp(x12696.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12700 = x12699 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12700);
            reg = x12700;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12701 = Fp(x12696.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12702 = x12701 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12702);
            reg = x12702;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12703 = Fp(x12696.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12704 = x12703 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12704);
            reg = x12704;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12705 = Fp(x12696.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12706 = x12705 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12706);
            reg = x12706;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12707 = Fp(x12696.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12708 = x12707 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12708);
            reg = x12708;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12709 = Fp(x12696.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12710 = x12709 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12710);
            reg = x12710;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12711 = Fp(x12696.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12712 = x12711 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12712);
            reg = x12712;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12713 = Fp(x12696.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12714 = x12713 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12714);
            reg = x12714;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12715 = Fp(x12696.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12716 = x12715 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12716);
            reg = x12716;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12717 = Fp(x12696.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12718 = x12717 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12718);
            reg = x12718;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12719 = Fp(x12696.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12720 = x12719 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12720);
            reg = x12720;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12721 = Fp(x12696.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12722 = x12721 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12722);
            reg = x12722;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12723 = Fp(x12696.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12724 = x12723 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12724);
            reg = x12724;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12725 = Fp(x12696.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12726 = x12725 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12726);
            reg = x12726;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12727 = Fp(x12696.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12728 = x12727 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12728);
            reg = x12728;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12729 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x12729 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12730 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x12730 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12731 = x12730 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12732 = x12729 + x12731;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12733 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x12733 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12734 = x12733 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12735 = x12732 + x12734;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12736 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x12736 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12737 = x12736 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12738 = x12735 + x12737;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12739 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x12739 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12740 = x12739 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12741 = x12738 + x12740;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12742 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x12742 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12743 = x12742 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12744 = x12741 + x12743;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12745 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x12745 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12746 = x12745 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12747 = x12744 + x12746;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12748 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x12748 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12749 = x12748 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12750 = x12747 + x12749;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12751 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x12751 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12752 = x12751 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12753 = x12750 + x12752;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12754 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x12754 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12755 = x12754 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12756 = x12753 + x12755;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12757 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x12757 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12758 = x12757 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12759 = x12756 + x12758;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12760 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x12760 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12761 = x12760 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12762 = x12759 + x12761;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12763 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x12763 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12764 = x12763 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12765 = x12762 + x12764;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12766 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x12766 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12767 = x12766 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12768 = x12765 + x12767;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12769 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x12769 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12770 = x12769 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12771 = x12768 + x12770;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12772 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x12772 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12773 = x12772 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12774 = x12771 + x12773;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12775 = x12696 - x12774;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12776 = x12775 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12777 = Fp(x12776.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12777);
            reg = x12777;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12778 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x12778 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12779 = x12776 - x12778;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12780 = x12779 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12781 = x102 - x12780;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12782 = x12780 * x12781;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12782 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12783 = x12697 + x12776;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12784 = Fp(x12783.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12784);
            reg = x12784;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12785 = Fp(x12783.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12786 = x12785 * x62;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12786);
            reg = x12786;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12787 = Fp(x12783.asUInt32() & x84.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12788 = x12787 * x82;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12788);
            reg = x12788;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12789 = Fp(x12783.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12790 = x12789 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12790);
            reg = x12790;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12791 = Fp(x12783.asUInt32() & x65.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12792 = x12791 * x64;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12792);
            reg = x12792;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12793 = Fp(x12783.asUInt32() & x67.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12794 = x12793 * x66;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12794);
            reg = x12794;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12795 = Fp(x12783.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12796 = x12795 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12796);
            reg = x12796;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12797 = Fp(x12783.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12798 = x12797 * x69;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12798);
            reg = x12798;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12799 = Fp(x12783.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12800 = x12799 * x96;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12800);
            reg = x12800;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12801 = Fp(x12783.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12802 = x12801 * x27;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12802);
            reg = x12802;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12803 = Fp(x12783.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12804 = x12803 * x26;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12804);
            reg = x12804;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12805 = Fp(x12783.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12806 = x12805 * x24;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12806);
            reg = x12806;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12807 = Fp(x12783.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12808 = x12807 * x22;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12808);
            reg = x12808;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12809 = Fp(x12783.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12810 = x12809 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12810);
            reg = x12810;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12811 = Fp(x12783.asUInt32() & x42.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12812 = x12811 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12812);
            reg = x12812;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12813 = Fp(x12783.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12814 = x12813 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12814);
            reg = x12814;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12815 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x12815 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12816 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x12816 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12817 = x12816 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12818 = x12815 + x12817;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12819 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x12819 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12820 = x12819 * x84;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12821 = x12818 + x12820;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12822 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x12822 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12823 = x12822 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12824 = x12821 + x12823;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12825 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x12825 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12826 = x12825 * x65;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12827 = x12824 + x12826;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12828 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x12828 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12829 = x12828 * x67;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12830 = x12827 + x12829;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12831 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x12831 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12832 = x12831 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12833 = x12830 + x12832;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12834 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x12834 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12835 = x12834 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12836 = x12833 + x12835;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12837 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x12837 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12838 = x12837 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12839 = x12836 + x12838;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12840 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x12840 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12841 = x12840 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12842 = x12839 + x12841;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12843 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x12843 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12844 = x12843 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12845 = x12842 + x12844;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12846 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x12846 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12847 = x12846 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12848 = x12845 + x12847;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12849 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x12849 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12850 = x12849 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12851 = x12848 + x12850;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12852 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x12852 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12853 = x12852 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12854 = x12851 + x12853;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12855 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x12855 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12856 = x12855 * x42;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12857 = x12854 + x12856;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12858 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x12858 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12859 = x12858 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12860 = x12857 + x12859;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12861 = x12783 - x12860;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12862 = x12861 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12863 = Fp(x12862.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12863);
            reg = x12863;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12864 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x12864 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12865 = x12862 - x12864;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12866 = x12865 * x82;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12867 = x102 - x12866;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12868 = x12866 * x12867;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12868 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12869 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x12869 != Fp::invalid());
      if (x12869 != 0) {
        if (x8561 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":430:38))
          auto x12870 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12870 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":430:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12870);
            reg = x12870;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":431:38))
          auto x12871 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x12871 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":431:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12871);
            reg = x12871;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":432:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        if (x8562 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":436:51))
          auto x12872 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12872 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":436:51)
          auto x12873 = x12872 + x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":436:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12873);
            reg = x12873;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":437:51))
          auto x12874 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x12874 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":437:51)
          auto x12875 = x12874 + x65;
          // loc("cirgen/circuit/rv32im/sha.cpp":437:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12875);
            reg = x12875;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":438:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x75);
            reg = x75;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":441:27)
      auto x12876 = x102 - x12869;
      if (x12876 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":442:36))
        auto x12877 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12877 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":442:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12877);
          reg = x12877;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":443:36))
        auto x12878 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x12878 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":443:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12878);
          reg = x12878;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":444:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/components/mux.h":39:25))
    auto x12879 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x12879 != Fp::invalid());
    if (x12879 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12880 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x12880 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":257:41)
      auto x12881 = x605 * x82;
      {
        host_args.at(0) = x12881;
        host_args.at(1) = x102;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x12882 = host_outs.at(0);
        auto x12883 = host_outs.at(1);
        auto x12884 = host_outs.at(2);
        auto x12885 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12882);
          reg = x12882;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12883);
          reg = x12883;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12884);
          reg = x12884;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12885);
          reg = x12885;
        }
      }
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12886 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x12886 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12887 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x12887 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12888 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x12888 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12889 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x12889 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12881);
        reg = x12881;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12880);
        reg = x12880;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12886);
        reg = x12886;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12887);
        reg = x12887;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12888);
        reg = x12888;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12889);
        reg = x12889;
      }
      // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":259:70))
      auto x12890 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x12890 != Fp::invalid());
      if (x12890 != 0) {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12891 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12891 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12892 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12892 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12893 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x12893 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12894 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x12894 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x12895 = x12892 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12896 = x12891 + x12895;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12897 = x12893 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12898 = x12896 + x12897;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12899 = x12894 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12900 = x12898 + x12899;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":265:27)
        auto x12901 = x12900 * x82;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":265:5)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12901);
          reg = x12901;
        }
        {
          host_args.at(0) = x31;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x12902 = host_outs.at(0);
          auto x12903 = host_outs.at(1);
          auto x12904 = host_outs.at(2);
          auto x12905 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12902);
            reg = x12902;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12903);
            reg = x12903;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12904);
            reg = x12904;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12905);
            reg = x12905;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12906 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x12906 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12907 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x12907 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12908 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x12908 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12909 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x12909 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x31);
          reg = x31;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12906);
          reg = x12906;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12907);
          reg = x12907;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12908);
          reg = x12908;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12909);
          reg = x12909;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x12910 = x12907 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12911 = x12906 + x12910;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12912 = x12908 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12913 = x12911 + x12912;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12914 = x12909 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12915 = x12913 + x12914;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":268:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12915);
          reg = x12915;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/8/Mux/4/Reg"("cirgen/circuit/rv32im/ffpu.cpp":272:50))
        auto x12916 = args[2][182 * steps + ((cycle - 1) & mask)];
        assert(x12916 != Fp::invalid());
        host_args.at(0) = x12916;
        host(ctx, "log", "origPc: %u", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":274:24)
        auto x12917 = x12916 + x84;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":274:5)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12917);
          reg = x12917;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12918 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12918 != Fp::invalid());
        host_args.at(0) = x12900;
        host_args.at(1) = x12918;
        host_args.at(2) = x12916;
        host(ctx, "log", "FFPU INIT, baseAddr = %u, haltPos = %u, origPc = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":283:5)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":284:5)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        {
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12919 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12919 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12920 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12920 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12921 = x12920 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12922 = x12919 + x12921;
        // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12923 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12923 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12924 = x12923 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12925 = x12922 + x12924;
        // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12926 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12926 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12927 = x12926 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12928 = x12925 + x12927;
        // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12929 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12929 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12930 = x12929 * x80;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12931 = x12928 + x12930;
        // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12932 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12932 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12933 = x12932 * x79;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12934 = x12931 + x12933;
        // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12935 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12935 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x12936 = x12935 * x78;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x12937 = x12934 + x12936;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x12937 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":289:22)
      auto x12938 = x102 - x12890;
      if (x12938 != 0) {
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":291:58))
        auto x12939 = args[2][176 * steps + ((cycle - 1) & mask)];
        assert(x12939 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":291:5)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12939);
          reg = x12939;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":292:40))
        auto x12940 = args[2][170 * steps + ((cycle - 1) & mask)];
        assert(x12940 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":292:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12940);
          reg = x12940;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":293:52))
        auto x12941 = args[2][175 * steps + ((cycle - 1) & mask)];
        assert(x12941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":293:5)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12941);
          reg = x12941;
        }
        // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12942 = args[2][180 * steps + ((cycle - 1) & mask)];
        assert(x12942 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12942);
          reg = x12942;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":296:60))
        auto x12943 = args[2][174 * steps + ((cycle - 1) & mask)];
        assert(x12943 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":296:5)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12943);
          reg = x12943;
        }
      }
      {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":311:20)
        auto x12944 = Fp(x12886.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12944);
          reg = x12944;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":312:23)
        auto x12945 = Fp(x12886.asUInt32() & x84.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":312:22)
        auto x12946 = x12945 * x82;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12946);
          reg = x12946;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":313:25)
        auto x12947 = Fp(x12886.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":313:24)
        auto x12948 = x12947 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12948);
          reg = x12948;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":314:21)
        auto x12949 = Fp(x12886.asUInt32() & x49.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":314:20)
        auto x12950 = x12949 * x64;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12951 = Fp(x12950.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12951);
            reg = x12951;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12952 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x12952 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12953 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x12953 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":316:18)
      auto x12954 = x12953 * x84;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":316:6)
      auto x12955 = x12952 + x12954;
      // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12956 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x12956 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":316:43)
      auto x12957 = x12956 * x77;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":316:6)
      auto x12958 = x12955 + x12957;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x12959 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x12959 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":316:70)
      auto x12960 = x12959 * x65;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":316:6)
      auto x12961 = x12958 + x12960;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":316:6)
      auto x12962 = x12961 - x12886;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":316:6)
      if (x12962 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:316");
      // loc("cirgen/circuit/rv32im/ffpu.cpp":330:17)
      auto x12963 = x12889 * x97;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":330:17)
      auto x12964 = x12963 + x12888;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":332:7)
      auto x12965 = x12887 * x61;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":332:34)
      auto x12966 = x12959 * x84;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":332:7)
      auto x12967 = x12965 + x12966;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":332:57)
      auto x12968 = x12956 * x99;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":332:7)
      auto x12969 = x12967 + x12968;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":332:7)
      auto x12970 = x12969 + x12953;
      {
        if (x12938 != 0) {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":350:31)
          auto x12971 = x12952 - x102;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":350:31)
          auto x12972 = (x12971 == 0) ? Fp(1) : Fp(0);
          if (x12972 != 0) {
            {
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x102);
                reg = x102;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][168 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][169 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12973 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12973 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12974 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12974 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x12975 = x12974 * x99;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x12976 = x12973 + x12975;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12977 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12977 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x12978 = x12977 * x83;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x12979 = x12976 + x12978;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12980 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12980 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x12981 = x12980 * x84;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x12982 = x12979 + x12981;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12983 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12983 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x12984 = x12983 * x80;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x12985 = x12982 + x12984;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12986 = args[2][168 * steps + ((cycle - 0) & mask)];
            assert(x12986 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x12987 = x12986 * x79;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x12988 = x12985 + x12987;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12989 = args[2][169 * steps + ((cycle - 0) & mask)];
            assert(x12989 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x12990 = x12989 * x78;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x12991 = x12988 + x12990;
            // loc("./cirgen/components/onehot.h":40:8)
            auto x12992 = x12991 - x102;
            // loc("./cirgen/components/onehot.h":40:8)
            if (x12992 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":351:31)
          auto x12993 = x12952 - x99;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":351:31)
          auto x12994 = (x12993 == 0) ? Fp(1) : Fp(0);
          if (x12994 != 0) {
            {
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x102);
                reg = x102;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][168 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][169 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12995 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12995 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12996 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12996 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x12997 = x12996 * x99;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x12998 = x12995 + x12997;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x12999 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12999 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13000 = x12999 * x83;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13001 = x12998 + x13000;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13002 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x13002 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13003 = x13002 * x84;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13004 = x13001 + x13003;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13005 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x13005 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13006 = x13005 * x80;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13007 = x13004 + x13006;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13008 = args[2][168 * steps + ((cycle - 0) & mask)];
            assert(x13008 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13009 = x13008 * x79;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13010 = x13007 + x13009;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13011 = args[2][169 * steps + ((cycle - 0) & mask)];
            assert(x13011 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13012 = x13011 * x78;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13013 = x13010 + x13012;
            // loc("./cirgen/components/onehot.h":40:8)
            auto x13014 = x13013 - x99;
            // loc("./cirgen/components/onehot.h":40:8)
            if (x13014 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":352:31)
          auto x13015 = x12952 - x83;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":352:31)
          auto x13016 = (x13015 == 0) ? Fp(1) : Fp(0);
          if (x13016 != 0) {
            {
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x102);
                reg = x102;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][168 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":37:9)
              {
                auto& reg = args[2][169 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13017 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x13017 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13018 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x13018 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13019 = x13018 * x99;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13020 = x13017 + x13019;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13021 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x13021 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13022 = x13021 * x83;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13023 = x13020 + x13022;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13024 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x13024 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13025 = x13024 * x84;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13026 = x13023 + x13025;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13027 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x13027 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13028 = x13027 * x80;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13029 = x13026 + x13028;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13030 = args[2][168 * steps + ((cycle - 0) & mask)];
            assert(x13030 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13031 = x13030 * x79;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13032 = x13029 + x13031;
            // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
            auto x13033 = args[2][169 * steps + ((cycle - 0) & mask)];
            assert(x13033 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":46:19)
            auto x13034 = x13033 * x78;
            // loc("./cirgen/components/onehot.h":46:13)
            auto x13035 = x13032 + x13034;
            // loc("./cirgen/components/onehot.h":40:8)
            auto x13036 = x13035 - x83;
            // loc("./cirgen/components/onehot.h":40:8)
            if (x13036 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":353:24)
          auto x13037 = (x12952 == 0) ? Fp(1) : Fp(0);
          if (x13037 != 0) {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":354:29)
            auto x13038 = x102 - x12956;
            if (x13038 != 0) {
              if (x12953 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x102);
                    reg = x102;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][169 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13039 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13039 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13040 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13040 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13041 = x13040 * x99;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13042 = x13039 + x13041;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13043 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13043 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13044 = x13043 * x83;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13045 = x13042 + x13044;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13046 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13046 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13047 = x13046 * x84;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13048 = x13045 + x13047;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13049 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13049 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13050 = x13049 * x80;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13051 = x13048 + x13050;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13052 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13052 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13053 = x13052 * x79;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13054 = x13051 + x13053;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13055 = args[2][169 * steps + ((cycle - 0) & mask)];
                assert(x13055 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13056 = x13055 * x78;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13057 = x13054 + x13056;
                // loc("./cirgen/components/onehot.h":40:8)
                auto x13058 = x13057 - x84;
                // loc("./cirgen/components/onehot.h":40:8)
                if (x13058 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":356:29)
              auto x13059 = x102 - x12953;
              if (x13059 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x102);
                    reg = x102;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][169 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13060 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13060 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13061 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13061 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13062 = x13061 * x99;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13063 = x13060 + x13062;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13064 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13064 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13065 = x13064 * x83;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13066 = x13063 + x13065;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13067 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13067 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13068 = x13067 * x84;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13069 = x13066 + x13068;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13070 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13070 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13071 = x13070 * x80;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13072 = x13069 + x13071;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13073 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13073 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13074 = x13073 * x79;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13075 = x13072 + x13074;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13076 = args[2][169 * steps + ((cycle - 0) & mask)];
                assert(x13076 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13077 = x13076 * x78;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13078 = x13075 + x13077;
                // loc("./cirgen/components/onehot.h":40:8)
                auto x13079 = x13078 - x80;
                // loc("./cirgen/components/onehot.h":40:8)
                if (x13079 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
              }
            }
            if (x12956 != 0) {
              // loc("cirgen/circuit/rv32im/ffpu.cpp":359:30)
              auto x13080 = (x12887 == 0) ? Fp(1) : Fp(0);
              if (x13080 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x102);
                    reg = x102;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][169 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13081 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13081 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13082 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13082 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13083 = x13082 * x99;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13084 = x13081 + x13083;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13085 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13085 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13086 = x13085 * x83;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13087 = x13084 + x13086;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13088 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13088 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13089 = x13088 * x84;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13090 = x13087 + x13089;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13091 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13091 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13092 = x13091 * x80;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13093 = x13090 + x13092;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13094 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13094 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13095 = x13094 * x79;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13096 = x13093 + x13095;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13097 = args[2][169 * steps + ((cycle - 0) & mask)];
                assert(x13097 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13098 = x13097 * x78;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13099 = x13096 + x13098;
                // loc("./cirgen/components/onehot.h":40:8)
                auto x13100 = x13099 - x79;
                // loc("./cirgen/components/onehot.h":40:8)
                if (x13100 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":360:34)
              auto x13101 = x12887 - x102;
              // loc("cirgen/circuit/rv32im/ffpu.cpp":360:34)
              auto x13102 = (x13101 == 0) ? Fp(1) : Fp(0);
              if (x13102 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":37:9)
                  {
                    auto& reg = args[2][169 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x102);
                    reg = x102;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13103 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13103 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13104 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13104 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13105 = x13104 * x99;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13106 = x13103 + x13105;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13107 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13107 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13108 = x13107 * x83;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13109 = x13106 + x13108;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13110 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13110 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13111 = x13110 * x84;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13112 = x13109 + x13111;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13113 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13113 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13114 = x13113 * x80;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13115 = x13112 + x13114;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13116 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13116 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13117 = x13116 * x79;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13118 = x13115 + x13117;
                // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
                auto x13119 = args[2][169 * steps + ((cycle - 0) & mask)];
                assert(x13119 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":46:19)
                auto x13120 = x13119 * x78;
                // loc("./cirgen/components/onehot.h":46:13)
                auto x13121 = x13118 + x13120;
                // loc("./cirgen/components/onehot.h":40:8)
                auto x13122 = x13121 - x78;
                // loc("./cirgen/components/onehot.h":40:8)
                if (x13122 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
              }
            }
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":371:21))
        auto x13123 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13123 != Fp::invalid());
        if (x13123 != 0) {
          host_args.at(0) = x12886;
          host_args.at(1) = x12887;
          host_args.at(2) = x12888;
          host_args.at(3) = x12889;
          host_args.at(4) = x605;
          host(ctx, "log", "FFPU Decoded INIT from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":372:26))
        auto x13124 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x13124 != Fp::invalid());
        if (x13124 != 0) {
          host_args.at(0) = x12886;
          host_args.at(1) = x12887;
          host_args.at(2) = x12888;
          host_args.at(3) = x12889;
          host_args.at(4) = x605;
          host(ctx, "log", "FFPU Decoded BINOP_ADD from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":373:26))
        auto x13125 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x13125 != Fp::invalid());
        if (x13125 != 0) {
          host_args.at(0) = x12886;
          host_args.at(1) = x12887;
          host_args.at(2) = x12888;
          host_args.at(3) = x12889;
          host_args.at(4) = x605;
          host(ctx, "log", "FFPU Decoded BINOP_SUB from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":374:26))
        auto x13126 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x13126 != Fp::invalid());
        if (x13126 != 0) {
          host_args.at(0) = x12886;
          host_args.at(1) = x12887;
          host_args.at(2) = x12888;
          host_args.at(3) = x12889;
          host_args.at(4) = x605;
          host(ctx, "log", "FFPU Decoded BINOP_MUL from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":375:20))
        auto x13127 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x13127 != Fp::invalid());
        if (x13127 != 0) {
          host_args.at(0) = x12886;
          host_args.at(1) = x12887;
          host_args.at(2) = x12888;
          host_args.at(3) = x12889;
          host_args.at(4) = x605;
          host(ctx, "log", "FFPU Decoded SET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":376:20))
        auto x13128 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x13128 != Fp::invalid());
        if (x13128 != 0) {
          host_args.at(0) = x12886;
          host_args.at(1) = x12887;
          host_args.at(2) = x12888;
          host_args.at(3) = x12889;
          host_args.at(4) = x605;
          host(ctx, "log", "FFPU Decoded GET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":377:30))
        auto x13129 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x13129 != Fp::invalid());
        if (x13129 != 0) {
          host_args.at(0) = x12886;
          host_args.at(1) = x12887;
          host_args.at(2) = x12888;
          host_args.at(3) = x12889;
          host_args.at(4) = x605;
          host(ctx, "log", "FFPU Decoded UNOP_IDENTITY from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":378:25))
        auto x13130 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x13130 != Fp::invalid());
        if (x13130 != 0) {
          host_args.at(0) = x12886;
          host_args.at(1) = x12887;
          host_args.at(2) = x12888;
          host_args.at(3) = x12889;
          host_args.at(4) = x605;
          host(ctx, "log", "FFPU Decoded UNOP_INV from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":383:32))
      auto x13131 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x13131 != Fp::invalid());
      if (x13131 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":384:8)
        auto x13132 = x12952 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":384:8)
        if (x13132 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:384");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13133 = x12964 + x11;
        {
          host_args.at(0) = x13133;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13134 = host_outs.at(0);
          auto x13135 = host_outs.at(1);
          auto x13136 = host_outs.at(2);
          auto x13137 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13134);
            reg = x13134;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13135);
            reg = x13135;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13136);
            reg = x13136;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13137);
            reg = x13137;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13138 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13138 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13139 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13139 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13140 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13140 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13141 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13141 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13133);
          reg = x13133;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13138);
          reg = x13138;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13139);
          reg = x13139;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13140);
          reg = x13140;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13141);
          reg = x13141;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13142 = x12970 + x11;
        {
          host_args.at(0) = x13142;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13143 = host_outs.at(0);
          auto x13144 = host_outs.at(1);
          auto x13145 = host_outs.at(2);
          auto x13146 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13143);
            reg = x13143;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13144);
            reg = x13144;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13145);
            reg = x13145;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13146);
            reg = x13146;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13147 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13147 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13148 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13148 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13149 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13149 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13150 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13150 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13142);
          reg = x13142;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13147);
          reg = x13147;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13148);
          reg = x13148;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13149);
          reg = x13149;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13150);
          reg = x13150;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x13151 = x13138 + x13147;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x13152 = x13139 + x13148;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x13153 = x13140 + x13149;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":66:85)
        auto x13154 = x13141 + x13150;
        host_args.at(0) = x12964;
        host_args.at(1) = x13138;
        host_args.at(2) = x13139;
        host_args.at(3) = x13140;
        host_args.at(4) = x13141;
        host_args.at(5) = x12970;
        host_args.at(6) = x13147;
        host_args.at(7) = x13148;
        host_args.at(8) = x13149;
        host_args.at(9) = x13150;
        host_args.at(10) = x13151;
        host_args.at(11) = x13152;
        host_args.at(12) = x13153;
        host_args.at(13) = x13154;
        host(ctx, "log", "FFPU: Add %%%u (%w) + %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13155 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13155 != Fp::invalid());
        host_args.at(0) = x13155;
        host_args.at(1) = x13151;
        host_args.at(2) = x13152;
        host_args.at(3) = x13153;
        host_args.at(4) = x13154;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13156 = x13155 + x11;
        {
          host_args.at(0) = x13156;
          host(ctx, "isResident", "", host_args.data(), 1, host_outs.data(), 1);
          auto x13157 = host_outs.at(0);
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13157);
            reg = x13157;
          }
        }
        // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13158 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x13158 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":30:13)
        auto x13159 = x13158 * x99;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13151);
          reg = x13151;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13152);
          reg = x13152;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13153);
          reg = x13153;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13154);
          reg = x13154;
        }
        {
          host_args.at(0) = x13156;
          host_args.at(1) = x13151;
          host_args.at(2) = x13152;
          host_args.at(3) = x13153;
          host_args.at(4) = x13154;
          host_args.at(5) = x13159;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13160 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13160 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13161 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13161 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13162 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13162 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13163 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13163 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13156);
          reg = x13156;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13159);
          reg = x13159;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13160);
          reg = x13160;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13161);
          reg = x13161;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13162);
          reg = x13162;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13163);
          reg = x13163;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:28)
        auto x13164 = x13155 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13164);
          reg = x13164;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":387:32))
      auto x13165 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x13165 != Fp::invalid());
      if (x13165 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":388:8)
        auto x13166 = x12952 - x99;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":388:8)
        if (x13166 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:388");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13167 = x12964 + x11;
        {
          host_args.at(0) = x13167;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13168 = host_outs.at(0);
          auto x13169 = host_outs.at(1);
          auto x13170 = host_outs.at(2);
          auto x13171 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13168);
            reg = x13168;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13169);
            reg = x13169;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13170);
            reg = x13170;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13171);
            reg = x13171;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13172 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13172 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13173 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13173 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13174 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13174 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13175 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13175 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13167);
          reg = x13167;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13172);
          reg = x13172;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13173);
          reg = x13173;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13174);
          reg = x13174;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13175);
          reg = x13175;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13176 = x12970 + x11;
        {
          host_args.at(0) = x13176;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13177 = host_outs.at(0);
          auto x13178 = host_outs.at(1);
          auto x13179 = host_outs.at(2);
          auto x13180 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13177);
            reg = x13177;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13178);
            reg = x13178;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13179);
            reg = x13179;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13180);
            reg = x13180;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13181 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13181 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13182 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13182 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13183 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13183 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13184 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13184 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13176);
          reg = x13176;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13181);
          reg = x13181;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13182);
          reg = x13182;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13183);
          reg = x13183;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13184);
          reg = x13184;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":71:85)
        auto x13185 = x13172 - x13181;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":71:85)
        auto x13186 = x13173 - x13182;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":71:85)
        auto x13187 = x13174 - x13183;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":71:85)
        auto x13188 = x13175 - x13184;
        host_args.at(0) = x12964;
        host_args.at(1) = x13172;
        host_args.at(2) = x13173;
        host_args.at(3) = x13174;
        host_args.at(4) = x13175;
        host_args.at(5) = x12970;
        host_args.at(6) = x13181;
        host_args.at(7) = x13182;
        host_args.at(8) = x13183;
        host_args.at(9) = x13184;
        host_args.at(10) = x13185;
        host_args.at(11) = x13186;
        host_args.at(12) = x13187;
        host_args.at(13) = x13188;
        host(ctx, "log", "FFPU: Sub %%%u (%w) - %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13189 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13189 != Fp::invalid());
        host_args.at(0) = x13189;
        host_args.at(1) = x13185;
        host_args.at(2) = x13186;
        host_args.at(3) = x13187;
        host_args.at(4) = x13188;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13190 = x13189 + x11;
        {
          host_args.at(0) = x13190;
          host(ctx, "isResident", "", host_args.data(), 1, host_outs.data(), 1);
          auto x13191 = host_outs.at(0);
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13191);
            reg = x13191;
          }
        }
        // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13192 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x13192 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":30:13)
        auto x13193 = x13192 * x99;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13185);
          reg = x13185;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13186);
          reg = x13186;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13187);
          reg = x13187;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13188);
          reg = x13188;
        }
        {
          host_args.at(0) = x13190;
          host_args.at(1) = x13185;
          host_args.at(2) = x13186;
          host_args.at(3) = x13187;
          host_args.at(4) = x13188;
          host_args.at(5) = x13193;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13194 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13194 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13195 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13195 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13196 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13196 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13197 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13197 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13190);
          reg = x13190;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13193);
          reg = x13193;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13194);
          reg = x13194;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13195);
          reg = x13195;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13196);
          reg = x13196;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13197);
          reg = x13197;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:28)
        auto x13198 = x13189 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13198);
          reg = x13198;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/hot[3](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":391:32))
      auto x13199 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x13199 != Fp::invalid());
      if (x13199 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":392:8)
        auto x13200 = x12952 - x83;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":392:8)
        if (x13200 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:392");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13201 = x12964 + x11;
        {
          host_args.at(0) = x13201;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13202 = host_outs.at(0);
          auto x13203 = host_outs.at(1);
          auto x13204 = host_outs.at(2);
          auto x13205 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13202);
            reg = x13202;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13203);
            reg = x13203;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13204);
            reg = x13204;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13205);
            reg = x13205;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13206 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13206 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13207 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13207 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13208 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13208 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13209 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13209 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13201);
          reg = x13201;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13206);
          reg = x13206;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13207);
          reg = x13207;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13208);
          reg = x13208;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13209);
          reg = x13209;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13210 = x12970 + x11;
        {
          host_args.at(0) = x13210;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13211 = host_outs.at(0);
          auto x13212 = host_outs.at(1);
          auto x13213 = host_outs.at(2);
          auto x13214 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13211);
            reg = x13211;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13212);
            reg = x13212;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13213);
            reg = x13213;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13214);
            reg = x13214;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13215 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13215 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13216 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13216 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13217 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13217 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13218 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13218 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13210);
          reg = x13210;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13215);
          reg = x13215;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13216);
          reg = x13216;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13217);
          reg = x13217;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13218);
          reg = x13218;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13219 = x13206 * x13215;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13220 = x13207 * x13218;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13221 = x13208 * x13217;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13222 = x13220 + x13221;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13223 = x13209 * x13216;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13224 = x13222 + x13223;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13225 = x13224 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13226 = x13219 + x13225;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13227 = x13206 * x13216;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13228 = x13207 * x13215;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13229 = x13227 + x13228;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13230 = x13208 * x13218;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13231 = x13209 * x13217;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13232 = x13230 + x13231;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13233 = x13232 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13234 = x13229 + x13233;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13235 = x13206 * x13217;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13236 = x13207 * x13216;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13237 = x13235 + x13236;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13238 = x13208 * x13215;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13239 = x13237 + x13238;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13240 = x13209 * x13218;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13241 = x13240 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13242 = x13239 + x13241;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13243 = x13206 * x13218;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13244 = x13207 * x13217;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13245 = x13243 + x13244;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13246 = x13208 * x13216;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13247 = x13245 + x13246;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13248 = x13209 * x13215;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":76:85)
        auto x13249 = x13247 + x13248;
        host_args.at(0) = x12964;
        host_args.at(1) = x13206;
        host_args.at(2) = x13207;
        host_args.at(3) = x13208;
        host_args.at(4) = x13209;
        host_args.at(5) = x12970;
        host_args.at(6) = x13215;
        host_args.at(7) = x13216;
        host_args.at(8) = x13217;
        host_args.at(9) = x13218;
        host_args.at(10) = x13226;
        host_args.at(11) = x13234;
        host_args.at(12) = x13242;
        host_args.at(13) = x13249;
        host(ctx, "log", "FFPU: Mul %%%u (%w) * %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13250 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13250 != Fp::invalid());
        host_args.at(0) = x13250;
        host_args.at(1) = x13226;
        host_args.at(2) = x13234;
        host_args.at(3) = x13242;
        host_args.at(4) = x13249;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13251 = x13250 + x11;
        {
          host_args.at(0) = x13251;
          host(ctx, "isResident", "", host_args.data(), 1, host_outs.data(), 1);
          auto x13252 = host_outs.at(0);
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13252);
            reg = x13252;
          }
        }
        // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13253 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x13253 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":30:13)
        auto x13254 = x13253 * x99;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13226);
          reg = x13226;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13234);
          reg = x13234;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13242);
          reg = x13242;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13249);
          reg = x13249;
        }
        {
          host_args.at(0) = x13251;
          host_args.at(1) = x13226;
          host_args.at(2) = x13234;
          host_args.at(3) = x13242;
          host_args.at(4) = x13249;
          host_args.at(5) = x13254;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13255 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13255 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13256 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13256 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13257 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13257 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13258 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13258 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13251);
          reg = x13251;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13254);
          reg = x13254;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13255);
          reg = x13255;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13256);
          reg = x13256;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13257);
          reg = x13257;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13258);
          reg = x13258;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:28)
        auto x13259 = x13250 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13259);
          reg = x13259;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":395:26))
      auto x13260 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x13260 != Fp::invalid());
      if (x13260 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":396:8)
        if (x12952 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:396");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":397:8)
        auto x13261 = x12953 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":397:8)
        if (x13261 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:397");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":398:8)
        if (x12956 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:398");
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":171:46))
        auto x13262 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13262 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":171:46)
        auto x13263 = x13262 + x12887;
        {
          host_args.at(0) = x13263;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13264 = host_outs.at(0);
          auto x13265 = host_outs.at(1);
          auto x13266 = host_outs.at(2);
          auto x13267 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13264);
            reg = x13264;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13265);
            reg = x13265;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13266);
            reg = x13266;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13267);
            reg = x13267;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13268 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13268 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13269 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13269 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13270 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13270 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13271 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13271 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13263);
          reg = x13263;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13268);
          reg = x13268;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13269);
          reg = x13269;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13270);
          reg = x13270;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13271);
          reg = x13271;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x13272 = x13269 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13273 = x13268 + x13272;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13274 = x13270 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13275 = x13273 + x13274;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13276 = x13271 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13277 = x13275 + x13276;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":171:18)
        auto x13278 = x13277 * x82;
        // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13279 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x13279 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":173:27)
        auto x13280 = x102 - x13279;
        if (x13280 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13281 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x13281 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13282 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x13282 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13283 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x13283 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13284 = args[2][136 * steps + ((cycle - 1) & mask)];
          assert(x13284 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":189:38)
            auto x13285 = x12964 * x84;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":189:27)
            auto x13286 = x13278 + x13285;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":47:10)
            auto x13287 = x13281 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13288 = Fp(x13287.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13289 = Fp(x13287.asUInt32() & x9.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13290 = Fp(x13287.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13291 = x13287 - x13288;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13292 = x13291 - x13289;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13293 = x13292 - x13290;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13294 = x13289 * x96;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13295 = x13290 * x16;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13296 = x13293 * x7;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13288);
              reg = x13288;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13294);
              reg = x13294;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13295);
              reg = x13295;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13296);
              reg = x13296;
            }
            {
              host_args.at(0) = x13286;
              host_args.at(1) = x13288;
              host_args.at(2) = x13294;
              host_args.at(3) = x13295;
              host_args.at(4) = x13296;
              host_args.at(5) = x99;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13297 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x13297 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13298 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x13298 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13299 = args[2][121 * steps + ((cycle - 0) & mask)];
            assert(x13299 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13300 = args[2][122 * steps + ((cycle - 0) & mask)];
            assert(x13300 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":130:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13286);
              reg = x13286;
            }
            // loc("cirgen/components/ram.cpp":131:3)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12880);
              reg = x12880;
            }
            // loc("cirgen/components/ram.cpp":132:3)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x99);
              reg = x99;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13297);
              reg = x13297;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13298);
              reg = x13298;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13299);
              reg = x13299;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13300);
              reg = x13300;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":190:27)
            auto x13301 = x13286 + x102;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":47:10)
            auto x13302 = x13282 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13303 = Fp(x13302.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13304 = Fp(x13302.asUInt32() & x9.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13305 = Fp(x13302.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13306 = x13302 - x13303;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13307 = x13306 - x13304;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13308 = x13307 - x13305;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13309 = x13304 * x96;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13310 = x13305 * x16;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13311 = x13308 * x7;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13303);
              reg = x13303;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13309);
              reg = x13309;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13310);
              reg = x13310;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13311);
              reg = x13311;
            }
            {
              host_args.at(0) = x13301;
              host_args.at(1) = x13303;
              host_args.at(2) = x13309;
              host_args.at(3) = x13310;
              host_args.at(4) = x13311;
              host_args.at(5) = x99;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13312 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x13312 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13313 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x13313 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13314 = args[2][128 * steps + ((cycle - 0) & mask)];
            assert(x13314 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13315 = args[2][129 * steps + ((cycle - 0) & mask)];
            assert(x13315 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":130:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13301);
              reg = x13301;
            }
            // loc("cirgen/components/ram.cpp":131:3)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12880);
              reg = x12880;
            }
            // loc("cirgen/components/ram.cpp":132:3)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x99);
              reg = x99;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13312);
              reg = x13312;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13313);
              reg = x13313;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13314);
              reg = x13314;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13315);
              reg = x13315;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
          auto x13316 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x13316 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":192:8)
          auto x13317 = x13316 - x12880;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":192:8)
          if (x13317 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:192");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x13318 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x13318 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":193:32)
          auto x13319 = x12964 * x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":193:21)
          auto x13320 = x13278 + x13319;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":193:8)
          auto x13321 = x13318 - x13320;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":193:8)
          if (x13321 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:193");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13322 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13322 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13323 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13323 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13324 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13324 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13325 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13325 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13326 = x13323 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13327 = x13322 + x13326;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13328 = x13324 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13329 = x13327 + x13328;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13330 = x13325 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13331 = x13329 + x13330;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":47:10)
          auto x13332 = x13281 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":194:8)
          auto x13333 = x13331 - x13332;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":194:8)
          if (x13333 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:194");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
          auto x13334 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x13334 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":196:8)
          auto x13335 = x13334 - x12880;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":196:8)
          if (x13335 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:196");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x13336 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x13336 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":197:21)
          auto x13337 = x13320 + x102;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":197:8)
          auto x13338 = x13336 - x13337;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":197:8)
          if (x13338 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:197");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13339 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13339 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13340 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13340 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13341 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13341 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13342 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13342 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13343 = x13340 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13344 = x13339 + x13343;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13345 = x13341 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13346 = x13344 + x13345;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13347 = x13342 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13348 = x13346 + x13347;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":47:10)
          auto x13349 = x13282 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":198:8)
          auto x13350 = x13348 - x13349;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":198:8)
          if (x13350 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:198");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":202:10)
          auto x13351 = x13278 * x84;
          host_args.at(0) = x12887;
          host_args.at(1) = x13351;
          host_args.at(2) = x12964;
          host_args.at(3) = x13281;
          host_args.at(4) = x13282;
          host_args.at(5) = x13283;
          host_args.at(6) = x13284;
          host_args.at(7) = x13281;
          host_args.at(8) = x13282;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (%u, %u, ...)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":37:28))
          auto x13352 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x13352 != Fp::invalid());
          host_args.at(0) = x13352;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":38:3)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13352);
            reg = x13352;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
        }
        if (x13279 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13353 = args[2][133 * steps + ((cycle - 2) & mask)];
          assert(x13353 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13354 = args[2][134 * steps + ((cycle - 2) & mask)];
          assert(x13354 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13355 = args[2][135 * steps + ((cycle - 2) & mask)];
          assert(x13355 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13356 = args[2][136 * steps + ((cycle - 2) & mask)];
          assert(x13356 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":227:38)
            auto x13357 = x12964 * x84;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":227:27)
            auto x13358 = x13278 + x13357;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":227:27)
            auto x13359 = x13358 + x99;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":47:10)
            auto x13360 = x13355 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13361 = Fp(x13360.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13362 = Fp(x13360.asUInt32() & x9.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13363 = Fp(x13360.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13364 = x13360 - x13361;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13365 = x13364 - x13362;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13366 = x13365 - x13363;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13367 = x13362 * x96;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13368 = x13363 * x16;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13369 = x13366 * x7;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13361);
              reg = x13361;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13367);
              reg = x13367;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13368);
              reg = x13368;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13369);
              reg = x13369;
            }
            {
              host_args.at(0) = x13359;
              host_args.at(1) = x13361;
              host_args.at(2) = x13367;
              host_args.at(3) = x13368;
              host_args.at(4) = x13369;
              host_args.at(5) = x99;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13370 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x13370 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13371 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x13371 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13372 = args[2][121 * steps + ((cycle - 0) & mask)];
            assert(x13372 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13373 = args[2][122 * steps + ((cycle - 0) & mask)];
            assert(x13373 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":130:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13359);
              reg = x13359;
            }
            // loc("cirgen/components/ram.cpp":131:3)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12880);
              reg = x12880;
            }
            // loc("cirgen/components/ram.cpp":132:3)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x99);
              reg = x99;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13370);
              reg = x13370;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13371);
              reg = x13371;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13372);
              reg = x13372;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13373);
              reg = x13373;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":228:27)
            auto x13374 = x13358 + x83;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":47:10)
            auto x13375 = x13356 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13376 = Fp(x13375.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13377 = Fp(x13375.asUInt32() & x9.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13378 = Fp(x13375.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13379 = x13375 - x13376;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13380 = x13379 - x13377;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13381 = x13380 - x13378;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13382 = x13377 * x96;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13383 = x13378 * x16;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13384 = x13381 * x7;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13376);
              reg = x13376;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13382);
              reg = x13382;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13383);
              reg = x13383;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13384);
              reg = x13384;
            }
            {
              host_args.at(0) = x13374;
              host_args.at(1) = x13376;
              host_args.at(2) = x13382;
              host_args.at(3) = x13383;
              host_args.at(4) = x13384;
              host_args.at(5) = x99;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13385 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x13385 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13386 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x13386 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13387 = args[2][128 * steps + ((cycle - 0) & mask)];
            assert(x13387 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
            auto x13388 = args[2][129 * steps + ((cycle - 0) & mask)];
            assert(x13388 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":130:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13374);
              reg = x13374;
            }
            // loc("cirgen/components/ram.cpp":131:3)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12880);
              reg = x12880;
            }
            // loc("cirgen/components/ram.cpp":132:3)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x99);
              reg = x99;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13385);
              reg = x13385;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13386);
              reg = x13386;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13387);
              reg = x13387;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13388);
              reg = x13388;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
          auto x13389 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x13389 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":230:8)
          auto x13390 = x13389 - x12880;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":230:8)
          if (x13390 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:230");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x13391 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x13391 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":231:32)
          auto x13392 = x12964 * x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":231:21)
          auto x13393 = x13278 + x13392;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":231:21)
          auto x13394 = x13393 + x99;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":231:8)
          auto x13395 = x13391 - x13394;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":231:8)
          if (x13395 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:231");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13396 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13396 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13397 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13397 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13398 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13398 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13399 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13399 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13400 = x13397 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13401 = x13396 + x13400;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13402 = x13398 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13403 = x13401 + x13402;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13404 = x13399 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13405 = x13403 + x13404;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":47:10)
          auto x13406 = x13355 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":232:8)
          auto x13407 = x13405 - x13406;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":232:8)
          if (x13407 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:232");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
          auto x13408 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x13408 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":234:8)
          auto x13409 = x13408 - x12880;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":234:8)
          if (x13409 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:234");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x13410 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x13410 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":235:21)
          auto x13411 = x13393 + x83;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":235:8)
          auto x13412 = x13410 - x13411;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":235:8)
          if (x13412 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:235");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13413 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13413 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13414 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13414 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13415 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13415 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13416 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13416 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13417 = x13414 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13418 = x13413 + x13417;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13419 = x13415 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13420 = x13418 + x13419;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13421 = x13416 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13422 = x13420 + x13421;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":47:10)
          auto x13423 = x13356 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":236:8)
          auto x13424 = x13422 - x13423;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":236:8)
          if (x13424 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:236");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":240:10)
          auto x13425 = x13278 * x84;
          host_args.at(0) = x12887;
          host_args.at(1) = x13425;
          host_args.at(2) = x12964;
          host_args.at(3) = x13353;
          host_args.at(4) = x13354;
          host_args.at(5) = x13355;
          host_args.at(6) = x13356;
          host_args.at(7) = x13355;
          host_args.at(8) = x13356;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (... %u, %u)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":37:28))
          auto x13426 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x13426 != Fp::invalid());
          host_args.at(0) = x13426;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":38:3)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13426);
            reg = x13426;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/hot[5](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":401:26))
      auto x13427 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x13427 != Fp::invalid());
      if (x13427 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":402:8)
        if (x12952 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:402");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":403:8)
        if (x12953 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:403");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":404:8)
        if (x12956 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:404");
        // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13428 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x13428 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":121:27)
        auto x13429 = x102 - x13428;
        if (x13429 != 0) {
          // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":124:48))
          auto x13430 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x13430 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":124:48)
          auto x13431 = x13430 + x12887;
          {
            host_args.at(0) = x13431;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13432 = host_outs.at(0);
            auto x13433 = host_outs.at(1);
            auto x13434 = host_outs.at(2);
            auto x13435 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][133 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13432);
              reg = x13432;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][134 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13433);
              reg = x13433;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][135 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13434);
              reg = x13434;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][136 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13435);
              reg = x13435;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13436 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13436 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13437 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13437 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13438 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13438 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13439 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x13439 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13431);
            reg = x13431;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12880);
            reg = x12880;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13436);
            reg = x13436;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13437);
            reg = x13437;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13438);
            reg = x13438;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13439);
            reg = x13439;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13440 = x13437 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13441 = x13436 + x13440;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13442 = x13438 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13443 = x13441 + x13442;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13444 = x13439 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13445 = x13443 + x13444;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":124:20)
          auto x13446 = x13445 * x82;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":126:64)
          auto x13447 = x12964 * x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":126:53)
          auto x13448 = x13446 + x13447;
          {
            host_args.at(0) = x13448;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13449 = host_outs.at(0);
            auto x13450 = host_outs.at(1);
            auto x13451 = host_outs.at(2);
            auto x13452 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13449);
              reg = x13449;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13450);
              reg = x13450;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13451);
              reg = x13451;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13452);
              reg = x13452;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13453 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13453 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13454 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13454 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13455 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13455 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13456 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13456 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13448);
            reg = x13448;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12880);
            reg = x12880;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13453);
            reg = x13453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13454);
            reg = x13454;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13455);
            reg = x13455;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13456);
            reg = x13456;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13457 = x13454 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13458 = x13453 + x13457;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13459 = x13455 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13460 = x13458 + x13459;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13461 = x13456 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13462 = x13460 + x13461;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":51:10)
          auto x13463 = x13462 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":127:53)
          auto x13464 = x13448 + x102;
          {
            host_args.at(0) = x13464;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13465 = host_outs.at(0);
            auto x13466 = host_outs.at(1);
            auto x13467 = host_outs.at(2);
            auto x13468 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13465);
              reg = x13465;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13466);
              reg = x13466;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13467);
              reg = x13467;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13468);
              reg = x13468;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13469 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13469 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13470 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13470 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13471 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13471 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13472 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13472 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13464);
            reg = x13464;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12880);
            reg = x12880;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13469);
            reg = x13469;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13470);
            reg = x13470;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13471);
            reg = x13471;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13472);
            reg = x13472;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13473 = x13470 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13474 = x13469 + x13473;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13475 = x13471 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13476 = x13474 + x13475;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13477 = x13472 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13478 = x13476 + x13477;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":51:10)
          auto x13479 = x13478 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":131:10)
          auto x13480 = x13446 * x84;
          host_args.at(0) = x12887;
          host_args.at(1) = x13480;
          host_args.at(2) = x12964;
          host_args.at(3) = x13463;
          host_args.at(4) = x13479;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, ..", host_args.data(), 5, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":37:28))
          auto x13481 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x13481 != Fp::invalid());
          host_args.at(0) = x13481;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":38:3)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13481);
            reg = x13481;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
        }
        if (x13428 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13482 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x13482 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13483 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x13483 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13484 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x13484 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13485 = args[2][136 * steps + ((cycle - 1) & mask)];
          assert(x13485 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13486 = x13483 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13487 = x13482 + x13486;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13488 = x13484 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13489 = x13487 + x13488;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13490 = x13485 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13491 = x13489 + x13490;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":144:59)
          auto x13492 = x13491 * x82;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13493 = args[2][119 * steps + ((cycle - 1) & mask)];
          assert(x13493 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13494 = args[2][120 * steps + ((cycle - 1) & mask)];
          assert(x13494 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13495 = args[2][121 * steps + ((cycle - 1) & mask)];
          assert(x13495 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13496 = args[2][122 * steps + ((cycle - 1) & mask)];
          assert(x13496 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13497 = x13494 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13498 = x13493 + x13497;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13499 = x13495 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13500 = x13498 + x13499;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13501 = x13496 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13502 = x13500 + x13501;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":51:10)
          auto x13503 = x13502 * x0;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13504 = args[2][126 * steps + ((cycle - 1) & mask)];
          assert(x13504 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13505 = args[2][127 * steps + ((cycle - 1) & mask)];
          assert(x13505 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13506 = args[2][128 * steps + ((cycle - 1) & mask)];
          assert(x13506 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13507 = args[2][129 * steps + ((cycle - 1) & mask)];
          assert(x13507 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13508 = x13505 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13509 = x13504 + x13508;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13510 = x13506 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13511 = x13509 + x13510;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13512 = x13507 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13513 = x13511 + x13512;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":51:10)
          auto x13514 = x13513 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":148:64)
          auto x13515 = x12964 * x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":148:53)
          auto x13516 = x13492 + x13515;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":148:53)
          auto x13517 = x13516 + x99;
          {
            host_args.at(0) = x13517;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13518 = host_outs.at(0);
            auto x13519 = host_outs.at(1);
            auto x13520 = host_outs.at(2);
            auto x13521 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13518);
              reg = x13518;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13519);
              reg = x13519;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13520);
              reg = x13520;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13521);
              reg = x13521;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13522 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13522 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13523 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13523 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13524 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13524 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13525 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13525 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13517);
            reg = x13517;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12880);
            reg = x12880;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13522);
            reg = x13522;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13523);
            reg = x13523;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13524);
            reg = x13524;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13525);
            reg = x13525;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13526 = x13523 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13527 = x13522 + x13526;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13528 = x13524 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13529 = x13527 + x13528;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13530 = x13525 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13531 = x13529 + x13530;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":51:10)
          auto x13532 = x13531 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":149:53)
          auto x13533 = x13516 + x83;
          {
            host_args.at(0) = x13533;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13534 = host_outs.at(0);
            auto x13535 = host_outs.at(1);
            auto x13536 = host_outs.at(2);
            auto x13537 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13534);
              reg = x13534;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13535);
              reg = x13535;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13536);
              reg = x13536;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13537);
              reg = x13537;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13538 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13538 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13539 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13539 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13540 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13540 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13541 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13541 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13533);
            reg = x13533;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12880);
            reg = x12880;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13538);
            reg = x13538;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13539);
            reg = x13539;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13540);
            reg = x13540;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13541);
            reg = x13541;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13542 = x13539 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13543 = x13538 + x13542;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13544 = x13540 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13545 = x13543 + x13544;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13546 = x13541 * x85;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13547 = x13545 + x13546;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":51:10)
          auto x13548 = x13547 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":154:10)
          auto x13549 = x13492 * x84;
          host_args.at(0) = x12887;
          host_args.at(1) = x13549;
          host_args.at(2) = x12964;
          host_args.at(3) = x13503;
          host_args.at(4) = x13514;
          host_args.at(5) = x13532;
          host_args.at(6) = x13548;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, %u, %u", host_args.data(), 7, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
          auto x13550 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x13550 != Fp::invalid());
          host_args.at(0) = x13550;
          host_args.at(1) = x13503;
          host_args.at(2) = x13514;
          host_args.at(3) = x13532;
          host_args.at(4) = x13548;
          host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
          auto x13551 = x13550 + x11;
          {
            host_args.at(0) = x13551;
            host(ctx, "isResident", "", host_args.data(), 1, host_outs.data(), 1);
            auto x13552 = host_outs.at(0);
            // loc("./cirgen/components/bits.h":20:23)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13552);
              reg = x13552;
            }
          }
          // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13553 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x13553 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":30:13)
          auto x13554 = x13553 * x99;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13503);
            reg = x13503;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13514);
            reg = x13514;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13532);
            reg = x13532;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13548);
            reg = x13548;
          }
          {
            host_args.at(0) = x13551;
            host_args.at(1) = x13503;
            host_args.at(2) = x13514;
            host_args.at(3) = x13532;
            host_args.at(4) = x13548;
            host_args.at(5) = x13554;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13555 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13555 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13556 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13556 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13557 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13557 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13558 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x13558 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13551);
            reg = x13551;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12880);
            reg = x12880;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13554);
            reg = x13554;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13555);
            reg = x13555;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13556);
            reg = x13556;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13557);
            reg = x13557;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13558);
            reg = x13558;
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:28)
          auto x13559 = x13550 + x102;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13559);
            reg = x13559;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/hot[6](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":407:36))
      auto x13560 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x13560 != Fp::invalid());
      if (x13560 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":408:8)
        if (x12952 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:408");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":409:8)
        if (x12953 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:409");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":410:8)
        auto x13561 = x12956 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":410:8)
        if (x13561 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:410");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":411:8)
        if (x12887 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:411");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13562 = x12964 + x11;
        {
          host_args.at(0) = x13562;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13563 = host_outs.at(0);
          auto x13564 = host_outs.at(1);
          auto x13565 = host_outs.at(2);
          auto x13566 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13563);
            reg = x13563;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13564);
            reg = x13564;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13565);
            reg = x13565;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13566);
            reg = x13566;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13567 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13567 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13568 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13568 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13569 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13569 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13570 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13570 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13562);
          reg = x13562;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13567);
          reg = x13567;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13568);
          reg = x13568;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13569);
          reg = x13569;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13570);
          reg = x13570;
        }
        host_args.at(0) = x12964;
        host_args.at(1) = x13567;
        host_args.at(2) = x13568;
        host_args.at(3) = x13569;
        host_args.at(4) = x13570;
        host(ctx, "log", "FFPU: Identity %%%u (%w)", host_args.data(), 5, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13571 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13571 != Fp::invalid());
        host_args.at(0) = x13571;
        host_args.at(1) = x13567;
        host_args.at(2) = x13568;
        host_args.at(3) = x13569;
        host_args.at(4) = x13570;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13572 = x13571 + x11;
        {
          host_args.at(0) = x13572;
          host(ctx, "isResident", "", host_args.data(), 1, host_outs.data(), 1);
          auto x13573 = host_outs.at(0);
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13573);
            reg = x13573;
          }
        }
        // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13574 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x13574 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":30:13)
        auto x13575 = x13574 * x99;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13567);
          reg = x13567;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13568);
          reg = x13568;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13569);
          reg = x13569;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13570);
          reg = x13570;
        }
        {
          host_args.at(0) = x13572;
          host_args.at(1) = x13567;
          host_args.at(2) = x13568;
          host_args.at(3) = x13569;
          host_args.at(4) = x13570;
          host_args.at(5) = x13575;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13576 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13576 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13577 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13578 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13578 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13579 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13579 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13572);
          reg = x13572;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13575);
          reg = x13575;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13576);
          reg = x13576;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13577);
          reg = x13577;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13578);
          reg = x13578;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13579);
          reg = x13579;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:28)
        auto x13580 = x13571 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13580);
          reg = x13580;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/hot[7](Reg)"("cirgen/circuit/rv32im/ffpu.cpp":414:31))
      auto x13581 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x13581 != Fp::invalid());
      if (x13581 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":415:8)
        if (x12952 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:415");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":416:8)
        if (x12953 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:416");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":417:8)
        auto x13582 = x12956 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":417:8)
        if (x13582 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:417");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":418:8)
        auto x13583 = x12887 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":418:8)
        if (x13583 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:418");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13584 = x12964 + x11;
        {
          host_args.at(0) = x13584;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13585 = host_outs.at(0);
          auto x13586 = host_outs.at(1);
          auto x13587 = host_outs.at(2);
          auto x13588 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13585);
            reg = x13585;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13586);
            reg = x13586;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13587);
            reg = x13587;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13588);
            reg = x13588;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13589 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13589 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13590 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13591 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13591 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13592 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13592 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13584);
          reg = x13584;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13589);
          reg = x13589;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13590);
          reg = x13590;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13591);
          reg = x13591;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13592);
          reg = x13592;
        }
        {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13593 = x13589 * x13589;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13594 = x13592 + x13592;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13595 = x13590 * x13594;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13596 = x13591 * x13591;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13597 = x13595 - x13596;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13598 = x13597 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13599 = x13593 + x13598;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13600 = x13591 + x13591;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13601 = x13589 * x13600;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13602 = x13590 * x13590;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13603 = x13601 - x13602;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13604 = x13592 * x13592;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13605 = x13604 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13606 = x13603 + x13605;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13607 = x13599 * x13599;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13608 = x13606 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13609 = x13608 * x13606;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13610 = x13607 + x13609;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13611 = inv(x13610);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13612 = x13599 * x13611;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13613 = x13606 * x13611;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13614 = x13589 * x13612;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13615 = x13591 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13616 = x13615 * x13613;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13617 = x13614 + x13616;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13618 = -x13590;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13619 = x13618 * x13612;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13620 = x13592 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13621 = x13620 * x13613;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13622 = x13619 - x13621;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13623 = -x13589;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13624 = x13623 * x13613;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13625 = x13591 * x13612;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13626 = x13624 + x13625;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13627 = x13590 * x13613;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13628 = x13592 * x13612;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":92:24)
          auto x13629 = x13627 - x13628;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13617);
            reg = x13617;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13622);
            reg = x13622;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13626);
            reg = x13626;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13629);
            reg = x13629;
          }
        }
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13630 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x13630 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13631 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x13631 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13632 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x13632 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13633 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x13633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13634 = x13630 * x13589;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13635 = x13631 * x13592;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13636 = x13632 * x13591;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13637 = x13635 + x13636;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13638 = x13633 * x13590;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13639 = x13637 + x13638;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13640 = x13639 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13641 = x13634 + x13640;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13642 = x13630 * x13590;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13643 = x13631 * x13589;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13644 = x13642 + x13643;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13645 = x13632 * x13592;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13646 = x13633 * x13591;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13647 = x13645 + x13646;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13648 = x13647 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13649 = x13644 + x13648;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13650 = x13630 * x13591;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13651 = x13631 * x13590;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13652 = x13650 + x13651;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13653 = x13632 * x13589;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13654 = x13652 + x13653;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13655 = x13633 * x13592;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13656 = x13655 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13657 = x13654 + x13656;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13658 = x13630 * x13592;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13659 = x13631 * x13591;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13660 = x13658 + x13659;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13661 = x13632 * x13590;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13662 = x13660 + x13661;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13663 = x13633 * x13589;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:21)
        auto x13664 = x13662 + x13663;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:6)
        auto x13665 = x102 - x13641;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:6)
        if (x13665 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:96");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:6)
        auto x13666 = x101 - x13649;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:6)
        if (x13666 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:96");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:6)
        auto x13667 = x101 - x13657;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:6)
        if (x13667 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:96");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:6)
        auto x13668 = x101 - x13664;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":96:6)
        if (x13668 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:96");
        host_args.at(0) = x12964;
        host_args.at(1) = x13589;
        host_args.at(2) = x13590;
        host_args.at(3) = x13591;
        host_args.at(4) = x13592;
        host_args.at(5) = x13630;
        host_args.at(6) = x13631;
        host_args.at(7) = x13632;
        host_args.at(8) = x13633;
        host(ctx, "log", "FFPU: Inv %%%u (%w) -> %w", host_args.data(), 9, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13669 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13669 != Fp::invalid());
        host_args.at(0) = x13669;
        host_args.at(1) = x13630;
        host_args.at(2) = x13631;
        host_args.at(3) = x13632;
        host_args.at(4) = x13633;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":43:10)
        auto x13670 = x13669 + x11;
        {
          host_args.at(0) = x13670;
          host(ctx, "isResident", "", host_args.data(), 1, host_outs.data(), 1);
          auto x13671 = host_outs.at(0);
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13671);
            reg = x13671;
          }
        }
        // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13672 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x13672 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":30:13)
        auto x13673 = x13672 * x99;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13630);
          reg = x13630;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13631);
          reg = x13631;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13632);
          reg = x13632;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13633);
          reg = x13633;
        }
        {
          host_args.at(0) = x13670;
          host_args.at(1) = x13630;
          host_args.at(2) = x13631;
          host_args.at(3) = x13632;
          host_args.at(4) = x13633;
          host_args.at(5) = x13673;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13674 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13674 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13675 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13675 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13676 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13676 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13677 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13677 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13670);
          reg = x13670;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12880);
          reg = x12880;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13673);
          reg = x13673;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13674);
          reg = x13674;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13675);
          reg = x13675;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13676);
          reg = x13676;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13677);
          reg = x13677;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:28)
        auto x13678 = x13669 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13678);
          reg = x13678;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x13679 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x13679 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":423:57)
      auto x13680 = x605 + x84;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":423:20)
      auto x13681 = x13679 - x13680;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13682 = (x13681 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13682);
          reg = x13682;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13683 = inv(x13681);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13683);
          reg = x13683;
        }
      }
      // loc("Top/Mux/4/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13684 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x13684 != Fp::invalid());
      if (x13684 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x13681 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x13685 = x102 - x13684;
      if (x13685 != 0) {
        // loc("Top/Mux/4/Mux/12/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13686 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13686 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13687 = x13681 * x13686;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13688 = x13687 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13688 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13689 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x13689 != Fp::invalid());
      if (x13689 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":426:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13690 = Fp(x13680.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13690);
            reg = x13690;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13691 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13691 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13692 = x13680 - x13691;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13693 = x13692 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13694 = Fp(x13693.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13694);
            reg = x13694;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13695 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13695 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13696 = x13693 - x13695;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13697 = x13696 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13698 = Fp(x13697.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13698);
            reg = x13698;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13699 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13699 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13700 = x13697 - x13699;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13701 = x13700 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13702 = Fp(x13701.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13702);
            reg = x13702;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13703 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13703 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13704 = x13701 - x13703;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13705 = x13704 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13705);
          reg = x13705;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13706 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13706 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13707 = x102 - x13706;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13708 = x13706 * x13707;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13708);
          reg = x13708;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13709 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13709 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13710 = x99 - x13706;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13711 = x13709 * x13710;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13711 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":432:25)
      auto x13712 = x102 - x13689;
      if (x13712 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13685);
          reg = x13685;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13684);
          reg = x13684;
        }
      }
      // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13713 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x13713 != Fp::invalid());
      if (x13713 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":438:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13714 = x13680 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13715 = Fp(x13714.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13715);
            reg = x13715;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13716 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13716 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13717 = x13714 - x13716;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13718 = x13717 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13719 = Fp(x13718.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13719);
            reg = x13719;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13720 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13720 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13721 = x13718 - x13720;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13722 = x13721 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13723 = Fp(x13722.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13723);
            reg = x13723;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13724 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13724 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13725 = x13722 - x13724;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13726 = x13725 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13727 = Fp(x13726.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13727);
            reg = x13727;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13728 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13728 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13729 = x13726 - x13728;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13730 = x13729 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13730);
          reg = x13730;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13731 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13731 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13732 = x102 - x13731;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13733 = x13731 * x13732;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13733);
          reg = x13733;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13734 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13734 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13735 = x99 - x13731;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13736 = x13734 * x13735;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13736 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      }
      // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13737 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x13737 != Fp::invalid());
      if (x13737 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":443:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":444:29))
        auto x13738 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13738 != Fp::invalid());
        host_args.at(0) = x13738;
        host(ctx, "log", "Returning to %x", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13739 = x13738 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13740 = Fp(x13739.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13740);
            reg = x13740;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13741 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13741 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13742 = x13739 - x13741;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13743 = x13742 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13744 = Fp(x13743.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13744);
            reg = x13744;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13745 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13745 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13746 = x13743 - x13745;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13747 = x13746 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13748 = Fp(x13747.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13748);
            reg = x13748;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13749 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13749 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13750 = x13747 - x13749;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13751 = x13750 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13752 = Fp(x13751.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13752);
            reg = x13752;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13753 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13753 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13754 = x13751 - x13753;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13755 = x13754 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13755);
          reg = x13755;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13756 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13756 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13757 = x102 - x13756;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13758 = x13756 * x13757;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13758);
          reg = x13758;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13759 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13759 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13760 = x99 - x13756;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13761 = x13759 * x13760;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13761 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/components/mux.h":39:25))
    auto x13762 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13762 != Fp::invalid());
    if (x13762 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13763 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x13763 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x13764 = x605 + x84;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x13765 = Fp(x13764.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13765);
          reg = x13765;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x13766 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x13766 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x13767 = x13764 - x13766;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x13768 = x13767 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x13769 = Fp(x13768.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13769);
          reg = x13769;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x13770 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x13770 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x13771 = x13768 - x13770;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x13772 = x13771 * x96;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x13773 = Fp(x13772.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13773);
          reg = x13773;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x13774 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x13774 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x13775 = x13772 - x13774;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x13776 = x13775 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x13777 = Fp(x13776.asUInt32() & x83.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13777);
          reg = x13777;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13778 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x13778 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x13779 = x13776 - x13778;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x13780 = x13779 * x82;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13780);
        reg = x13780;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13781 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x13781 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x13782 = x102 - x13781;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x13783 = x13781 * x13782;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13783);
        reg = x13783;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x13784 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x13784 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x13785 = x99 - x13781;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x13786 = x13784 * x13785;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x13786 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x605;
      host(ctx, "log", "  PageFault: PC = 0x%x", host_args.data(), 1, host_outs.data(), 0);
      // loc("Top/Code/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/page_fault.cpp":84:67))
      auto x13787 = args[0][5 * steps + ((cycle - 1) & mask)];
      assert(x13787 != Fp::invalid());
      if (x13787 != 0) {
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("cirgen/circuit/rv32im/page_fault.cpp":86:79))
        auto x13788 = args[2][107 * steps + ((cycle - 1) & mask)];
        assert(x13788 != Fp::invalid());
        if (x13788 != 0) {
          // loc("Top/Mux/4/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13789 = args[2][172 * steps + ((cycle - 1) & mask)];
          assert(x13789 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":89:23)
          auto x13790 = x102 - x13789;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":89:7)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13790);
            reg = x13790;
          }
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":91:27)
        auto x13791 = x102 - x13788;
        if (x13791 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":91:31)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":93:20)
      auto x13792 = x102 - x13787;
      if (x13792 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":93:24)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13793 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x13793 != Fp::invalid());
      if (x13793 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/page_fault.cpp":96:44))
        auto x13794 = args[2][165 * steps + ((cycle - 1) & mask)];
        assert(x13794 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":96:5)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13794);
          reg = x13794;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":99:20)
      auto x13795 = x102 - x13793;
      if (x13795 != 0) {
        {
          host_args.at(0) = x605;
          host(ctx, "pageRead", "", host_args.data(), 1, host_outs.data(), 2);
          auto x13796 = host_outs.at(0);
          auto x13797 = host_outs.at(1);
          // loc("cirgen/circuit/rv32im/page_fault.cpp":102:7)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13796);
            reg = x13796;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13797);
            reg = x13797;
          }
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x13798 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x13798 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":109:20)
      auto x13799 = x13798 - x6;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13800 = (x13799 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13800);
          reg = x13800;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13801 = inv(x13799);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13801);
          reg = x13801;
        }
      }
      // loc("Top/Mux/4/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13802 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x13802 != Fp::invalid());
      if (x13802 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x13799 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x13803 = x102 - x13802;
      if (x13803 != 0) {
        // loc("Top/Mux/4/Mux/13/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13804 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x13804 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13805 = x13799 * x13804;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13806 = x13805 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13806 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x13802 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:5)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":112:5)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
      }
      if (x13803 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":115:5)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":116:5)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      if (x13795 != 0) {
        // loc("Top/Mux/4/Mux/13/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13807 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x13807 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:38)
        auto x13808 = x102 - x13807;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:37)
        auto x13809 = x13808 * x18;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:22)
        auto x13810 = x13807 + x13809;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:22)
        auto x13811 = x13807 * x18;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:51)
        auto x13812 = x13808 * x5;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:22)
        auto x13813 = x13811 + x13812;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":130:17)
        auto x13814 = x13798 - x13810;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13815 = Fp(x13814.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13815);
            reg = x13815;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13816 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x13816 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13817 = x13814 - x13816;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13818 = x13817 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13819 = Fp(x13818.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13819);
            reg = x13819;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13820 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x13820 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13821 = x13818 - x13820;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13822 = x13821 * x96;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13822);
          reg = x13822;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":131:17)
        auto x13823 = x13813 - x102;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":131:17)
        auto x13824 = x13823 - x13798;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13825 = Fp(x13824.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13825);
            reg = x13825;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13826 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x13826 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13827 = x13824 - x13826;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13828 = x13827 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13829 = Fp(x13828.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13829);
            reg = x13829;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13830 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x13830 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13831 = x13828 - x13830;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13832 = x13831 * x96;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13832);
          reg = x13832;
        }
        if (x13807 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":134:7)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4);
            reg = x4;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
          auto x13833 = x13798 * x29;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
          auto x13834 = x13833 * x82;
          // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x13835 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x13835 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":170:16)
          auto x13836 = x13835 * x84;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":174:9)
          auto x13837 = x13834 + x13836;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":174:8)
          auto x13838 = x13837 * x84;
          host_args.at(0) = x13835;
          host_args.at(1) = x13798;
          host_args.at(2) = x13838;
          host(ctx, "log", "  count: %u, pageIndex: 0x%x, pageAddr: 0x%x", host_args.data(), 3, host_outs.data(), 0);
          {
            host_args.at(0) = x13837;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13839 = host_outs.at(0);
            auto x13840 = host_outs.at(1);
            auto x13841 = host_outs.at(2);
            auto x13842 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13839);
              reg = x13839;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13840);
              reg = x13840;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13841);
              reg = x13841;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13842);
              reg = x13842;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13843 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x13843 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13844 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x13844 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13845 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x13845 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13846 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x13846 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13837);
            reg = x13837;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13763);
            reg = x13763;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13843);
            reg = x13843;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13844);
            reg = x13844;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13845);
            reg = x13845;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13846);
            reg = x13846;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          auto x13847 = x13837 + x102;
          {
            host_args.at(0) = x13847;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13848 = host_outs.at(0);
            auto x13849 = host_outs.at(1);
            auto x13850 = host_outs.at(2);
            auto x13851 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13848);
              reg = x13848;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13849);
              reg = x13849;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13850);
              reg = x13850;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13851);
              reg = x13851;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13852 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13852 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13853 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13853 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13854 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13854 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13855 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13855 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13847);
            reg = x13847;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13763);
            reg = x13763;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13852);
            reg = x13852;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13853);
            reg = x13853;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13854);
            reg = x13854;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13855);
            reg = x13855;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          auto x13856 = x13837 + x99;
          {
            host_args.at(0) = x13856;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13857 = host_outs.at(0);
            auto x13858 = host_outs.at(1);
            auto x13859 = host_outs.at(2);
            auto x13860 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13857);
              reg = x13857;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13858);
              reg = x13858;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13859);
              reg = x13859;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13860);
              reg = x13860;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13861 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13861 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13862 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13862 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13863 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13863 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13864 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13864 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13856);
            reg = x13856;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13763);
            reg = x13763;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13861);
            reg = x13861;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13862);
            reg = x13862;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13863);
            reg = x13863;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13864);
            reg = x13864;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          auto x13865 = x13837 + x83;
          {
            host_args.at(0) = x13865;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13866 = host_outs.at(0);
            auto x13867 = host_outs.at(1);
            auto x13868 = host_outs.at(2);
            auto x13869 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][133 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13866);
              reg = x13866;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][134 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13867);
              reg = x13867;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][135 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13868);
              reg = x13868;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][136 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13869);
              reg = x13869;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13870 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13870 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13871 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13871 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13872 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13872 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13873 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x13873 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13865);
            reg = x13865;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13763);
            reg = x13763;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13870);
            reg = x13870;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13871);
            reg = x13871;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13872);
            reg = x13872;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13873);
            reg = x13873;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":136:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        if (x13808 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":140:28)
          auto x13874 = x13798 - x18;
          // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x13875 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x13875 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":140:28)
          auto x13876 = x13874 + x13875;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":141:40)
          auto x13877 = x13876 * x77;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":141:23)
          auto x13878 = x13877 + x3;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":142:7)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13878);
            reg = x13878;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":143:7)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2);
            reg = x2;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":147:7)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":148:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x76);
            reg = x76;
          }
        }
      }
      if (x13793 != 0) {
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/page_fault.cpp":156:40))
        auto x13879 = args[2][171 * steps + ((cycle - 1) & mask)];
        assert(x13879 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":156:40)
        auto x13880 = x13879 - x102;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":156:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13880);
          reg = x13880;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x13881 = x13798 * x29;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x13882 = x13881 * x82;
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13883 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13883 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":170:16)
        auto x13884 = x13883 * x84;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":174:9)
        auto x13885 = x13882 + x13884;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":174:8)
        auto x13886 = x13885 * x84;
        host_args.at(0) = x13883;
        host_args.at(1) = x13798;
        host_args.at(2) = x13886;
        host(ctx, "log", "  count: %u, pageIndex: 0x%x, pageAddr: 0x%x", host_args.data(), 3, host_outs.data(), 0);
        {
          host_args.at(0) = x13885;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13887 = host_outs.at(0);
          auto x13888 = host_outs.at(1);
          auto x13889 = host_outs.at(2);
          auto x13890 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13887);
            reg = x13887;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13888);
            reg = x13888;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13889);
            reg = x13889;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13890);
            reg = x13890;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13891 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13891 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13892 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13892 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13893 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13893 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13894 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13894 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13885);
          reg = x13885;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13763);
          reg = x13763;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13891);
          reg = x13891;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13892);
          reg = x13892;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13893);
          reg = x13893;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13894);
          reg = x13894;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        auto x13895 = x13885 + x102;
        {
          host_args.at(0) = x13895;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13896 = host_outs.at(0);
          auto x13897 = host_outs.at(1);
          auto x13898 = host_outs.at(2);
          auto x13899 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13896);
            reg = x13896;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13897);
            reg = x13897;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13898);
            reg = x13898;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13899);
            reg = x13899;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13900 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13900 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13901 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13901 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13902 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13902 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13903 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13903 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13895);
          reg = x13895;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13763);
          reg = x13763;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13900);
          reg = x13900;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13901);
          reg = x13901;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13902);
          reg = x13902;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13903);
          reg = x13903;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        auto x13904 = x13885 + x99;
        {
          host_args.at(0) = x13904;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13905 = host_outs.at(0);
          auto x13906 = host_outs.at(1);
          auto x13907 = host_outs.at(2);
          auto x13908 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13905);
            reg = x13905;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13906);
            reg = x13906;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13907);
            reg = x13907;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13908);
            reg = x13908;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13909 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13909 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13910 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13910 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13911 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13911 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13912 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13912 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13904);
          reg = x13904;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13763);
          reg = x13763;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13909);
          reg = x13909;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13910);
          reg = x13910;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13911);
          reg = x13911;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13912);
          reg = x13912;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        auto x13913 = x13885 + x83;
        {
          host_args.at(0) = x13913;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13914 = host_outs.at(0);
          auto x13915 = host_outs.at(1);
          auto x13916 = host_outs.at(2);
          auto x13917 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13914);
            reg = x13914;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13915);
            reg = x13915;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13916);
            reg = x13916;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13917);
            reg = x13917;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13918 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13918 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13919 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13919 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13920 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13920 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13921 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13921 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13913);
          reg = x13913;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13763);
          reg = x13763;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13918);
          reg = x13918;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13919);
          reg = x13919;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13920);
          reg = x13920;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13921);
          reg = x13921;
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13922 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x13922 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13923 = (x13922 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13923);
          reg = x13923;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13924 = inv(x13922);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13924);
          reg = x13924;
        }
      }
      // loc("Top/Mux/4/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13925 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x13925 != Fp::invalid());
      if (x13925 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x13922 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x13926 = x102 - x13925;
      if (x13926 != 0) {
        // loc("Top/Mux/4/Mux/13/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13927 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13927 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13928 = x13922 * x13927;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13929 = x13928 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13929 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x13793 != 0) {
        if (x13925 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":163:31)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        if (x13926 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":164:35)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[14](Reg)"("./cirgen/components/mux.h":39:25))
    auto x13930 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x13930 != Fp::invalid());
    if (x13930 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13931 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x13931 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/ecall.cpp":172:70))
      auto x13932 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x13932 != Fp::invalid());
      if (x13932 != 0) {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13933 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x13933 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13934 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x13934 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13935 = args[2][128 * steps + ((cycle - 1) & mask)];
        assert(x13935 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13936 = args[2][129 * steps + ((cycle - 1) & mask)];
        assert(x13936 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x13937 = x13934 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13938 = x13933 + x13937;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13939 = x13935 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13940 = x13938 + x13939;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13941 = x13936 * x85;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13942 = x13940 + x13941;
        // loc("cirgen/circuit/rv32im/ecall.cpp":182:98)
        auto x13943 = x13942 * x82;
        // loc("Top/Mux/4/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13944 = args[2][79 * steps + ((cycle - 1) & mask)];
        assert(x13944 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":182:98)
        auto x13945 = x13944 + x102;
        // loc("cirgen/circuit/rv32im/ecall.cpp":182:98)
        auto x13946 = x13943 + x13945;
        // loc("cirgen/circuit/rv32im/ecall.cpp":182:98)
        auto x13947 = x13946 - x84;
        // loc("cirgen/circuit/rv32im/ecall.cpp":180:5)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13947);
          reg = x13947;
        }
        // loc("Top/Mux/4/Mux/8/Mux/2/Reg"("cirgen/circuit/rv32im/ecall.cpp":183:63))
        auto x13948 = args[2][182 * steps + ((cycle - 1) & mask)];
        assert(x13948 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":183:5)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13948);
          reg = x13948;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":186:22)
      auto x13949 = x102 - x13932;
      if (x13949 != 0) {
        // loc("Top/Mux/4/Mux/14/Reg"("cirgen/circuit/rv32im/ecall.cpp":187:56))
        auto x13950 = args[2][162 * steps + ((cycle - 1) & mask)];
        assert(x13950 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":187:56)
        auto x13951 = x13950 - x102;
        // loc("cirgen/circuit/rv32im/ecall.cpp":187:5)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13951);
          reg = x13951;
        }
        // loc("Top/Mux/4/Mux/14/Reg"("cirgen/circuit/rv32im/ecall.cpp":188:46))
        auto x13952 = args[2][163 * steps + ((cycle - 1) & mask)];
        assert(x13952 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":188:46)
        auto x13953 = x13952 + x84;
        // loc("cirgen/circuit/rv32im/ecall.cpp":188:5)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13953);
          reg = x13953;
        }
      }
      // loc("Top/Mux/4/Mux/14/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13954 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x13954 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13955 = (x13954 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13955);
          reg = x13955;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13956 = inv(x13954);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13956);
          reg = x13956;
        }
      }
      // loc("Top/Mux/4/Mux/14/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13957 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x13957 != Fp::invalid());
      if (x13957 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x13954 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x13958 = x102 - x13957;
      if (x13958 != 0) {
        // loc("Top/Mux/4/Mux/14/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13959 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x13959 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13960 = x13954 * x13959;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13961 = x13960 - x102;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13961 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x13932 != 0) {
        // loc("Top/Mux/4/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13962 = args[2][79 * steps + ((cycle - 1) & mask)];
        assert(x13962 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":196:80)
        auto x13963 = x13962 + x102;
        // loc("cirgen/circuit/rv32im/ecall.cpp":196:80)
        auto x13964 = x13963 * x13958;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13965 = (x13964 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13965);
            reg = x13965;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13966 = x13964 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13967 = (x13966 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13967);
            reg = x13967;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13968 = x13964 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13969 = (x13968 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13969);
            reg = x13969;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13970 = x13964 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13971 = (x13970 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13971);
            reg = x13971;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13972 = x13964 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13973 = (x13972 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13973);
            reg = x13973;
          }
        }
        // loc("Top/Mux/4/Mux/14/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13974 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x13974 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13975 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x13975 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13976 = x13975 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13977 = x13974 + x13976;
        // loc("Top/Mux/4/Mux/14/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13978 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x13978 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13979 = x13978 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13980 = x13977 + x13979;
        // loc("Top/Mux/4/Mux/14/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13981 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x13981 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13982 = x13981 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13983 = x13980 + x13982;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x13984 = x13983 - x13964;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x13984 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/Mux/4/Mux/14/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13985 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x13985 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":199:10)
        auto x13986 = x13985 * x84;
        host_args.at(0) = x13986;
        host_args.at(1) = x13954;
        host_args.at(2) = x13983;
        host(ctx, "log", "  COPYIN INIT: dest=%x, remaining=%u first chunk words=%u", host_args.data(), 3, host_outs.data(), 0);
      }
      if (x13949 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":204:43)
        auto x13987 = x13958 * x84;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13988 = (x13987 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13988);
            reg = x13988;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13989 = x13987 - x102;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13990 = (x13989 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13990);
            reg = x13990;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13991 = x13987 - x99;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13992 = (x13991 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13992);
            reg = x13992;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13993 = x13987 - x83;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13994 = (x13993 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13994);
            reg = x13994;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13995 = x13987 - x84;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13996 = (x13995 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13996);
            reg = x13996;
          }
        }
        // loc("Top/Mux/4/Mux/14/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13997 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x13997 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13998 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x13998 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13999 = x13998 * x99;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x14000 = x13997 + x13999;
        // loc("Top/Mux/4/Mux/14/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x14001 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x14001 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x14002 = x14001 * x83;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x14003 = x14000 + x14002;
        // loc("Top/Mux/4/Mux/14/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x14004 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x14004 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x14005 = x14004 * x84;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x14006 = x14003 + x14005;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x14007 = x14006 - x13987;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x14007 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/Mux/4/Mux/14/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":206:24))
      auto x14008 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x14008 != Fp::invalid());
      if (x14008 != 0) {
        {
          host(ctx, "syscallFini", "", host_args.data(), 0, host_outs.data(), 8);
          auto x14009 = host_outs.at(0);
          auto x14010 = host_outs.at(1);
          auto x14011 = host_outs.at(2);
          auto x14012 = host_outs.at(3);
          auto x14013 = host_outs.at(4);
          auto x14014 = host_outs.at(5);
          auto x14015 = host_outs.at(6);
          auto x14016 = host_outs.at(7);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14009);
            reg = x14009;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14010);
            reg = x14010;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14011);
            reg = x14011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14012);
            reg = x14012;
          }
          {
            host_args.at(0) = x34;
            host_args.at(1) = x14009;
            host_args.at(2) = x14010;
            host_args.at(3) = x14011;
            host_args.at(4) = x14012;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14017 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x14017 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14018 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x14018 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14019 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x14019 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14020 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x14020 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x34);
            reg = x34;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13931);
            reg = x13931;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14017);
            reg = x14017;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14018);
            reg = x14018;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14019);
            reg = x14019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14020);
            reg = x14020;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14013);
            reg = x14013;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14014);
            reg = x14014;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14015);
            reg = x14015;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14016);
            reg = x14016;
          }
          {
            host_args.at(0) = x33;
            host_args.at(1) = x14013;
            host_args.at(2) = x14014;
            host_args.at(3) = x14015;
            host_args.at(4) = x14016;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14021 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x14021 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14022 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x14022 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14023 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x14023 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14024 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x14024 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x33);
            reg = x33;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13931);
            reg = x13931;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14021);
            reg = x14021;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14022);
            reg = x14022;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14023);
            reg = x14023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14024);
            reg = x14024;
          }
        }
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x14025 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14025 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":215:8)
        auto x14026 = x14025 - x13931;
        // loc("cirgen/circuit/rv32im/ecall.cpp":215:8)
        if (x14026 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:215");
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x14027 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14027 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":216:8)
        auto x14028 = x14027 - x13931;
        // loc("cirgen/circuit/rv32im/ecall.cpp":216:8)
        if (x14028 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:216");
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x14029 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14029 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":218:8)
        auto x14030 = x14029 - x34;
        // loc("cirgen/circuit/rv32im/ecall.cpp":218:8)
        if (x14030 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:218");
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x14031 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14031 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":219:8)
        auto x14032 = x14031 - x33;
        // loc("cirgen/circuit/rv32im/ecall.cpp":219:8)
        if (x14032 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:219");
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14033 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14033 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14034 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14034 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14035 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14035 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14036 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14036 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14037 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14037 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14038 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14038 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14039 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14039 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14040 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14040 != Fp::invalid());
        host_args.at(0) = x14033;
        host_args.at(1) = x14034;
        host_args.at(2) = x14035;
        host_args.at(3) = x14036;
        host_args.at(4) = x14037;
        host_args.at(5) = x14038;
        host_args.at(6) = x14039;
        host_args.at(7) = x14040;
        host(ctx, "log", "  COPYIN FINI: a0=%w a1=%w", host_args.data(), 8, host_outs.data(), 0);
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":226:19)
        auto x14041 = x605 + x84;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x14042 = x14041 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x14043 = Fp(x14042.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14043);
            reg = x14043;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x14044 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x14044 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x14045 = x14042 - x14044;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x14046 = x14045 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x14047 = Fp(x14046.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14047);
            reg = x14047;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x14048 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x14048 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x14049 = x14046 - x14048;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x14050 = x14049 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x14051 = Fp(x14050.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14051);
            reg = x14051;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x14052 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x14052 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x14053 = x14050 - x14052;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x14054 = x14053 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x14055 = Fp(x14054.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14055);
            reg = x14055;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14056 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x14056 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x14057 = x14054 - x14056;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x14058 = x14057 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14058);
          reg = x14058;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14059 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x14059 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x14060 = x102 - x14059;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x14061 = x14059 * x14060;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14061);
          reg = x14061;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x14062 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x14062 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x14063 = x99 - x14059;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x14064 = x14062 * x14063;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x14064 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":229:28)
      auto x14065 = x102 - x14008;
      if (x14065 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x14066 = x605 + x84;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x14067 = Fp(x14066.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14067);
            reg = x14067;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x14068 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x14068 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x14069 = x14066 - x14068;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x14070 = x14069 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x14071 = Fp(x14070.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14071);
            reg = x14071;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x14072 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x14072 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x14073 = x14070 - x14072;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x14074 = x14073 * x96;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x14075 = Fp(x14074.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14075);
            reg = x14075;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x14076 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x14076 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x14077 = x14074 - x14076;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x14078 = x14077 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x14079 = Fp(x14078.asUInt32() & x83.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14079);
            reg = x14079;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14080 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x14080 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x14081 = x14078 - x14080;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x14082 = x14081 * x82;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14082);
          reg = x14082;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14083 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x14083 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x14084 = x102 - x14083;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x14085 = x14083 * x14084;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14085);
          reg = x14085;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x14086 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x14086 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x14087 = x99 - x14083;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x14088 = x14086 * x14087;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x14088 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":231:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
      }
      // loc("Top/Mux/4/Mux/14/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/ecall.cpp":241:35))
      auto x14089 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x14089 != Fp::invalid());
      // loc("Top/Mux/4/Mux/14/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/ecall.cpp":241:35))
      auto x14090 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x14090 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":241:22)
      auto x14091 = x14089 + x14090;
      // loc("Top/Mux/4/Mux/14/OneHot/hot[3](Reg)"("cirgen/circuit/rv32im/ecall.cpp":241:35))
      auto x14092 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x14092 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":241:22)
      auto x14093 = x14091 + x14092;
      // loc("Top/Mux/4/Mux/14/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/ecall.cpp":239:35))
      auto x14094 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x14094 != Fp::invalid());
      if (x14094 != 0) {
        // loc("Top/Mux/4/Mux/14/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x14095 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x14095 != Fp::invalid());
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x14096 = host_outs.at(0);
          auto x14097 = host_outs.at(1);
          auto x14098 = host_outs.at(2);
          auto x14099 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14096);
            reg = x14096;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14097);
            reg = x14097;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14098);
            reg = x14098;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14099);
            reg = x14099;
          }
          {
            host_args.at(0) = x14095;
            host_args.at(1) = x14096;
            host_args.at(2) = x14097;
            host_args.at(3) = x14098;
            host_args.at(4) = x14099;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14100 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x14100 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14101 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x14101 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14102 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x14102 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14103 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x14103 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14095);
            reg = x14095;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13931);
            reg = x13931;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14100);
            reg = x14100;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14101);
            reg = x14101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14102);
            reg = x14102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14103);
            reg = x14103;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":250:41)
          auto x14104 = x14095 * x84;
          host_args.at(0) = x14104;
          host_args.at(1) = x14100;
          host_args.at(2) = x14101;
          host_args.at(3) = x14102;
          host_args.at(4) = x14103;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x14105 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14105 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":253:10)
        auto x14106 = x14105 - x13931;
        // loc("cirgen/circuit/rv32im/ecall.cpp":253:10)
        if (x14106 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:253");
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x14107 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14107 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":254:10)
        auto x14108 = x14107 - x14095;
        // loc("cirgen/circuit/rv32im/ecall.cpp":254:10)
        if (x14108 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:254");
      }
      if (x14093 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":239:22)
      auto x14109 = x14092 + x14094;
      if (x14109 != 0) {
        // loc("Top/Mux/4/Mux/14/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x14110 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x14110 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":246:23)
        auto x14111 = x14110 + x102;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x14112 = host_outs.at(0);
          auto x14113 = host_outs.at(1);
          auto x14114 = host_outs.at(2);
          auto x14115 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14112);
            reg = x14112;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14113);
            reg = x14113;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14114);
            reg = x14114;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14115);
            reg = x14115;
          }
          {
            host_args.at(0) = x14111;
            host_args.at(1) = x14112;
            host_args.at(2) = x14113;
            host_args.at(3) = x14114;
            host_args.at(4) = x14115;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14116 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x14116 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14117 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x14117 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14118 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x14118 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14119 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x14119 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14111);
            reg = x14111;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13931);
            reg = x13931;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14116);
            reg = x14116;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14117);
            reg = x14117;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14118);
            reg = x14118;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14119);
            reg = x14119;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":250:41)
          auto x14120 = x14111 * x84;
          host_args.at(0) = x14120;
          host_args.at(1) = x14116;
          host_args.at(2) = x14117;
          host_args.at(3) = x14118;
          host_args.at(4) = x14119;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x14121 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14121 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":253:10)
        auto x14122 = x14121 - x13931;
        // loc("cirgen/circuit/rv32im/ecall.cpp":253:10)
        if (x14122 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:253");
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x14123 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14123 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":254:10)
        auto x14124 = x14123 - x14111;
        // loc("cirgen/circuit/rv32im/ecall.cpp":254:10)
        if (x14124 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:254");
      }
      if (x14091 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":239:22)
      auto x14125 = x14090 + x14092;
      // loc("cirgen/circuit/rv32im/ecall.cpp":239:22)
      auto x14126 = x14125 + x14094;
      if (x14126 != 0) {
        // loc("Top/Mux/4/Mux/14/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x14127 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x14127 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":246:23)
        auto x14128 = x14127 + x99;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x14129 = host_outs.at(0);
          auto x14130 = host_outs.at(1);
          auto x14131 = host_outs.at(2);
          auto x14132 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14129);
            reg = x14129;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14130);
            reg = x14130;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14131);
            reg = x14131;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14132);
            reg = x14132;
          }
          {
            host_args.at(0) = x14128;
            host_args.at(1) = x14129;
            host_args.at(2) = x14130;
            host_args.at(3) = x14131;
            host_args.at(4) = x14132;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14133 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x14133 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14134 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x14134 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14135 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x14135 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14136 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x14136 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14128);
            reg = x14128;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13931);
            reg = x13931;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14133);
            reg = x14133;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14134);
            reg = x14134;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14135);
            reg = x14135;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14136);
            reg = x14136;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":250:41)
          auto x14137 = x14128 * x84;
          host_args.at(0) = x14137;
          host_args.at(1) = x14133;
          host_args.at(2) = x14134;
          host_args.at(3) = x14135;
          host_args.at(4) = x14136;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x14138 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14138 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":253:10)
        auto x14139 = x14138 - x13931;
        // loc("cirgen/circuit/rv32im/ecall.cpp":253:10)
        if (x14139 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:253");
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x14140 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14140 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":254:10)
        auto x14141 = x14140 - x14128;
        // loc("cirgen/circuit/rv32im/ecall.cpp":254:10)
        if (x14141 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:254");
      }
      if (x14089 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":239:22)
      auto x14142 = x14093 + x14094;
      if (x14142 != 0) {
        // loc("Top/Mux/4/Mux/14/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x14143 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x14143 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":246:23)
        auto x14144 = x14143 + x83;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x14145 = host_outs.at(0);
          auto x14146 = host_outs.at(1);
          auto x14147 = host_outs.at(2);
          auto x14148 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14145);
            reg = x14145;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14146);
            reg = x14146;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14147);
            reg = x14147;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14148);
            reg = x14148;
          }
          {
            host_args.at(0) = x14144;
            host_args.at(1) = x14145;
            host_args.at(2) = x14146;
            host_args.at(3) = x14147;
            host_args.at(4) = x14148;
            host_args.at(5) = x99;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14149 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x14149 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14150 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x14150 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14151 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x14151 != Fp::invalid());
          // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x14152 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x14152 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14144);
            reg = x14144;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13931);
            reg = x13931;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14149);
            reg = x14149;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14150);
            reg = x14150;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14151);
            reg = x14151;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14152);
            reg = x14152;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":250:41)
          auto x14153 = x14144 * x84;
          host_args.at(0) = x14153;
          host_args.at(1) = x14149;
          host_args.at(2) = x14150;
          host_args.at(3) = x14151;
          host_args.at(4) = x14152;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x14154 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14154 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":253:10)
        auto x14155 = x14154 - x13931;
        // loc("cirgen/circuit/rv32im/ecall.cpp":253:10)
        if (x14155 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:253");
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x14156 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14156 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":254:10)
        auto x14157 = x14156 - x14144;
        // loc("cirgen/circuit/rv32im/ecall.cpp":254:10)
        if (x14157 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:254");
      }
      if (x101 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
  }
  // loc("Top/Code/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":39:25))
  auto x14158 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x14158 != Fp::invalid());
  if (x14158 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x14159 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x14159 != Fp::invalid());
    host_args.at(0) = x14159;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
    // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14160 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x14160 != Fp::invalid());
    // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14161 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x14161 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14162 = x14161 * x99;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14163 = x14160 + x14162;
    // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14164 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x14164 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14165 = x14164 * x83;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14166 = x14163 + x14165;
    // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14167 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x14167 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14168 = x14167 * x84;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14169 = x14166 + x14168;
    // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14170 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x14170 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14171 = x14170 * x80;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14172 = x14169 + x14171;
    // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14173 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x14173 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14174 = x14173 * x79;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14175 = x14172 + x14174;
    // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14176 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x14176 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14177 = x14176 * x78;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14178 = x14175 + x14177;
    // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14179 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x14179 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14180 = x14179 * x77;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14181 = x14178 + x14180;
    // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14182 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x14182 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14183 = x14182 * x76;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14184 = x14181 + x14183;
    // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14185 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x14185 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14186 = x14185 * x75;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14187 = x14184 + x14186;
    // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14188 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x14188 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14189 = x14188 * x74;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14190 = x14187 + x14189;
    // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14191 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x14191 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14192 = x14191 * x73;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14193 = x14190 + x14192;
    // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14194 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x14194 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14195 = x14194 * x72;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14196 = x14193 + x14195;
    // loc("Top/Mux/4/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14197 = args[2][108 * steps + ((cycle - 1) & mask)];
    assert(x14197 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14198 = x14197 * x71;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14199 = x14196 + x14198;
    // loc("cirgen/circuit/rv32im/top.cpp":48:38)
    auto x14200 = x14199 - x77;
    // loc("cirgen/circuit/rv32im/top.cpp":48:38)
    if (x14200 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:48");
    // loc("Top/Mux/4/Mux/8/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14201 = args[2][178 * steps + ((cycle - 1) & mask)];
    assert(x14201 != Fp::invalid());
    // loc("Top/Mux/4/Mux/8/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14202 = args[2][179 * steps + ((cycle - 1) & mask)];
    assert(x14202 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14203 = x14202 * x99;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14204 = x14201 + x14203;
    // loc("Top/Mux/4/Mux/8/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14205 = args[2][180 * steps + ((cycle - 1) & mask)];
    assert(x14205 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14206 = x14205 * x83;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14207 = x14204 + x14206;
    // loc("Top/Mux/4/Mux/8/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x14208 = args[2][181 * steps + ((cycle - 1) & mask)];
    assert(x14208 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x14209 = x14208 * x84;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x14210 = x14207 + x14209;
    // loc("cirgen/circuit/rv32im/top.cpp":50:39)
    if (x14210 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:50");
  }
  // loc("Top/Code/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":39:25))
  auto x14211 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x14211 != Fp::invalid());
  if (x14211 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x14212 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x14212 != Fp::invalid());
    host_args.at(0) = x14212;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/top.cpp":71:27))
  auto x14213 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x14213 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x14214 = x14213 + x103;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x14215 = x14214 + x428;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x14216 = x14215 + x481;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x14217 = x14216 + x591;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x14218 = x14217 + x14158;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x14219 = x14218 + x14211;
  if (x591 != 0) {
    // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/top.cpp":79:19))
    auto x14220 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x14220 != Fp::invalid());
    if (x14220 != 0) {
      // loc("Top/Mux/4/Mux/8/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/top.cpp":82:20))
      auto x14221 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x14221 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/top.cpp":83:7)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x14221);
        reg = x14221;
      }
    }
    // loc("cirgen/circuit/rv32im/top.cpp":85:19)
    auto x14222 = x102 - x14220;
    if (x14222 != 0) {
      // loc("cirgen/circuit/rv32im/top.cpp":85:23)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":87:23)
  auto x14223 = x14219 - x591;
  if (x14223 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":87:27)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
  }
  // loc("Top/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
  auto x14224 = args[2][9 * steps + ((cycle - 0) & mask)];
  assert(x14224 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":88:10)
  auto x14225 = x102 - x14224;
  if (x428 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/ram.cpp":43:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/ram.cpp":44:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/ram.cpp":45:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
  }
  if (x481 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
  }
  if (x591 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14226 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x14226 != Fp::invalid());
    if (x14226 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14227 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x14227 != Fp::invalid());
    if (x14227 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14228 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x14228 != Fp::invalid());
    if (x14228 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14229 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x14229 != Fp::invalid());
    if (x14229 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14230 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x14230 != Fp::invalid());
    if (x14230 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14231 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x14231 != Fp::invalid());
    if (x14231 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14232 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x14232 != Fp::invalid());
    if (x14232 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14233 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x14233 != Fp::invalid());
    if (x14233 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14234 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x14234 != Fp::invalid());
    if (x14234 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x14235 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x14235 != Fp::invalid());
      if (x14235 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x14236 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x14236 != Fp::invalid());
      if (x14236 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x14237 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x14237 != Fp::invalid());
      if (x14237 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x14238 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x14238 != Fp::invalid());
      if (x14238 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x14239 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x14239 != Fp::invalid());
      if (x14239 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14240 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x14240 != Fp::invalid());
    if (x14240 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14241 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x14241 != Fp::invalid());
    if (x14241 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14242 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x14242 != Fp::invalid());
    if (x14242 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14243 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x14243 != Fp::invalid());
    if (x14243 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14244 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x14244 != Fp::invalid());
    if (x14244 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14245 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x14245 != Fp::invalid());
    if (x14245 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
  }
  if (x14158 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
  }
  if (x428 != 0) {
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14246 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x14246 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14247 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x14247 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14248 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x14248 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14249 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x14249 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14250 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x14250 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14251 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x14251 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14252 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x14252 != Fp::invalid());
      host_args.at(0) = x14246;
      host_args.at(1) = x14247;
      host_args.at(2) = x14248;
      host_args.at(3) = x14249;
      host_args.at(4) = x14250;
      host_args.at(5) = x14251;
      host_args.at(6) = x14252;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14253 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x14253 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14254 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x14254 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14255 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x14255 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14256 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x14256 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14257 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x14257 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14258 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x14258 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14259 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x14259 != Fp::invalid());
      host_args.at(0) = x14253;
      host_args.at(1) = x14254;
      host_args.at(2) = x14255;
      host_args.at(3) = x14256;
      host_args.at(4) = x14257;
      host_args.at(5) = x14258;
      host_args.at(6) = x14259;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14260 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x14260 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14261 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x14261 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14262 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x14262 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14263 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x14263 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14264 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x14264 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14265 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x14265 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14266 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x14266 != Fp::invalid());
      host_args.at(0) = x14260;
      host_args.at(1) = x14261;
      host_args.at(2) = x14262;
      host_args.at(3) = x14263;
      host_args.at(4) = x14264;
      host_args.at(5) = x14265;
      host_args.at(6) = x14266;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14267 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x14267 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14268 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x14268 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14269 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x14269 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14270 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x14270 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14271 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x14271 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14272 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x14272 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14273 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x14273 != Fp::invalid());
      host_args.at(0) = x14267;
      host_args.at(1) = x14268;
      host_args.at(2) = x14269;
      host_args.at(3) = x14270;
      host_args.at(4) = x14271;
      host_args.at(5) = x14272;
      host_args.at(6) = x14273;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x481 != 0) {
    {
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14274 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x14274 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14275 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x14275 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14276 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x14276 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14277 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x14277 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14278 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x14278 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14279 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x14279 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14280 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x14280 != Fp::invalid());
      host_args.at(0) = x14274;
      host_args.at(1) = x14275;
      host_args.at(2) = x14276;
      host_args.at(3) = x14277;
      host_args.at(4) = x14278;
      host_args.at(5) = x14279;
      host_args.at(6) = x14280;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14281 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x14281 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14282 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x14282 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14283 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x14283 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14284 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x14284 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14285 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x14285 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14286 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x14286 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14287 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x14287 != Fp::invalid());
      host_args.at(0) = x14281;
      host_args.at(1) = x14282;
      host_args.at(2) = x14283;
      host_args.at(3) = x14284;
      host_args.at(4) = x14285;
      host_args.at(5) = x14286;
      host_args.at(6) = x14287;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14288 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x14288 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14289 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x14289 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14290 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x14290 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14291 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x14291 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14292 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x14292 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14293 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x14293 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14294 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x14294 != Fp::invalid());
      host_args.at(0) = x14288;
      host_args.at(1) = x14289;
      host_args.at(2) = x14290;
      host_args.at(3) = x14291;
      host_args.at(4) = x14292;
      host_args.at(5) = x14293;
      host_args.at(6) = x14294;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14295 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x14295 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14296 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x14296 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14297 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x14297 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14298 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x14298 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14299 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x14299 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14300 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x14300 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x14301 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x14301 != Fp::invalid());
      host_args.at(0) = x14295;
      host_args.at(1) = x14296;
      host_args.at(2) = x14297;
      host_args.at(3) = x14298;
      host_args.at(4) = x14299;
      host_args.at(5) = x14300;
      host_args.at(6) = x14301;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x591 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14302 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x14302 != Fp::invalid());
    if (x14302 != 0) {
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14303 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14303 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14304 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14304 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14305 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14305 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14306 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14306 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14307 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14307 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14308 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14308 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14309 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14309 != Fp::invalid());
        host_args.at(0) = x14303;
        host_args.at(1) = x14304;
        host_args.at(2) = x14305;
        host_args.at(3) = x14306;
        host_args.at(4) = x14307;
        host_args.at(5) = x14308;
        host_args.at(6) = x14309;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14310 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14310 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14311 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14311 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14312 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14313 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14313 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14314 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14314 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14315 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14315 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14316 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14316 != Fp::invalid());
        host_args.at(0) = x14310;
        host_args.at(1) = x14311;
        host_args.at(2) = x14312;
        host_args.at(3) = x14313;
        host_args.at(4) = x14314;
        host_args.at(5) = x14315;
        host_args.at(6) = x14316;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14317 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14317 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14318 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14318 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14319 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14319 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14320 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14320 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14321 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14321 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14322 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14322 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14323 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14323 != Fp::invalid());
        host_args.at(0) = x14317;
        host_args.at(1) = x14318;
        host_args.at(2) = x14319;
        host_args.at(3) = x14320;
        host_args.at(4) = x14321;
        host_args.at(5) = x14322;
        host_args.at(6) = x14323;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14324 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14324 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14325 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14325 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14326 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14326 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14327 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14327 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14328 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14328 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14329 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14329 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14330 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14330 != Fp::invalid());
        host_args.at(0) = x14324;
        host_args.at(1) = x14325;
        host_args.at(2) = x14326;
        host_args.at(3) = x14327;
        host_args.at(4) = x14328;
        host_args.at(5) = x14329;
        host_args.at(6) = x14330;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14331 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x14331 != Fp::invalid());
    if (x14331 != 0) {
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14332 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14333 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14333 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14334 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14334 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14335 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14335 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14336 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14336 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14337 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14337 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14338 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14338 != Fp::invalid());
        host_args.at(0) = x14332;
        host_args.at(1) = x14333;
        host_args.at(2) = x14334;
        host_args.at(3) = x14335;
        host_args.at(4) = x14336;
        host_args.at(5) = x14337;
        host_args.at(6) = x14338;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14339 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14339 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14340 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14340 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14341 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14341 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14342 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14342 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14343 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14343 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14344 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14344 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14345 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14345 != Fp::invalid());
        host_args.at(0) = x14339;
        host_args.at(1) = x14340;
        host_args.at(2) = x14341;
        host_args.at(3) = x14342;
        host_args.at(4) = x14343;
        host_args.at(5) = x14344;
        host_args.at(6) = x14345;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14346 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14346 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14347 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14348 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14348 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14349 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14349 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14350 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14350 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14351 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14351 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14352 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14352 != Fp::invalid());
        host_args.at(0) = x14346;
        host_args.at(1) = x14347;
        host_args.at(2) = x14348;
        host_args.at(3) = x14349;
        host_args.at(4) = x14350;
        host_args.at(5) = x14351;
        host_args.at(6) = x14352;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14353 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14353 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14354 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14354 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14355 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14355 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14356 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14356 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14357 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14357 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14358 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14358 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14359 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14359 != Fp::invalid());
        host_args.at(0) = x14353;
        host_args.at(1) = x14354;
        host_args.at(2) = x14355;
        host_args.at(3) = x14356;
        host_args.at(4) = x14357;
        host_args.at(5) = x14358;
        host_args.at(6) = x14359;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14360 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x14360 != Fp::invalid());
    if (x14360 != 0) {
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14361 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14361 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14362 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14362 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14363 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14363 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14364 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14364 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14365 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14365 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14366 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14366 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14367 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14367 != Fp::invalid());
        host_args.at(0) = x14361;
        host_args.at(1) = x14362;
        host_args.at(2) = x14363;
        host_args.at(3) = x14364;
        host_args.at(4) = x14365;
        host_args.at(5) = x14366;
        host_args.at(6) = x14367;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14368 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14368 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14369 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14369 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14370 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14370 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14371 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14371 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14372 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14372 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14373 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14373 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14374 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14374 != Fp::invalid());
        host_args.at(0) = x14368;
        host_args.at(1) = x14369;
        host_args.at(2) = x14370;
        host_args.at(3) = x14371;
        host_args.at(4) = x14372;
        host_args.at(5) = x14373;
        host_args.at(6) = x14374;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14375 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14375 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14376 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14376 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14377 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14377 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14378 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14378 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14379 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14379 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14380 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14380 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14381 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14381 != Fp::invalid());
        host_args.at(0) = x14375;
        host_args.at(1) = x14376;
        host_args.at(2) = x14377;
        host_args.at(3) = x14378;
        host_args.at(4) = x14379;
        host_args.at(5) = x14380;
        host_args.at(6) = x14381;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14382 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14382 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14383 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14383 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14384 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14384 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14385 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14385 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14386 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14386 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14387 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14387 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14388 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14388 != Fp::invalid());
        host_args.at(0) = x14382;
        host_args.at(1) = x14383;
        host_args.at(2) = x14384;
        host_args.at(3) = x14385;
        host_args.at(4) = x14386;
        host_args.at(5) = x14387;
        host_args.at(6) = x14388;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14389 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x14389 != Fp::invalid());
    if (x14389 != 0) {
      {
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14390 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14390 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14391 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14391 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14392 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14392 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14393 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14393 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14394 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14394 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14395 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14395 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14396 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14396 != Fp::invalid());
        host_args.at(0) = x14390;
        host_args.at(1) = x14391;
        host_args.at(2) = x14392;
        host_args.at(3) = x14393;
        host_args.at(4) = x14394;
        host_args.at(5) = x14395;
        host_args.at(6) = x14396;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14397 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14397 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14398 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14398 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14399 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14399 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14400 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14400 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14401 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14401 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14402 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14402 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14403 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14403 != Fp::invalid());
        host_args.at(0) = x14397;
        host_args.at(1) = x14398;
        host_args.at(2) = x14399;
        host_args.at(3) = x14400;
        host_args.at(4) = x14401;
        host_args.at(5) = x14402;
        host_args.at(6) = x14403;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14404 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14404 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14405 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14405 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14406 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14406 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14407 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14407 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14408 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14408 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14409 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14409 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14410 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14410 != Fp::invalid());
        host_args.at(0) = x14404;
        host_args.at(1) = x14405;
        host_args.at(2) = x14406;
        host_args.at(3) = x14407;
        host_args.at(4) = x14408;
        host_args.at(5) = x14409;
        host_args.at(6) = x14410;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14411 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14411 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14412 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14412 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14413 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14413 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14414 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14414 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14415 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14416 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14416 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14417 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14417 != Fp::invalid());
        host_args.at(0) = x14411;
        host_args.at(1) = x14412;
        host_args.at(2) = x14413;
        host_args.at(3) = x14414;
        host_args.at(4) = x14415;
        host_args.at(5) = x14416;
        host_args.at(6) = x14417;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14418 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14418 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14419 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14419 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14420 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14420 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14421 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14421 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14422 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14422 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14423 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14423 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14424 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x14424 != Fp::invalid());
        host_args.at(0) = x14418;
        host_args.at(1) = x14419;
        host_args.at(2) = x14420;
        host_args.at(3) = x14421;
        host_args.at(4) = x14422;
        host_args.at(5) = x14423;
        host_args.at(6) = x14424;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14425 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x14425 != Fp::invalid());
    if (x14425 != 0) {
      {
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14426 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14426 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14427 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14427 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14428 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14428 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14429 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14429 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14430 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14430 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14431 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14431 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14432 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14432 != Fp::invalid());
        host_args.at(0) = x14426;
        host_args.at(1) = x14427;
        host_args.at(2) = x14428;
        host_args.at(3) = x14429;
        host_args.at(4) = x14430;
        host_args.at(5) = x14431;
        host_args.at(6) = x14432;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14433 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14433 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14434 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14434 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14435 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14435 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14436 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14436 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14437 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14437 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14438 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14438 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14439 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14439 != Fp::invalid());
        host_args.at(0) = x14433;
        host_args.at(1) = x14434;
        host_args.at(2) = x14435;
        host_args.at(3) = x14436;
        host_args.at(4) = x14437;
        host_args.at(5) = x14438;
        host_args.at(6) = x14439;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14440 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14440 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14441 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14441 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14442 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14442 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14443 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14443 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14444 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14444 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14445 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14445 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14446 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14446 != Fp::invalid());
        host_args.at(0) = x14440;
        host_args.at(1) = x14441;
        host_args.at(2) = x14442;
        host_args.at(3) = x14443;
        host_args.at(4) = x14444;
        host_args.at(5) = x14445;
        host_args.at(6) = x14446;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14447 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14447 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14448 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14448 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14449 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14449 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14450 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14450 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14451 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14451 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14452 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14452 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14453 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14453 != Fp::invalid());
        host_args.at(0) = x14447;
        host_args.at(1) = x14448;
        host_args.at(2) = x14449;
        host_args.at(3) = x14450;
        host_args.at(4) = x14451;
        host_args.at(5) = x14452;
        host_args.at(6) = x14453;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14454 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x14454 != Fp::invalid());
    if (x14454 != 0) {
      {
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14455 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14455 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14456 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14456 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14457 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14457 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14458 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14458 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14459 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14459 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14460 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14460 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14461 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14461 != Fp::invalid());
        host_args.at(0) = x14455;
        host_args.at(1) = x14456;
        host_args.at(2) = x14457;
        host_args.at(3) = x14458;
        host_args.at(4) = x14459;
        host_args.at(5) = x14460;
        host_args.at(6) = x14461;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14462 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14462 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14463 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14463 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14464 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14464 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14465 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14465 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14466 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14466 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14467 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14467 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14468 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14468 != Fp::invalid());
        host_args.at(0) = x14462;
        host_args.at(1) = x14463;
        host_args.at(2) = x14464;
        host_args.at(3) = x14465;
        host_args.at(4) = x14466;
        host_args.at(5) = x14467;
        host_args.at(6) = x14468;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14469 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14469 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14470 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14470 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14471 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14471 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14472 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14472 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14473 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14473 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14474 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14474 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14475 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14475 != Fp::invalid());
        host_args.at(0) = x14469;
        host_args.at(1) = x14470;
        host_args.at(2) = x14471;
        host_args.at(3) = x14472;
        host_args.at(4) = x14473;
        host_args.at(5) = x14474;
        host_args.at(6) = x14475;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14476 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14476 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14477 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14477 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14478 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14478 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14479 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14479 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14480 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14480 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14481 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14481 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14482 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14482 != Fp::invalid());
        host_args.at(0) = x14476;
        host_args.at(1) = x14477;
        host_args.at(2) = x14478;
        host_args.at(3) = x14479;
        host_args.at(4) = x14480;
        host_args.at(5) = x14481;
        host_args.at(6) = x14482;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14483 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x14483 != Fp::invalid());
    if (x14483 != 0) {
      {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14484 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14484 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14485 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14485 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14486 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14486 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14487 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14487 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14488 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14488 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14489 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14489 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14490 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14490 != Fp::invalid());
        host_args.at(0) = x14484;
        host_args.at(1) = x14485;
        host_args.at(2) = x14486;
        host_args.at(3) = x14487;
        host_args.at(4) = x14488;
        host_args.at(5) = x14489;
        host_args.at(6) = x14490;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14491 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14491 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14492 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14492 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14493 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14493 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14494 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14494 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14495 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14495 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14496 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14496 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14497 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14497 != Fp::invalid());
        host_args.at(0) = x14491;
        host_args.at(1) = x14492;
        host_args.at(2) = x14493;
        host_args.at(3) = x14494;
        host_args.at(4) = x14495;
        host_args.at(5) = x14496;
        host_args.at(6) = x14497;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14498 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14498 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14499 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14499 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14500 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14500 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14501 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14502 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14502 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14503 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14504 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14504 != Fp::invalid());
        host_args.at(0) = x14498;
        host_args.at(1) = x14499;
        host_args.at(2) = x14500;
        host_args.at(3) = x14501;
        host_args.at(4) = x14502;
        host_args.at(5) = x14503;
        host_args.at(6) = x14504;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14505 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14506 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14506 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14507 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14508 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14509 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14509 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14510 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14510 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14511 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14511 != Fp::invalid());
        host_args.at(0) = x14505;
        host_args.at(1) = x14506;
        host_args.at(2) = x14507;
        host_args.at(3) = x14508;
        host_args.at(4) = x14509;
        host_args.at(5) = x14510;
        host_args.at(6) = x14511;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14512 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14512 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14513 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14513 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14514 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14514 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14515 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14515 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14516 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14516 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14517 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14517 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14518 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x14518 != Fp::invalid());
        host_args.at(0) = x14512;
        host_args.at(1) = x14513;
        host_args.at(2) = x14514;
        host_args.at(3) = x14515;
        host_args.at(4) = x14516;
        host_args.at(5) = x14517;
        host_args.at(6) = x14518;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14519 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x14519 != Fp::invalid());
    if (x14519 != 0) {
      {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14520 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14521 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14522 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14523 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14523 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14524 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14524 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14525 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14525 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14526 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14526 != Fp::invalid());
        host_args.at(0) = x14520;
        host_args.at(1) = x14521;
        host_args.at(2) = x14522;
        host_args.at(3) = x14523;
        host_args.at(4) = x14524;
        host_args.at(5) = x14525;
        host_args.at(6) = x14526;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14527 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14527 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14528 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14528 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14529 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14529 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14530 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14530 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14531 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14531 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14532 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14532 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14533 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14533 != Fp::invalid());
        host_args.at(0) = x14527;
        host_args.at(1) = x14528;
        host_args.at(2) = x14529;
        host_args.at(3) = x14530;
        host_args.at(4) = x14531;
        host_args.at(5) = x14532;
        host_args.at(6) = x14533;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14534 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x14534 != Fp::invalid());
    if (x14534 != 0) {
      {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14535 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14535 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14536 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14536 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14537 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14538 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14539 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14539 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14540 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14540 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14541 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14541 != Fp::invalid());
        host_args.at(0) = x14535;
        host_args.at(1) = x14536;
        host_args.at(2) = x14537;
        host_args.at(3) = x14538;
        host_args.at(4) = x14539;
        host_args.at(5) = x14540;
        host_args.at(6) = x14541;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14542 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14543 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14543 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14544 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14544 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14545 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14545 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14546 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14546 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14547 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14547 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14548 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14548 != Fp::invalid());
        host_args.at(0) = x14542;
        host_args.at(1) = x14543;
        host_args.at(2) = x14544;
        host_args.at(3) = x14545;
        host_args.at(4) = x14546;
        host_args.at(5) = x14547;
        host_args.at(6) = x14548;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14549 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x14549 != Fp::invalid());
    if (x14549 != 0) {
      {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14550 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14550 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14551 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14551 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14552 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14552 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14553 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14553 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14554 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14554 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14555 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14555 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14556 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14556 != Fp::invalid());
        host_args.at(0) = x14550;
        host_args.at(1) = x14551;
        host_args.at(2) = x14552;
        host_args.at(3) = x14553;
        host_args.at(4) = x14554;
        host_args.at(5) = x14555;
        host_args.at(6) = x14556;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14557 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14557 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14558 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14558 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14559 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14559 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14560 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14560 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14561 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14561 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14562 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14562 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14563 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14563 != Fp::invalid());
        host_args.at(0) = x14557;
        host_args.at(1) = x14558;
        host_args.at(2) = x14559;
        host_args.at(3) = x14560;
        host_args.at(4) = x14561;
        host_args.at(5) = x14562;
        host_args.at(6) = x14563;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14564 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x14564 != Fp::invalid());
    if (x14564 != 0) {
      {
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14565 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14565 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14566 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14566 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14567 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14567 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14568 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14568 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14569 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14569 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14570 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14570 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14571 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14571 != Fp::invalid());
        host_args.at(0) = x14565;
        host_args.at(1) = x14566;
        host_args.at(2) = x14567;
        host_args.at(3) = x14568;
        host_args.at(4) = x14569;
        host_args.at(5) = x14570;
        host_args.at(6) = x14571;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14572 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14572 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14573 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14573 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14574 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14574 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14575 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14575 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14576 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14576 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14577 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14578 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14578 != Fp::invalid());
        host_args.at(0) = x14572;
        host_args.at(1) = x14573;
        host_args.at(2) = x14574;
        host_args.at(3) = x14575;
        host_args.at(4) = x14576;
        host_args.at(5) = x14577;
        host_args.at(6) = x14578;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14579 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14579 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14580 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14580 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14581 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14581 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14582 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14582 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14583 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14583 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14584 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14584 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14585 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14585 != Fp::invalid());
        host_args.at(0) = x14579;
        host_args.at(1) = x14580;
        host_args.at(2) = x14581;
        host_args.at(3) = x14582;
        host_args.at(4) = x14583;
        host_args.at(5) = x14584;
        host_args.at(6) = x14585;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14586 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14586 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14587 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14587 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14588 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14588 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14589 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14589 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14590 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14591 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14591 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14592 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14592 != Fp::invalid());
        host_args.at(0) = x14586;
        host_args.at(1) = x14587;
        host_args.at(2) = x14588;
        host_args.at(3) = x14589;
        host_args.at(4) = x14590;
        host_args.at(5) = x14591;
        host_args.at(6) = x14592;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14593 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x14593 != Fp::invalid());
    if (x14593 != 0) {
      {
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14594 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14594 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14595 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14595 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14596 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14596 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14597 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14597 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14598 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14598 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14599 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14599 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14600 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14600 != Fp::invalid());
        host_args.at(0) = x14594;
        host_args.at(1) = x14595;
        host_args.at(2) = x14596;
        host_args.at(3) = x14597;
        host_args.at(4) = x14598;
        host_args.at(5) = x14599;
        host_args.at(6) = x14600;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14601 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14601 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14602 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14603 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14604 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14605 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14605 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14606 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14606 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14607 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14607 != Fp::invalid());
        host_args.at(0) = x14601;
        host_args.at(1) = x14602;
        host_args.at(2) = x14603;
        host_args.at(3) = x14604;
        host_args.at(4) = x14605;
        host_args.at(5) = x14606;
        host_args.at(6) = x14607;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14608 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14608 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14609 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14609 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14610 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14610 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14611 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14611 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14612 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14612 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14613 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14613 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14614 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14614 != Fp::invalid());
        host_args.at(0) = x14608;
        host_args.at(1) = x14609;
        host_args.at(2) = x14610;
        host_args.at(3) = x14611;
        host_args.at(4) = x14612;
        host_args.at(5) = x14613;
        host_args.at(6) = x14614;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14615 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14615 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14616 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14616 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14617 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14617 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14618 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14618 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14619 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14620 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14621 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14621 != Fp::invalid());
        host_args.at(0) = x14615;
        host_args.at(1) = x14616;
        host_args.at(2) = x14617;
        host_args.at(3) = x14618;
        host_args.at(4) = x14619;
        host_args.at(5) = x14620;
        host_args.at(6) = x14621;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14622 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x14622 != Fp::invalid());
    if (x14622 != 0) {
      {
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14623 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14623 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14624 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14624 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14625 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14626 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14627 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14628 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14628 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14629 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14629 != Fp::invalid());
        host_args.at(0) = x14623;
        host_args.at(1) = x14624;
        host_args.at(2) = x14625;
        host_args.at(3) = x14626;
        host_args.at(4) = x14627;
        host_args.at(5) = x14628;
        host_args.at(6) = x14629;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14630 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14630 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14631 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14631 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14632 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14632 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14633 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14633 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14634 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14634 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14635 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14635 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14636 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14636 != Fp::invalid());
        host_args.at(0) = x14630;
        host_args.at(1) = x14631;
        host_args.at(2) = x14632;
        host_args.at(3) = x14633;
        host_args.at(4) = x14634;
        host_args.at(5) = x14635;
        host_args.at(6) = x14636;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14637 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14637 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14638 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14638 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14639 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14640 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14641 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14642 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14642 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14643 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14643 != Fp::invalid());
        host_args.at(0) = x14637;
        host_args.at(1) = x14638;
        host_args.at(2) = x14639;
        host_args.at(3) = x14640;
        host_args.at(4) = x14641;
        host_args.at(5) = x14642;
        host_args.at(6) = x14643;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14644 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14644 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14645 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14645 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14646 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14646 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14647 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14647 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14648 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14648 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14649 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14649 != Fp::invalid());
        // loc("Top/Mux/4/Mux/14/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x14650 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14650 != Fp::invalid());
        host_args.at(0) = x14644;
        host_args.at(1) = x14645;
        host_args.at(2) = x14646;
        host_args.at(3) = x14647;
        host_args.at(4) = x14648;
        host_args.at(5) = x14649;
        host_args.at(6) = x14650;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x14225;
}

} // namespace risc0::circuit::rv32im
// clang-format on
