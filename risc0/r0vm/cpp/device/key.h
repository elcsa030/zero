/// @file key.h
/// @brief Cryptographic key

#pragma once

#include <cstddef>
#include <cstdint>

namespace risc0 {

class Env;
struct Digest;
class SHA256;

/// A pointer to a Digest.
using DigestPtr = const Digest*;

/// @brief KeyMode
enum class KeyMode : uint32_t {
  NEW,      ///< New
  EXISTING, ///< Existing
  ANY,      ///< Any
};

/// @brief A cryptographic key
/// @headerfile "risc0/r0vm/cpp/device/key.h"
class Key {
  friend class Env;
  friend class SHA256;

public:
  /// Combine keys via XOR.
  Key(const Key& a, const Key& b);

  /// Commit to the key, i.e. Get the 'public' version of this key.
  DigestPtr commit() const;

private:
  /// @private keys can only be generated by the Env.
  Key() = default;

private:
  uint32_t data[4];
};

/// A pointer to a Key.
using KeyPtr = const Key*;

} // namespace risc0
